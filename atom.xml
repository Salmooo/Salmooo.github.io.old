<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Salmooo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://salmooo.github.io/"/>
  <updated>2020-04-22T12:42:49.459Z</updated>
  <id>https://salmooo.github.io/</id>
  
  <author>
    <name>Salmone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EIT/ai/人工智能发展现状</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6/</id>
    <published>2020-04-22T12:42:49.459Z</published>
    <updated>2020-04-22T12:42:49.459Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/ai/人工智能的利与弊</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/</id>
    <published>2020-04-22T12:39:59.585Z</published>
    <updated>2020-04-22T12:40:28.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020030515032410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTcyODMy,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h2 id="人工智能的利与弊"><a href="#人工智能的利与弊" class="headerlink" title="人工智能的利与弊"></a>人工智能的利与弊</h2><blockquote><p>过去一年，人们越来越担心人工智能和自动化对人类就业和劳动力产生的影响。这无时不刻都在警示人们：机器人将人类推入失业并造成经济和社会混乱。<br>大家都感同身受的是人工智能为改善人民生活水平作出了巨大贡献。尽管如此，仍不能确定人工智能的未来，让我们深入研究一下，看看人工智能的利弊?都有哪些好处和哪些危害!</p></blockquote><h2 id="利"><a href="#利" class="headerlink" title="利"></a>利</h2><p>1、人工智能让人类生活更美好：<br>先如今已经被广泛运用的无人驾驶不仅减轻了人们的负担，更是大大降低了事故率。再比如说，如今苹果系统的SIR手写版系统、生物识别系统都是人工智能的应用，都让人类的生活质量得到显著提高。<br>2、人工智能可以帮助人类繁荣：<br>因为人类文明的每一件事物都是智力的产物，我们用人工智能放大我们自己的智慧，有可能帮助生命像以前一样蓬勃发展，解决我们最棘手的问题，从疾病到气候变化等。<br>3、人工智能推动了人类的理性进步，可以反过来促进人类的发展：<br>人工智能研发过程的本身就具有研究人脑认知与功能的需求和特性，而使人类在这个过程中就学习了学习的方法，从而增强人类的逻辑思维能力。人工智能更新了人类应对问题的方法，比如依靠大数据的分析，沃森医生可以提供对病人伤害最小的、全新的治疗手段和技能范围。</p><p>比如，从而丰富人类应对各种问题的方法。人工智能也拓宽了人类知识技能范围，比如，人工智能根据对大数据分析得到各种新知识、新信息，使人们难以预测的洪水、地震等灾害的预报的精确程度大大提高，使人类在自然面前的约束变得更强大。<br>4、带来更多的工作机会<br>就像曾经脱离了传统农业、传统手工业的大量劳动力，在现代工业生产和城市服务业中找到新的就业机会那样，人工智能的进步也将如此——由当前数据密集型机器学习、通过机器学习与人工智能会话的系统而延伸出的很多领域，将会在未来带来很多工作机遇。<br>未来随着自动驾驶、超人类视觉听觉、智能工作流程等技术的发展，专业司机、保安、放射科医生、行政助理、税务员、家政服务员、记者、翻译等工作都将可能被人工智能所取代。</p><h2 id="弊"><a href="#弊" class="headerlink" title="弊"></a>弊</h2><p>第一，人工智能会反过来控制人类，人类也会被异化，真正可怕的不止是这些。<br>人工智能分为强人工智能跟弱人工智能，当强人工智能发生到一定程度的时候，它会产生一种自我意识，促使自身不断发展，而谷歌研究总监说：人工智能的学习不是代码，更像是一个推动，而人类能稍微看到里面的一些东西，对里面的事情有一些些的了解，但是我们却看不到全面。那么我想请问对方辩友，你们无法全面地了解人工智能，如何发展？若有一天它发展到比你高级了，并且它要消灭比自己低级的人类的时候，当人类都不复存在的时候，对方辩友又凭什么说人工智能对人类发展利大于弊呢？</p><p>第二，马克思在《资本主义的六种技术悖论》中提到机器具有减少人类劳动，和使劳动更有成效的神奇力量，但也因此引起了过多的饥饿和过多的疲劳。<br>在过去的工业革命中，劳动岗位的替代是在人与人之间进行的，但现在，现在的人类的岗位是由人工智能替代了人的岗位，那我想问问对方辩友，那些饱受困苦的人类，被人工智能所替代的人类，他们该何去何从，在有限的岗位内人类被人工智能替代了，这难道能说人工智能的发展对人类的发展是有利的吗？不过，下岗还不是最可怕的。因为人工智能会产生巨大的商业价值，它能养活那些下岗者，那些人类，那么我想再问问对方辩友，一旦到人工智能来养活人类，人类达到了马斯洛需求的最基本需求，那么人类还会有动力去追求更高的目标吗？还是会产生一种惰性醉生梦死，日渐颓废呢？作为人类，你们不觉得这样活着很可悲吗？<br>第三，我们应该赋予人工智能人权吗？这是一个很值得深思的问题。<br>当人工智能在岗位上工作的时候，或许它犯了一些小的错误，被无情地拔掉电源，剥夺了它的自由平等，这难道对它来说是公平的吗？其实在我们思考这个问题的时候，我们就已经赋予它一种人权，这难道是我们该思考的问题吗？<br>以上是答辩双方其中的一段精彩部分，下面是本人观点，仅代表本人。<br>我个人认为人工智能的发展还是利大于弊的，人们所担心的人工智能取代人类完全是无稽之谈，就像当初手机电视的问世一样也是遭到了很多人的反对，但就目前的情况来看手机已经是生活的必需品了，因为有了手机让我们的生活变得更加便捷，也让生活充满了快乐。无论是移动支付还是视频通话都诠释着手机的成功！所以我们人人工智能的出现也会向手机一样，不可能完全取代人类。人们在享受着人工智能的便利同时一直都在恐惧着，如果人类最终会被人工智能所毁灭。那就只能说没有人工智能，人类依然会走向毁灭的。<br>人工智能首次出现，这就说明，它已经被国家层面所接受，并且决定大力扶持发展，这样才能紧跟国际潮流，加强与世界各国的联系，才能在这经济全球化的世界中处于领先地位。规划中，人工智能方向的前景被看好，其相关专业亦为朝阳产业。而面对当今诸多的世界性问题，例如环境问题，利用人工智能解决也不失为一个上上策，单凭某个人或者某个群体的努力是万万办不到的，而人工智能的兴起，则为我们解决这些问题提供了新的解决方法和思路，多了许多解决问题的方法和途径。<br>最后，纵观人类社会的发展史，也是人类的科技进步史，人工智能的出现与兴起，可以说是历史的必然规律，事实胜于雄辩，大家也一定赞同我们的观点：人工智能的利大于弊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/&quot; class=&quot;lazyload&quot; data-src=&quot;https://img-blog.csdnimg.cn/2020030515032410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/ai/人工智能发展历程</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</id>
    <published>2020-04-22T12:32:06.062Z</published>
    <updated>2020-04-22T12:36:49.197Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【编者按】**</strong>从19世纪中叶人工智能的萌芽时期，到现今人工智能的重生，从马文·明斯基到AlphaGo，历史上发生了哪些激动人心的故事？本文以此铺展人工智能发展近70年来背后发生的故事。作者@沐阳浸月，中科院自动化所复杂系统国家重点实验室研究生，主攻机器人与人工智能。**</p><hr><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-8f108981f100c0e5?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp"  alt=""><strong>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</strong></p><p>前不久，在人工智能领域发生了两件大事，一个就是是伟大的人工智能先驱马文·明斯基教授逝世，一个是谷歌AlphaGo击败欧洲围棋冠军，职业围棋二段樊麾。</p><p>马文·明斯基教授是几乎见证了从人工智能作为一门学科的兴起直至今日成就的所有大风大浪的人，或者可以说何教授本人就是这些大风浪的弄潮儿，他对人工智能的发展的影响意义十分深远。而谷歌AlphaGo此次取得的成就，也可以算是人工智能领域一次里程碑式的创举，它的成功标志着人工智能领域又进入了一个新高度。这篇文章，我们将从马文·明斯基还是哈佛大学本科生的时候讲起，一直到今日AlphaGo的胜利，梳理一下人工智能是怎样从初见萌芽一步一步走到今日的辉煌成就的。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-ef1bb42d46630e34?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>要是从宏观的角度来讲，人工智能的历史按照所使用的方法，可以分为两个阶段，分水岭大概在1986年神经网络的回归——</p><blockquote><p>在<strong>前半段历史</strong>中，我们主要使用的方法和思路是基于规则的方法，也就是我们试图找到人类认知事物的方法，模仿人类智能和思维方法，找到一套方法，模拟出人类思维的过程，解决人工智能的问题。</p><p><strong>后半段的历史</strong>，也就是我们现在所处的这个时期，我们主要采取的方法是基于统计的方法，也就是我们现在发现，有的时候我们不需要把人类的思维过程模拟出一套规则来教给计算机，我们可以在一个大的数量集里面来训练计算机，让它自己找到规律从而完成人工智能遇到的问题。</p></blockquote><p>这个转化也可以用一个形象的例子来描述，就像我们想造出飞机，就观察鸟是怎么样飞的，然后模仿鸟的动作就行，不需要什么空气动力学什么的，这种思想在人类历史上也被称为“鸟飞派”。但是我们都知道，怀特兄弟造出飞机靠的是空气动力学，而不是仿生学。不过我们不能就因为这一点就笑话人工智能前半段各位研究人员和前辈的努力和心血，因为这是人类认知事物的普遍规律，其实现在也有不少人会认为，计算机可以读懂文字、看懂图片靠的是依靠和我们人类一样的认知过程。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-001227da8be9c84c?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>在研究基于规则的探索中，人工智能经历了三个主要阶段——兴起、繁盛和萧条。会有这样的过程，一个重要原因是基于规则方法的局限性。好了，那我们就先扒一扒这段历史。</p><h2 id="一、萌芽阶段"><a href="#一、萌芽阶段" class="headerlink" title="一、萌芽阶段"></a><strong>一、萌芽阶段</strong></h2><p>人工智能的萌芽时期大概出现在19世纪中叶，第一位需要介绍的人物便是<strong>马文·明斯基</strong>。明斯基于1946年进入哈佛大学主修物理专业，但他选修的课程相当广泛，从电气工程、数学，到遗传学、心理学等涉及多个学科专业，后来他放弃物理改修数学。</p><p>1950年，也就是明斯基本科的最后一年，<strong>他和他的同学Dean Edmonds建造了世界上第一台神经网络计算机，并命名其为SNARC</strong>（Stochastic Neural Analog Reinforcement Calculator）。这台计算机是由3000个真空管和B-24轰炸机上一个多余的自动指示装置来模拟40个神经元组成的网络的。后来，明斯基又到普林斯顿大学攻读数学博士学位，并以“神经网络和脑模型问题”为题完成博士论文，但是当时的评审委员会并不认为这可以看做是数学。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-f855d9de88e3dc28?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（马文·明斯基）</p><p>明斯基的这些成果虽然可以被称作人工智能的早期工作，但是鉴于当时的明斯基还是一个青涩的毛头小子，所做的博士论文都不能得到相应的认可，所以影响力有限。</p><p>接着上场的第二位人物影响力就大很多，那就是<strong>计算机科学之父**</strong>阿兰·图灵，他是被认为最早提出机器智能设想的人**。图灵在1950年的时候（也就是明斯基还在读本科的时候）在杂志《思想》（Mind）发表了一篇名为“计算机器与智能”的文章，在文章中，图灵并没有提出什么具体的研究方法，但是文章中提到的好多概念，诸如图灵测试、机器学习、遗传算法和强化学习等，至今都是人工智能领域十分重要的分支。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-7c4b63da52bf792a?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（图灵在1950年的时候在杂志《思想》（Mind）发表的名为“计算机器与智能”的文章）</p><p>介绍完以上两大人物，接下来标志着人工智能作为一个独立领域而诞生的盛会——达特茅斯研讨会就要粉墨登场了。</p><p>不过在介绍达特茅斯研讨会之前，我们不得不介绍这第三位重量级的人物，那就是<strong>约翰·麦卡锡，</strong>因为他正是这次研讨会的发起人。约翰·麦卡锡于1948年获得加州理工学院数学学士学位，1951年获得普林斯顿大学数学博士学位。然后又在那里作为老师工作了两年，接着短暂地为斯坦福大学供职后到了达特茅斯大学，正是这个时期，它组织了达特茅斯研讨会。在这次大会上，麦卡锡的术语人工智能第一次被正式使用，所以麦卡锡也被称作人工智能之父。其实麦卡锡在达特茅斯会议前后，他的主要研究方向正是计算机下棋。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-a6e153c3d991eeea?imageMogr2/auto-orient/strip%7CimageView2/2/w/542/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（约翰·麦卡锡）</p><p>下棋程序的关键之一是如何减少计算机需要考虑的棋步。麦卡锡经过艰苦探索，终于发明了著名的α-β搜索法，使搜索能有效进行。α-β搜索法说核心就是，算法在采取最佳招数的情况下允许忽略一些未来不会发生的事情。说的有点抽象，我们来举个十分简单的例子。</p><p>假如你面前有两个口袋和一个你的敌人，每个口袋放着面值不等的人民币，你来选择口袋，你的敌人决定给你这个口袋里哪张面值的钱。假设你一次只能找一只口袋，在找口袋时一次只能从里面摸出一次。当然你希望面值越大越好，你的敌人自然希望面值越小越好。假如你选择了第一个口袋。现在我们从第一个口袋开始，看每一张面值，并对口袋作出评价。比方说口袋里有一张5元的和一张10元的。如果你挑了这只口袋敌人自然会给你5元的，10元的就是无关紧要的了。</p><p>现在你开始翻第二个口袋，你每次看一张面值，都会跟你能得到的最好的那张面值(5元)去比较。所以此时你肯定就去找这个口袋里面面值最小的，因为只要最少的要比5元好，那么你就可以挑这个口袋。假如你在第二个口袋摸出一张1元的，那么你就不用考虑这个口袋了，因为如果你挑了这个口袋，敌人肯定会给你1元面值的，那当然要选择最小面值的5元的那个口袋啦。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-f01422989f0b6671?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（基于α-β剪枝算法的智能五子棋）</p><p>虽然有点绕，不过我觉得你应该大概已经理解了这个思路。这就是α-β搜索法，因为这种算法在低于或者超过我们搜索中的α或者β值时就不再搜索，所以这种算法也称为α-β剪枝算法。这种算法至今仍是解决人工智能问题中一种常用的高效方法。当年IBM的深蓝国际象棋程序，因为打败世界冠军卡斯帕罗夫而闻名世界，它靠的正是在30个IBM RS/6000处理器的并行计算机上运行的α-β搜索法。</p><p>但是需要注意的是，前不久的谷歌AlphaGo，由于棋盘是19x19的，几乎所有的交叉点都可以走子，初始的分支因子为361，这对于常规的α-β搜索来说太令人生畏了，所以别看名字里面带了一个α（Alpha，有可能这个名字是为了纪念麦卡锡的α-β搜索算法），AlphaGo采用的是却是蒙特卡洛搜索树（MCTS），它是一种随机采样的搜索树算法，它解决了在有限时间内要遍历十分宽的树而牺牲深度的问题。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-9c28caed11143865?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>后来麦卡锡有从达特茅斯搬到了MIT，在那里他又做出了三项十分重要的贡献。第一个是他定义了高级语言Lisp语言，从此Lisp语言长期以来垄断着人工智能领域的应用，而且人们也有了可以拿来用的得力工具了，但是稀少而且昂贵的计算资源仍是问题。于是麦卡锡和他的同事又发明了分时技术。然后，麦卡锡发表了题为“有常识的程序”的文章，文中他描述了一种系统，取名为意见接收者，任务是使用知识来搜索问题的解，这个假想也被看成是第一个完整的人工智能系统。</p><p>同年，明斯基也搬到了MIT，他们共同创建了世界上第一座人工智能实验室——MIT AI Lab实验室。尽管后来麦卡锡和明斯基在某些观点上产生了分歧导致他们的合作并没有继续，但这是后话。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-f2ba235b6392733d?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（MIT AI Lab实验室）</p><h2 id="二、人工智能的诞生"><a href="#二、人工智能的诞生" class="headerlink" title="二、人工智能的诞生"></a><strong>二、人工智能的诞生</strong></h2><p>好了，前期的一些大人物介绍完了，让我们一起回到1956年那个意义非凡的夏天。</p><p>那年，28岁的约翰·麦卡锡，同龄的马文·明斯基，37岁的罗切斯特和40岁的香农一共四个人，提议在麦卡锡工作的达特茅斯学院开一个头脑风暴式的研讨会，他们称之为“达特茅斯夏季人工智能研究会议”。参加会议的除了以上这四位，还有6位年轻的科学家，其中包括40岁的赫伯特·西蒙和28岁的艾伦·纽维尔。在这次研讨会上，大家讨论了当时计算机科学领域尚未解决的问题，包括人工智能、自然语言处理和神经网络等。人工智能这个提法便是这次会议上提出的，上文也有提到。在这个具有历史意义的会议上，明斯基的SNARC，麦卡锡的α-β搜索法，以及西蒙和纽维尔的“逻辑理论家”是会议的三个亮点。前面已经对明斯基的SNARC，麦卡锡的α-β搜索法有所介绍，下面我们再来看一下西蒙和纽维尔的“逻辑理论家”又是什么。</p><p>西蒙和纽维尔均是来自卡内基梅隆大学（当时还叫卡内基技术学院）的研究者，他们的研究成果在这次盛会上十分引人注意。“逻辑理论家”是西蒙和纽维尔研究出来的一个推理程序，他们声称这个程序可以进行非数值的思考。然后在这次研讨会之后不久，他们的程序就能证明罗素和怀特海德的《数学原理》第二章的大部分定理。但是历史往往对新鲜事物总是反应迟缓，他们将一篇与逻辑理论家合著的论文提交到《符号逻辑杂志》的时候，编辑们拒绝了他们。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-ae0498a949c7529e?imageMogr2/auto-orient/strip%7CimageView2/2/w/382/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>我们现在来看看这个研讨会的成果，或者说叫意义。遗憾的是，由于历史的局限，这个世界上最聪明的头脑一个月的火花碰撞，并没有产生任何新的突破，他们对自然语言处理的理解，合在一起甚至不如今天一位世界上一流大学的博士毕业生。但是这次研讨会却让人工智能领域主要的人物基本上全部登场。在随后的20年，人工智能领域就被这些人以及他们在MIT、CMU、斯坦福和IBM的学生和同事们支配了。</p><p>我们看看这10个人，除了香农，当时其实大多数都没什么名气，但是不久之后便一个个开始崭露头角，其中包括四位图灵奖的获得者（麦卡锡，明斯基，西蒙和纽维尔），这四位也是我上文主要介绍的四个人。当然，香农也不用得图灵奖，作为信息论的发明人，他在科学史上的地位也图灵也差不多了。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-088c9f900d4c052c?imageMogr2/auto-orient/strip%7CimageView2/2/w/300/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（香农）</p><h2 id="三、短暂的繁荣与困境"><a href="#三、短暂的繁荣与困境" class="headerlink" title="三、短暂的繁荣与困境"></a><strong>三、短暂的繁荣与困境</strong></h2><p>从这次会议之后，人工智能迎来了它的一个春天，因为鉴于计算机一直被认为是只能进行数值计算的机器，所以，它稍微做一点看起来有智能的事情，人们都惊讶不已。</p><p>因为鉴于当时简单的计算机与编程工具，研究者们主要着眼于一些比较特定的问题。例如Herbert Gelernter建造了一个几何定理证明器，可以证明一些学生会感到棘手的几何定理；阿瑟·萨缪尔编写了西洋跳棋程序，水平能达到业余高手；James Slagle的SAINT程序能求解大学一年级的闭合式微积分问题；还有就是结合了多项技术的积木世界问题，它可以使用一只每次能拿起一块积木的机器手按照某种方式调整这些木块。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-b7edeaf95ac4380e?imageMogr2/auto-orient/strip%7CimageView2/2/w/427/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（马文·明斯基与他的积木机器人）</p><p>虽然这些早期的人工智能项目看起来拥有着巨大的热情和期望，但是由于方法的局限性，人工智能领域的研究者越来越意识到他们所遇到的瓶颈和困难，再加上没有真正令人振奋人心的项目出来而导致资助的停止，人工智能陷入了一个低潮。</p><p><strong>产生这些现实困难的原因主要有三点。</strong></p><p><strong>第一点是大部分早期程序对要完成的任务的主题一无所知。</strong>就拿机器翻译来说，给程序一个句子，会用的方法只是进行句法分割然后对分割后的成分进行词典翻译，那这样就很容易产生歧义。例如I went to the bank，bank既有银行也有河岸的意思，如果只是单纯的分割加单词翻译，这句话根本没法解释。</p><p><strong>第二点是问题的难解性</strong>。上面我已经提到，早期的人工智能程序主要解决特定的问题，因为特定的问题对象少，复杂度低啊，但是一旦问题的维度上来了，程序立马就捉襟见肘了。</p><p><strong>第三点就是程序本身的结构就有问题。</strong>例如明斯基在1969年证明了两输入的感知机连何时输入是相同的都判断不了。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-210ee72bea4a140e?imageMogr2/auto-orient/strip%7CimageView2/2/w/403/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（感知机模型）</p><p>综上，由于种种困难，再加上资助的减少，人工智能步入了寒冬。这便是人工智能历史的上半段。</p><h2 id="四、人工智能的重生"><a href="#四、人工智能的重生" class="headerlink" title="四、人工智能的重生"></a>四、人工智能的重生</h2><p>上个世纪80年代中期，当初于1969年由Bryson和Ho建立的反传学习算法被重新发明，然后统计学在人工智能领域的使用以及良好的效果也让科学界为之一振。于是在新的结构和新的方法下，人工智能又重获新生。</p><p><strong>首先兴起的是语音识别领域，在这个方面的成就一个重要的原因是隐马尔可夫模型的方法开始主导这个领域。</strong>隐马尔可夫模型包含“隐含”和“马尔可夫链”两个概念，马尔可夫链是具有这样一种特性的链条，就是现在的状态只和前一个状态有关，而和再往前的状态没有关系。所以我们遇到这样一个链条的时候，我们可以随机选择一个状态作为初始状态，然后按照上述规则随机选择后续状态。“隐含”的意思则是在这个马尔可夫链上再加一个限制就是，任意时刻的状态我们是不可知的，但是这个状态会输出一个结果，这个结果只和这个状态相关，所以这个也称为独立输出假设。</p><p>通过这么一解释我们就能看出，隐马尔可夫模型是基于严格的数学理论基础，这允许语音研究者以其他领域中发展数十年的数学成果为依据。其次这个模型的这种随机性可以通过大量的真实语音进行训练，这就保证了性能的鲁棒性。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-d0eb9ee907eeac38?imageMogr2/auto-orient/strip%7CimageView2/2/w/427/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（隐马尔可夫模型简图）</p><p>在马尔可夫链的基础上还诞生了一个以对不确定性知识进行有效表示和严格推理的形式化方法——贝叶斯网络。贝叶斯网络是一个加权的有向图，是马尔可夫链的拓展。马尔可夫链保证了网络中的每一个状态只跟与其直接相连的状态有关，而跟与它间接相连的状态没有关系，那么这就是贝叶斯网络。在这个网络中，每个节点的概率，都可以用贝叶斯公式来计算，贝叶斯网络因此得名。</p><p><strong>贝叶斯网络极大地克服了20世纪60年代和70年代概率推理系统的很多问题，它目前主导着不确定推理和专家系统中的人工智能研究。</strong>而且这种方法允许根据经验进行学习，并且结合了经典人工智能和神经网络最好的部分。所以极大的推动的人工智能领域走向现在我们正处的这个巅峰时代。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-67634c616db203c0?imageMogr2/auto-orient/strip%7CimageView2/2/w/246/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（一个简单的贝叶斯网络。雨水影响洒水器是否有动作，且雨水及洒水器二者均可影响草是否湿润）</p><p>除了这种算法上的革新，还有两个重要推动因素就是互联网的兴起以及极大数据集的可用性。就像我们用Siri的时候必须联网一样，人工智能系统基于Web的应用变得越来越普遍；我之前在文章《<a href="http://www.leiphone.com/news/201512/0sC1ADR757kXMIPu.html" target="_blank" rel="noopener">2015年，机器人界发生了哪些神奇疯狂的故事？（下）</a>》中介绍的HitchBOT，它可以拍照、自动识别路人的语言，并将回答显示在屏幕上，这个能力也是通过在网络上搜索相应的答案而实现的。</p><p>由于我们现在采用的方法已经基本上变为是基于概率的方法，所以我们便需要有大量的数据集对我们的系统进行训练，以完成监督学习。而现在的互联网环境让这种极大数据集的获得变得越来越方便和容易。就如我们所熟知的ImageNet，ImageNet是一个带有标记信息的图片库，里面的图片均已经由人对图片内容进行了标记。它就好比是一个用于测试计算机视觉系统识别能力的“题库”，包含超过百万道“题目”。 题目由图像和对应的单词（80%为名词）组成，考察的方式是计算机视觉系统能否识别图像中的物体并返回正确的单词。ImageNet使用训练题对计算机视觉系统进行“培训”，然后用测试题测试其识别能力。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-c3a72ac83ebc327c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（ImageNet数据集）</p><p>又如AlphaGo，在DeepMind的主页里，AlphaGo是这样被介绍的：它是一种计算机玩围棋的新方法，这种方法运用了基于深度神经网络的蒙特卡洛搜索树，而这个深度神经网络一方面是通过运用人类专家级围棋棋局进行监督学习来训练，另一方面还通过程序通过电脑自己与自己博弈的增强学习来进行训练，可见AlphaGo的成果也离不开通过学习人类专家级棋谱进行监督学习的这个大量数据集的使用。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-141e7ad30e89a89c?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（DeepMind的主页里<a href="http://www.deepmind.com/alpha-go.html" target="_blank" rel="noopener">AlphaGo</a>的页面）</p><p>今天这篇文章，我们从人工智能的萌芽一直到今天AlphaGo打败击败欧洲冠军樊麾职业二段这个里程碑式的事件截止，介绍了人工智能能走到今天这个成就的一路的艰难险阻与大风大浪。我相信，随着计算机运算能力以及更加优化的算法，以及大数据集和数据挖掘等技术的帮助，人工智能的路一定会继续高歌猛进。</p><p>转载：<a href="https://www.leiphone.com/news/201601/qXo5EaNlM0Lt4CyR.html" target="_blank" rel="noopener">https://www.leiphone.com/news/201601/qXo5EaNlM0Lt4CyR.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;【编者按】**&lt;/strong&gt;从19世纪中叶人工智能的萌芽时期，到现今人工智能的重生，从马文·明斯基到AlphaGo，历史上发生了哪些激动人心的故事？本文以此铺展人工智能发展近70年来背后发生的故事。作者@沐阳浸月，中科院自动化所复杂系统国家重点实验室研究
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Funny/laugh</title>
    <link href="https://salmooo.github.io/2020/04/21/Funny/laugh/"/>
    <id>https://salmooo.github.io/2020/04/21/Funny/laugh/</id>
    <published>2020-04-21T15:04:18.002Z</published>
    <updated>2020-04-21T03:01:58.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天给大家带来点快乐，程序员才能看懂嘿嘿<br>素材来源于知乎：<a href="https://zhuanlan.zhihu.com/p/47066521" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/47066521</a></p></blockquote><ol><li>公司实习生找 Bug</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljZzA4MGFzNDlJYm1aaWFxOWxzcHA0bHhUZ3JGTkdlQ1ByWU5WWDNpYUdMS2Y4a2lhTWg4NnAzbGhRLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="2"><li>在调试时，将断点设置在错误的位置</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRm9PYzlYRExBTU5CNlM1VjdkenBTb0FNTWdUNlI0Z0VYcmYyQWljM0FESm9yTnR3TG43SHJmQS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="3"><li>当我有一个很棒的调试想法时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljMVc5ckJyeDJaaWI3dFVGOTRMbU1DdXV5RlRPQkxVOGlhUjVYcWI2cTdkZHBrUUEydW43Q2VEN0EvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="4"><li>偶然间看到自己多年前写的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVmtwYzFBREdRWDZtT2hzOE1NMm5OREZ4NmZJZkl4bldUN3dld1RrOEhEUmljbVlWUGNEc1N1dy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="5"><li>当我第一次启动我的单元测试时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljOXgzdFJXRXhWWDN0aWFsMW9pYklocFJvaWNOc2ljNWRYZ1NSVVJBNUl2eXpvVjVZaWIwZDdTUnhNMWcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="6"><li>数据库的 Delete 语句忘了使用限定词 where…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljejVrTEJUaHlwYkdBdnNWMktxNXF1MEVpYTRpYkI4YzNlaWN4TGhYY0M1YzY4RXZpYTFWMEs3VGljY3cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="7"><li>明明是个小 bug，但就是死活修不好……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVGdDakJVOE9GN3hLbUZUUWVveVVxekNsZ1VJZEVhMEo2TEJSODVrR2ljTVVXT3BDYk9ubElpY1EvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="8"><li>当我尝试调整生产数据库中的一些东西时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljbG1uNkdBaWMzOGs2VUV4VzVpYzhxMjRpYm51VzFYMXFXd2M1OVVpY0k2Z1owZlJQWGJWZDF6ZW1wZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="9"><li>好像真的没人发现我产品里的 bug……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRVYxWDVNaWMydXA2dEx3bGMwYWljaWNmcGVzWHY3MUxkcUVLVlpzQ2I3RGtMU0NTUk5oSVN5dm1BLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="10"><li>下班前我还有一项任务没有完成</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljd1p0T0hVZE96MmVacEZubWR4YzVvMFVUbE00ajJpYVhMbmRrMzBiNFBDZEpvd2JrZHVmd2FHZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="11"><li>产品还没测试直接投入生产时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljbWZnYnA4cTJabm5pYkswMnB6d0xDN0NSY1NkYUxGbzh1U0UxenZpY2tBVUNhRGljY0tqQUlwbnN3LzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="12"><li>调试过多线程的都会懂！</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWlja0JtTHo2RWliQk45STFHbUw4MEFZZWg4SmlhOFFBVWljbjBQaWJzZkpvZklwSmx5aWNoNjVaT3hwUmcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="13"><li>当我以为已捕获了所有可能的异常…的时候</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSWpaY09QTmlhV1g0ME5QM0tuUk1KVmlhYk1iem1vQWxpYkhMU2IxTWI4WTZyVWIxNVYyOXJLTmdBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="14"><li>当我试图清理几行所谓的旧代码的时候</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljUmo2dzN5WFJzQ2ljdFVkVmNyZWVSYUoyYWlhQjRsNGdIeFR1MENQVmhYbnF3WmljUWRJaWI5cDJZdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="15"><li>当有人让我帮他调试代码时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWNpYzBQVTZRTXJTaG1RT0dTWklLZjhleGZzcnloa0ZoZHJKdWljaWNLV25ab1BubkN2ZmdYZ2xWdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="16"><li>当程序员第一次向老板演示项目时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcEVHSE1PR3NtSWliazAwcWliT0M4bExrdmgyT1lFZHQyY1dOSHFqMmN3ZTVpYzhNSE1XNDdCMW5RLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="17"><li>结对编程，需要再了解一下吗？</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWNMWUZvZFI0VGVidU54aWE0bVBFRFRja2pZNmRwZWZxejVSMlR3dDZWVTd5dGVRak9xWlR5dEEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="18"><li>当你看到你几个月没碰过的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSnV1OHNGZFBIRFpOcGdSY0FWb0prcDBKekNFQUJHZ1JxendYSG0zM29uaWNkOFpqOVVBc25TZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="19"><li>接到产品经理电话的我睡意全无！</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljYWlhM0h2M052QkJpYm5HcGJlNDQ4aWJ2c1Rjc29iUDlhaWNXUGlhWlR2ckxBazNQaWNvNm1QTzNvaWNKdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="20"><li>测试的时候一切 ok，真正上线的时候……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljdDg4NHViVVFaNjlENHRMdVBpYWxqa2liZW10UDVBOXJYUElkTFVITmlicUtobDV1TnZMdlFUakpBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="21"><li>作为一个程序员，拷问灵魂的时刻到了！</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljbmliU04zVFdMcmxOS29NTWVEZjl5SkE4dDhjaWJpYjFEcXJ5eHBMaWNYSmljODl2R3JOWVRxVUJwQlEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="22"><li>当年学 C 语言的过程</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljMDJRZXpNVmhEeDhXR0VqWm9LZEZPUzNQbEVCRlQ1SWVic3F2QnoyeGRXc2Q3ZnRqdko3MWN3LzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="23"><li>当前端程序员想改后台代码时，后台程序员的样子</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljZlJsVUJJR1dFYlY0bENhaWFpYmljaFgxY3NYcUJuNVN5aWJnc2NaRnNSVG1rM3BuS1g2ejMzUDlMZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="24"><li>调试 bug</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRWV1VEt1amsxR0JSbzVWWGljNEZ4eVhPQlFiZ2pyU2liQk9SNk9la3hyWXBvMjkzQllaQ2h2M3cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="25"><li>正在调试，突然内存溢出了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljV1hoeUtlclJYWmljaWNTMXNlMHdEcmF6MGlhUlFDQWxveU1MU2Y0a1htWW5Hcks1Y0cwWTV4aWJ1Zy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="26"><li>需求文档又改了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljTVEzcGRWTk0yRWt1VkFpYTF0Y3dKY0NUU0FMRzlLdU1BVG9EOWliTDllWEMzS1FVbldFbENWNkEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="27"><li>苦逼的后端工程师</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRUsyMDVhbTUyZGlhejBQRzJoaFZLaWFqaWJrSVdCa2RUVzc0aGRhVk4xWGU5b21mWFBuNUR0QzhBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="28"><li>后端工程师做 UI 的活</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVkFMaDJvWUw0TGJHakVqaWI1U2RiYXhEbzk3MkRKOFkxakdDVVVRUDVJMVpmd0JPSHllVHRpYmcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="29"><li>前后端分离开发</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljYkJKZGtRYjQzaWNwSHJQTzF1QllGeUkyWlRldWJqYnNPQlB5WklrRVQ1TFRuREUwcGliQndvSEEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="30"><li>单身互联网狗的一天</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljWjlWeVRDdFZSMHhEV2dnOG8wUGlhQUJSZmlhaWJEUE5hWENWRG1rQ0JpYjZkb1ZpYXhnaWJXWTh5WFBBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="31"><li>在生产环境做 hotfix</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRGhPemtmenZEZnVTbEYwNXA0TE5oaWNJbGljVDNVQ3JFcUt0SlhHUGJ5Q3lkeGZJNklZazkwTWcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="32"><li>刚调稳定的系统，公司叕空降了一位架构师，又双叕要重构现有系统……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljUHVDUEx2MUZtMnNtUWZ5aWNnWlhTMWljQWZxWUFUaWMzamxZclJkaWFuMGYxc2liVGR6NGlhVkJEdGliUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="33"><li>当程序员听客户说还在用 IE 时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWlja3pGcXlYZUowY2thYmhUTDhvTmd6SUxiUmFEY1BpYlRKdGFMdFNTZmpsUTAwS0RzMEpIM2pIUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="34"><li>当黑客拿到 root 权限之后</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVjI3RXcwekF6YW8zaWNXdEJ2aWF4aWNRS3B1cXI0ZUdpYXg4YXlITUNodG1iWVpnOEZkV24yN1dhZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="35"><li>代码进入循环分支后</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWF4Y0k3aFBaYXl6eWljS3V5OFFIcmY1dXFCOGZBRzZSM3pNaWE0QjZsQmhBRXRWVERQTjhiazFnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="36"><li>新手程序员第一次做项目的过程</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWM0N1ZQM2x5TTlvRE1XYXBaNVZpY3JmWnFVT2R0aG8xOHZUQUNpYTVUaktoOTdXTlRpY1JtUHpiQS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="37"><li>零错误零警告一次编译通过</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljOE9Uek9lbmljTjNwMXc0ckY5OEdidlNSODVJaWNOOFZLcW1wWWZHSjY5cnVlZWpidjN4NGliaWNIUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="38"><li>春节前后上班写代码状态是这样的</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljR3RpY3RrNnhhaWFOSjU2YWljMGNkTlRTaGljZWRGMEgwYk9wUGVIMWVIdGlhbVcyUWtwcTlrcWlheGNBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="39"><li>自信爆棚地去重构一个看似简单的模块</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljUWljWFJCSThzOTY1WE1McGliQ09ZbGxBdWhwN1VqNkF4MWtrOEdpYlJsU0dBZXl6YzRUQWFpYldXZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="40"><li>被老板委派接手刚刚离职同事的项目…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcjZyU2liaWNaS3FYR0xueU1BOGI4NjJraE1XWW1CQ2ZXUUc4SVMwYWFndVdlVWlhdmd1d3pZVEZBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="41"><li>当他们要求我测试所有应用功能时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljQW9hQnRiZXdNUlI0ZkpoelAzSkFteGs0RHFneWtXdVRad3RQWU8yRWVXZXhsV3JqWWliWnNTZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="42"><li>准备下班的时候,测试又提 bug 过來了…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRjhIZ2w4R1U5eUFpYXlsWXc4S1AzdzR6d1lqSDVLV09seWlhekVTM3p5VTFJQXJSSDFYRVp3VlEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="43"><li>使用新框架却忘记阅读文档</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWlja2lhYUttUFN0eklBY2V0UjkxeXpNR2hlYkthdzNPaG5sc1FickgwamZUZjVZNzA0eThRcVpmdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="44"><li>测试实习生的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljWkNzYlV6MU1HSWhVNUE2VHlHZURESkZkTnBxZXpib2FtT1NKZGNvSll1NFI3QnlUWUN3TUJnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="45"><li>网络延迟的危害…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcDQyaWJXWEliT2RpYU5yRnd5eFQxcVpYVHBVU1J1Q25pY1lEU3lHVWRDUklYRVF0OVkzeWdGUmlhdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="46"><li>测试刚写完的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSFhtWHh6MVZEWVhmM0ZnUjZ4WnFDWk51dkJaaWJScjAwSjBoaWNiUHhLa2xzaWFOWHZ5dWNkdjl3LzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="47"><li>delete 时，忘记加 where 条件了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRUtqM0tIS0dzbTllNDR0ZEowemxvWFE5QmljMkh4MVo5cFdVY0JmUUtaMFN1NVlKaWI3UEZhY2cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="48"><li>轻量级架构遇到重量级需求</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSWg5d0J1d0s5SGU3VFNEeUVhQVE0VUhod3JpYkJPWXdHRFpZdnF1WUJ6MlVVWVNPZVA4Tk9Fdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="49"><li>当我以为我修复了一个 Bug</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSGozaE5vT3I2MHhQZFRudFphdnJZWFdvblhyWlV5b2ljUnZ2Tm4zOWVGam1oSncwT2IwTlNlUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="50"><li>当我看实习生编码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljQ0t0Y2g5MDIxTUc4aWM4dmtxU2dzVmhCR2Vsa211emppY1Y2R2JadzV5aWFRbmtOSVB5d1dYcE9BLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="51"><li>首次在 IE 中测试我的网站</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSmlic0tuVUMzbjV4WXJtWlFtdFphalgzaWJ4MThXWkZtWkxGQzZlajF0dWJNQmRyUlU4Rnd0NUEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="52"><li>当我第一次测试我的代码时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaGpNVzduUFFvd2RoU1Z0VjZ1UXYxQ0h6WFZBaWEwSnhsc21oNGZTUmNISTVETEZFQXR3Z00wUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="53"><li>新手调试 CSS</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljTm8wWmNORzRmSmU3NHBod2lhcTRIQjFFbkZzaWNEbzNUd3J0SXVKZGcySGNLV3BDSEhrYmJpY29BLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="54"><li>提前交付客户要求</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVjZYdFB5VjFxNTY3QzBrbVg0SDlzWGFwZ05UcVd2RFF2aWMzV05aTnFRSzJuYTFCNjF2TkhpY3cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="55"><li>我设计的接口 和 别人调用我的接口 （好疼）</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRnlzV2liZGtGZzZqQVRpYzRKZ3kzZGp1cDFTV3M5NVZWV3BpYVZVWFVUd2JlYU02TnZhbE1wSnNnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="56"><li>try-catch 在错误的地方</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljckxrd2tBUHQ4WkxmRTg2ZjByV1NWdGJpYzdpYWlickZTd1h3S3psajUyMWJjd29RWFNwUzhFSVRnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="57"><li>修改一个小 bug，却把服务器弄宕机了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljQlcxazZOQ3VzSlpvakdOUFlpYjM3NHdjRFVNR2NnWkR3N2tQejVjN0F1VkxYajUwWld6aWFQVXcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="58"><li>当我推错了分支</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljTm51Sm9yZ3A0TmliaWNoeFR0MXMxT0dGN0lLbkt4RHFXWEduT29HVDFvMkVIN2FseE12SFFpYXVBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="59"><li>工作中经常被打断</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljR1Q3Y2NnS2x4UzNqb3MwQ2hpY3o1ZU1QOG1Yek9tRWhBeXZNZDRFQmVkSjJjSXUzVmVVODA0Zy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="60"><li>高级开发人员作为一个团队进行编程时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRVNmVmdEdElJWGlhU2N3M1VFNGtiWks3NXNsVTZpYmlhdzdwckFQTXZUQ01uYmcwTDZ3WDBpYzJxdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="61"><li>能一个手指完成的绝不用两只手系列</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcWVZSjl4ZVAxeWlhdUo5NUl2YkZXQ1dCNHVwdGtIWEVqcG9XazlmMFQwYzhTdjNLS0NFUkVpY1EvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="62"><li>高级开发人员重构代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVUVUOUwwSmM5VmxvS2dEZXY5ekpsdmZlMHNocEdzbkZkUFZSaWFXSFpST1BnS2RhT0RpYzVuRmcvNjQw?x-oss-process=image/format,png"  alt="640"></p><p>没有了，过瘾不，忍住，不能笑哈</p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9qdTFEenFYOGlhT21VYkp3TThpYVNmVWV4cG9QTkRlZVRrZzBGc0NqbWVKSEdWMlR2cmljckgxOVdhekdhTTVSYTRremZqcm56T1NuRVl1aWJtaWJJc2REaWFhQS82NDA_d3hfZm10PWpwZWc?x-oss-process=image/format,png"  alt="640?wx_fmt=jpeg"></p><p><strong>‧**</strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong>**‧</strong>‧  END  <strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong>**‧</strong>‧**</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天给大家带来点快乐，程序员才能看懂嘿嘿&lt;br&gt;素材来源于知乎：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47066521&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuan
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Lanqiao/蓝桥杯省内模拟赛(C++组)20200418</title>
    <link href="https://salmooo.github.io/2020/04/18/Lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B(C++%E7%BB%84)20200418/"/>
    <id>https://salmooo.github.io/2020/04/18/Lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B(C++%E7%BB%84)20200418/</id>
    <published>2020-04-18T13:37:06.363Z</published>
    <updated>2020-04-18T15:28:15.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十一届蓝桥杯省模拟赛-试题-题解"><a href="#第十一届蓝桥杯省模拟赛-试题-题解" class="headerlink" title="第十一届蓝桥杯省模拟赛 试题+题解"></a>第十一届蓝桥杯省模拟赛 试题+题解</h1><blockquote><p>  大家好，我是Salmone。<br>本文是第十一届蓝桥杯省模拟赛的试题和题解，参加的是4.18日的晚上场，<br>​这次模拟做了2个多小时，后两题不太会写然后参考大神们的帖子摸出来，不知道过多少样例<br>[toc]</p></blockquote><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>在计算机存储中，12.5MB是多少字节？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。因为1MB = 1024KB,1KB = 1024B，所以12.5MB = 12.5 * 1024 * 1024 = 12800KB * 1024 = 13107200 B。所以答案为<code>13107200</code></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>一个包含有2019个结点的无向连通图，最少包含多少条边？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。一个n个结点的无相连通图最少需要N-1条边。需要注意这里是无向的。所以答案为<code>2018</code></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>由1对括号，可以组成一种合法括号序列：()。<br>由2对括号，可以组成两种合法括号序列：()()、(())。<br>由4对括号组成的合法括号序列一共有多少种？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。<br>这里深度为1的序列有一种为：<code>()()()()</code>,<br>深度为2的有7种:<code>(())()()</code>、<code>()(())()</code>、<code>()()(())</code>、<code>(()()())</code>、<code>(()())()</code>、<code>()(()())</code>、<code>(())(())</code>,<br>深度为3的有5种：<code>((()))()</code>、<code>()((()))</code>、<code>((())())</code>、<code>(()(()))</code>、<code>((()()))</code>,深度为4的有1种:<code>(((())))</code>，所以答案为<code>14</code>。</p><p>答案为<code>14</code></p><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>将LANQIAO中的字母重新排列，可以得到不同的单词，如LANQIAO、AAILNOQ等，注意这7个字母都要被用上，单词不一定有具体的英文意义。<br>请问，总共能排列如多少个不同的单词。</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。 7的字母的全排列，7个都要用上，即是A77/A22=7!/2!=( 7 * 6 * 5 *<br>4 * 3 * 2 * 1 ) / 2= 2520 (这里由于<code>A</code>有2个，所以除以A22, 知识点.重复元素的排列组合)</p><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>给定一个单词，请使用凯撒密码将这个单词加密。<br>凯撒密码是一种替换加密的技术，单词中的所有字母都在字母表上向后偏移3位后被替换成密文。即a变为d，b变为e，…，w变为z，x变为a，y变为b，z变为c。<br>例如，lanqiao会变成odqtldr。</p><p>输入格式</p><p>输入一行，包含一个单词，单词中只包含小写英文字母。</p><p>输出格式</p><p>输出一行，表示加密后的密文。</p><p>样例输入</p><p>lanqiao</p><p>样例输出</p><p>odqtldr</p><p>评测用例规模与约定</p><p>对于所有评测用例，单词中的字母个数不超过100。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>​        这题我们直接将读入的数据进行一个转化就好，每个字母向后移动3个，z移动后为c，即是循环移动。需要注意的是，题目中未说明是否会有空格，以及其他字符，所以这里保险起见，我们使用getline进行读取。然后这里同样的未说明是否只有小写字母，所以我们将大写字母的情况也列出来了，如果非字母，则不变。</p><p>完整的程序为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F; 对字母进行后移</span><br><span class="line">char solve(char ch)&#123;</span><br><span class="line">    if(int(ch) &lt;&#x3D; 122 &amp;&amp; int(ch) &gt;&#x3D; 97)&#123;</span><br><span class="line">        &#x2F;&#x2F; 小写字母时,97 - 122</span><br><span class="line">        return char(97 + ((int(ch) - 97 + 3) % 26));</span><br><span class="line">    &#125; else if(int(ch) &gt;&#x3D; 65 &amp;&amp; int(ch) &lt;&#x3D; 90)&#123;</span><br><span class="line">        &#x2F;&#x2F; 大写字母时,65 - 90</span><br><span class="line">        return char(65 + ((int(ch) - 97 + 3) % 26));</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F; 非字母直接返回</span><br><span class="line">        return ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    string str &#x3D; &quot;&quot;;</span><br><span class="line">    getline(cin,str);</span><br><span class="line">    int length &#x3D; str.length();</span><br><span class="line">    for(int i &#x3D; 0; i &lt; length; i++)&#123;</span><br><span class="line">        str[i] &#x3D; solve(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;str;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>给定三个整数 a, b, c，如果一个整数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，则这个数称为反倍数。<br>请问在 1 至 n 中有多少个反倍数。</p><p>输入格式</p><p>输入的第一行包含一个整数 n。<br>第二行包含三个整数 a, b, c，相邻两个数之间用一个空格分隔。</p><p>输出格式</p><p>输出一行包含一个整数，表示答案。</p><p>样例输入</p><p>30<br>2 3 6</p><p>样例输出</p><p>10</p><p>样例说明</p><p>以下这些数满足要求：1, 5, 7, 11, 13, 17, 19, 23, 25, 29。</p><p>评测用例规模与约定</p><p>对于 40% 的评测用例，1 &lt;= n &lt;= 10000。<br>对于 80% 的评测用例，1 &lt;= n &lt;= 100000。<br>对于所有评测用例，1 &lt;= n &lt;= 1000000，1 &lt;= a &lt;= n，1 &lt;= b &lt;= n，1 &lt;= c &lt;= n。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>​        本题就是求从1到n有多少个数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，那我们直接一个暴力遍历，<br>然后进行判断即可。需要主要的是，这里需要使用的是<code>i%a</code>来判断i能否整除a，而不是<code>a%i</code>。</p><p>完整的题解代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n,a,b,c;</span><br><span class="line">    &#x2F;&#x2F;读入n,a,b,c</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; ++i) &#123;</span><br><span class="line">        if(i%a !&#x3D; 0 &amp;&amp; i%b !&#x3D; 0 &amp;&amp; i%c !&#x3D; 0) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。即 a[2i]&lt;a[2i-1], a[2i+1]&gt;a[2i]。<br>小明想知道，长度为 m，每个数都是 1 到 n 之间的正整数的摆动序列一共有多少个。</p><p>输入格式</p><p>输入一行包含两个整数 m，n。</p><p>输出格式</p><p>输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。</p><p>样例输入</p><p>3 4</p><p>样例输出</p><p>14</p><p>样例说明</p><p>以下是符合要求的摆动序列：<br>2 1 2<br>2 1 3<br>2 1 4<br>3 1 2<br>3 1 3<br>3 1 4<br>3 2 3<br>3 2 4<br>4 1 2<br>4 1 3<br>4 1 4<br>4 2 3<br>4 2 4<br>4 3 4</p><p>评测用例规模与约定</p><p>对于 20% 的评测用例，1 &lt;= n, m &lt;= 5；<br>对于 50% 的评测用例，1 &lt;= n, m &lt;= 10；<br>对于 80% 的评测用例，1 &lt;= n, m &lt;= 100；<br>对于所有评测用例，1 &lt;= n, m &lt;= 1000。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>​        这题如果直接暴力求解的话，估计只能够过50%的数据，所以还是得使用dp来进行求解。<code>dp[i][j]</code>表示第i位数时，最大数为m时共有多少个。然后根据题目要求：如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。所以我们每次处理都需要判断i的奇偶，这里使用<code>i&amp;1</code>进行判断，这里使用他的原因在之前的另一篇博客中写了，有不懂的小伙伴可以去参考一下，地址为：<a href="https://blog.csdn.net/qq_43422111/article/details/105326623" target="_blank" rel="noopener">为什么同样的算法，你的程序却一直超时？ 算法竞赛你不得不知道的小技巧</a>。然后我们为边界赋值，这里赋值只有1位数的时，最大数的不同时，可能的种类，这里初始化为<code>dp[1][i] = n - i + 1;</code>。然后我们从</p><p>​        下面我们来详细的解释一下dp的过程。这里我们计算的时候先从第一行开始，为第一行进行一个初始化，初始化为下一行可以选择的值的数目，即当前所能组成的摆动数列的个数。我们初始化<code>dp[1][i] = n - i + 1;</code></p><p>第一行中，令 <code>d[1][j]</code>为：第1个数选择大于等于 j的数的方案总数。</p><p>从第二行开始：</p><p>​    奇数行中，令 <code>d[i][j]</code>为：第i个数选择大于等于j的数时的方案总数。<br>​    偶数行中，令 <code>d[i][j]</code>为：第i个数选择小于等于j的数时的方案总数。</p><p>即从第二行开始，如果行数为偶数行，那么我们当前可能的数目为：<code>dp[i][j] = (dp[i-1][j+1] + dp[i][j-1]) % 10000;</code>,如果为奇数行则：<code>dp[i][j] = (dp[i-1][j-1] + dp[i][j+1]) % 10000;</code>。</p><p>​    然后这样的话，如果我们总的长度为奇数的话，那么就是<code>dp[m][1]</code>,如果是偶数，则为<code>dp[m][n]</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int dp[1004][1004];</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; m为长度，n为数的范围</span><br><span class="line">    int m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dp[1][i] &#x3D; n - i + 1;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 2; i &lt;&#x3D; m; i++)</span><br><span class="line">        if(i &amp; 1)</span><br><span class="line">            for(int j &#x3D; n; j &gt;&#x3D; 1; j--)</span><br><span class="line">                dp[i][j] &#x3D; (dp[i-1][j-1] + dp[i][j+1]) % 10000;</span><br><span class="line">        else</span><br><span class="line">            for(int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">                dp[i][j] &#x3D; (dp[i-1][j+1] + dp[i][j-1]) % 10000;</span><br><span class="line"></span><br><span class="line">    int ans &#x3D; m &amp; 1 ? dp[m][1] : dp[m][n];</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。<br>例如，一个 4 行 5 列的螺旋矩阵如下：<br>1 2 3 4 5<br>14 15 16 17 6<br>13 20 19 18 7<br>12 11 10 9 8</p><p>输入格式</p><p>输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。<br>第二行包含两个整数 r, c，表示要求的行号和列号。</p><p>输出格式</p><p>输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。</p><p>样例输入</p><p>4 5<br>2 2</p><p>样例输出</p><p>15</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，2 &lt;= n, m &lt;= 20。<br>对于 70% 的评测用例，2 &lt;= n, m &lt;= 100。<br>对于所有评测用例，2 &lt;= n, m &lt;= 1000，1 &lt;= r &lt;= n，1 &lt;= c &lt;= m。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>​        这题我们可以直接模拟过程将这个螺旋矩阵构建出来，然后直接输出我们需要的那个位置的数即可。<br>在我们进行构建螺旋矩阵进行上下左右走的时候记得要加一个判断，即当前的位置是否已走过，判定一下边界情况。这个和之前的一个LeetCode很像，如果有不会模拟的，可以看看博主的那篇博客，写的很详细：<a href="https://blog.csdn.net/qq_43422111/article/details/105096715" target="_blank" rel="noopener">LeetCode 54. 螺旋矩阵 C++描述</a></p><p>完整题解代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; n为行数，m列数</span><br><span class="line">    &#x2F;&#x2F; r为输出的行，c为输出的列</span><br><span class="line">    int n, m,r, c;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;c;</span><br><span class="line">    int store[1005][1005];</span><br><span class="line">    &#x2F;&#x2F; 所有置为0</span><br><span class="line">    memset(store,0, sizeof(store));</span><br><span class="line">    &#x2F;&#x2F; 总数</span><br><span class="line">    int sum &#x3D; n * m;</span><br><span class="line">    int row &#x3D; 0, col &#x3D; 0, cnt &#x3D; 1;</span><br><span class="line">    store[row][col] &#x3D; 1;</span><br><span class="line">    while(cnt &lt; sum)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 向右走，直到走到头或者下一个已经走过</span><br><span class="line">        while(col + 1 &lt; m &amp;&amp; !store[row][col+1])</span><br><span class="line">            store[row][++col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向下走，直到走到头或者下一个已经走过</span><br><span class="line">        while(row + 1 &lt; n &amp;&amp; !store[row+1][col])</span><br><span class="line">            store[++row][col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向左走，直到走到头或者下一个已经走过</span><br><span class="line">        while(col - 1 &gt;&#x3D; 0 &amp;&amp; !store[row][col-1])</span><br><span class="line">            store[row][--col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向上走，直到走到头或者下一个已经走过</span><br><span class="line">        while(row - 1 &gt;&#x3D; 0 &amp;&amp; !store[row-1][col])</span><br><span class="line">            store[--row][col] &#x3D; ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;注意数组下标，因为从0开始，所以最后输出的行列号r-1和c-1哦</span><br><span class="line">    cout&lt;&lt;store[r-1][c-1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>小明和朋友们一起去郊外植树，他们带了一些在自己实验室精心研究出的小树苗。<br>小明和朋友们一共有 n 个人，他们经过精心挑选，在一块空地上每个人挑选了一个适合植树的位置，总共 n 个。他们准备把自己带的树苗都植下去。<br>然而，他们遇到了一个困难：有的树苗比较大，而有的位置挨太近，导致两棵树植下去后会撞在一起。<br>他们将树看成一个圆，圆心在他们找的位置上。如果两棵树对应的圆相交，这两棵树就不适合同时植下（相切不受影响），称为两棵树冲突。<br>小明和朋友们决定先合计合计，只将其中的一部分树植下去，保证没有互相冲突的树。他们同时希望这些树所能覆盖的面积和（圆面积和）最大。</p><p>输入格式</p><p>输入的第一行包含一个整数 n ，表示人数，即准备植树的位置数。<br>接下来 n 行，每行三个整数 x, y, r，表示一棵树在空地上的横、纵坐标和半径。</p><p>输出格式</p><p>输出一行包含一个整数，表示在不冲突下可以植树的面积和。由于每棵树的面积都是圆周率的整数倍，请输出答案除以圆周率后的值（应当是一个整数）。</p><p>样例输入</p><p>6<br>1 1 2<br>1 4 2<br>1 7 2<br>4 1 2<br>4 4 2<br>4 7 2</p><p>样例输出</p><p>12</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，1 &lt;= n &lt;= 10；<br>对于 60% 的评测用例，1 &lt;= n &lt;= 20；<br>对于所有评测用例，1 &lt;= n &lt;= 30，0 &lt;= x, y &lt;= 1000，1 &lt;= r &lt;= 1000。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">class node&#123;</span><br><span class="line">    public:</span><br><span class="line">        int a, b, c;</span><br><span class="line">        node(int a &#x3D; 0, int b &#x3D; 0, int c &#x3D; 0):a(a), b(b), c(c)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">node arr[35];</span><br><span class="line">&#x2F;&#x2F;圆心距离与两半径相比判断是否相交，相切不受影响</span><br><span class="line">bool check(int i, int j)&#123;</span><br><span class="line">    return (arr[i].a - arr[j].a) * (arr[i].a - arr[j].a) + (arr[i].b - arr[j].b) * (arr[i].b - arr[j].b) &gt;&#x3D; (arr[i].c + arr[j].c) * (arr[i].c + arr[j].c);</span><br><span class="line">&#125;</span><br><span class="line">signed main(void)&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    &#x2F;&#x2F;初始化节点</span><br><span class="line">    for(int i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">        int a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        arr[i] &#x3D; node(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    int ans &#x3D; -1;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; (1 &lt;&lt; n); i ++)&#123;</span><br><span class="line">     &#x2F;&#x2F;现在检查这种方案是否符合规则</span><br><span class="line">        vector&lt;int&gt; mark(n);</span><br><span class="line">        int t &#x3D; i, p &#x3D; 0;</span><br><span class="line">        while(t)&#123;</span><br><span class="line">            mark[p ++] &#x3D; (t &amp; 1);</span><br><span class="line">            t &gt;&gt;&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        bool isOK &#x3D; true;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">        &#x2F;&#x2F;首先遍历所有的树，选出第一棵种下的树，然后就递归枚举下一棵，判断和已种的是否冲突，同时累加已种面积</span><br><span class="line">            if(!mark[i]) continue;</span><br><span class="line">            for(int j &#x3D; i + 1; j &lt; n; j ++)&#123;</span><br><span class="line">                if(!mark[j]) continue;</span><br><span class="line">                if(!check(i, j))&#123;</span><br><span class="line">                    isOK &#x3D; false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(isOK &#x3D;&#x3D; false) break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 计算所有种下的树的占地面积</span><br><span class="line">        if(isOK)&#123;</span><br><span class="line">            int sum &#x3D; 0;</span><br><span class="line">            for(int i &#x3D; 0; i &lt; n; i++)&#123;</span><br><span class="line">                if(mark[i])&#123;</span><br><span class="line">                    sum +&#x3D; arr[i].c * arr[i].c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans &#x3D; max(ans, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>2015年，全中国实现了户户通电。作为一名电力建设者，小明正在帮助一带一路上的国家通电。<br>这一次，小明要帮助 n 个村庄通电，其中 1 号村庄正好可以建立一个发电站，所发的电足够所有村庄使用。<br>现在，这 n 个村庄之间都没有电线相连，小明主要要做的是架设电线连接这些村庄，使得所有村庄都直接或间接的与发电站相通。<br>小明测量了所有村庄的位置（坐标）和高度，如果要连接两个村庄，小明需要花费两个村庄之间的坐标距离加上高度差的平方，形式化描述为坐标为 (x_1, y_1) 高度为 h_1 的村庄与坐标为 (x_2, y_2) 高度为 h_2 的村庄之间连接的费用为<br>sqrt((x_1-x_2)<em>(x_1-x_2)+(y_1-y_2)</em>(y_1-y_2))+(h_1-h_2)*(h_1-h_2)。<br>在上式中 sqrt 表示取括号内的平方根。请注意括号的位置，高度的计算方式与横纵坐标的计算方式不同。<br>由于经费有限，请帮助小明计算他至少要花费多少费用才能使这 n 个村庄都通电。</p><p>输入格式</p><p>输入的第一行包含一个整数 n ，表示村庄的数量。<br>接下来 n 行，每个三个整数 x, y, h，分别表示一个村庄的横、纵坐标和高度，其中第一个村庄可以建立发电站。</p><p>输出格式</p><p>输出一行，包含一个实数，四舍五入保留 2 位小数，表示答案。</p><p>样例输入</p><p>4<br>1 1 3<br>9 9 7<br>8 8 6<br>4 5 4</p><p>样例输出</p><p>17.41</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，1 &lt;= n &lt;= 10；<br>对于 60% 的评测用例，1 &lt;= n &lt;= 100；<br>对于所有评测用例，1 &lt;= n &lt;= 1000，0 &lt;= x, y, h &lt;= 10000。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>这题可以使用prim算法进行求解，别忘了最后的输出的2位小数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 1004;</span><br><span class="line">const double MAX &#x3D; 0x7f7f7f7f;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">double a[maxn][maxn],d[maxn], ans;</span><br><span class="line">bool visit[maxn];</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    int h;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line">point p[maxn];</span><br><span class="line"></span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j &#x3D; 0; j &lt;&#x3D; n; j++)</span><br><span class="line">            a[i][j] &#x3D; MAX;</span><br><span class="line">        d[i] &#x3D; MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;最小生成树模版题,这用了Prim.</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    memset(visit, 0, sizeof(visit));</span><br><span class="line">    d[1] &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int x &#x3D; 0;</span><br><span class="line">        for(int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            if(!visit[j] &amp;&amp; (x &#x3D;&#x3D; 0 || d[j] &lt; d[x])) x &#x3D; j;</span><br><span class="line">        visit[x] &#x3D; 1;</span><br><span class="line">        for(int y &#x3D; 1; y &lt;&#x3D; n; y++)</span><br><span class="line">            if(!visit[y]) d[y] &#x3D; min(d[y], a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    init();</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        scanf(&quot;%d %d %d&quot;, &amp;p[i].x, &amp;p[i].y, &amp;p[i].h);</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)</span><br><span class="line">        for(int j &#x3D; i + 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            double temp &#x3D; sqrt( (p[i].x - p[j].x) * (p[i].x - p[j].x) + (p[i].y-p[j].y) * (p[i].y-p[j].y)) + (p[i].h-p[j].h) * (p[i].h-p[j].h);</span><br><span class="line">            a[i][j] &#x3D; a[j][i] &#x3D; min(a[i][j], temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    Prim();</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 2; i &lt;&#x3D; n; i++) ans +&#x3D; d[i];</span><br><span class="line">    &#x2F;&#x2F; 输出2位小数</span><br><span class="line">    printf(&quot;%.2f&quot;, ans);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_43422111/article/details/105489080#_437" target="_blank" rel="noopener">参考博客https://blog.csdn.net/qq_43422111/article/details/105489080#_437</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十一届蓝桥杯省模拟赛-试题-题解&quot;&gt;&lt;a href=&quot;#第十一届蓝桥杯省模拟赛-试题-题解&quot; class=&quot;headerlink&quot; title=&quot;第十一届蓝桥杯省模拟赛 试题+题解&quot;&gt;&lt;/a&gt;第十一届蓝桥杯省模拟赛 试题+题解&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git入门/Learngit</title>
    <link href="https://salmooo.github.io/2020/04/17/Git%E5%85%A5%E9%97%A8/Learngit/"/>
    <id>https://salmooo.github.io/2020/04/17/Git%E5%85%A5%E9%97%A8/Learngit/</id>
    <published>2020-04-17T05:08:58.315Z</published>
    <updated>2020-04-17T05:16:44.273Z</updated>
    
    <content type="html"><![CDATA[<p>今日温故了一下git指令，觉得不错的git学习资源分享如下，</p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的git教程</a><br>廖大大的教程真的简明易懂，还配上B站视频，很nice~</p><p><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">菜鸟git教程</a><br>菜鸟教程和廖雪峰教程差不多，例子更多一点。</p><p><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener">在线沙盒学习git</a></p><p>好啦，再分享下超级无敌全的git命令：<br>可自行到该地址自取哈。<br><a href="https://gitee.com/liaoxuefeng/learngit/blob/master/Git%E6%9C%80%E8%AF%A6%E7%BB%86%E5%91%BD%E4%BB%A4-%E5%85%B168%E6%9D%A1#" target="_blank" rel="noopener">gitee地址</a></p><p>下面也列举一波~<br>1）git help <command> # 显示command的help</p><p>2）git show # 显示某次提交的内容 git show $id</p><p>3）git co – <file> # 抛弃工作区修改</p><p>4）git co . # 抛弃工作区修改</p><p>5）git add <file> # 将工作文件修改提交到本地暂存区</p><p>6）git add . # 将所有修改过的工作文件提交暂存区</p><p>7）git rm <file> # 从版本库中删除文件</p><p>8）git rm <file> –cached # 从版本库中删除文件，但不删除文件</p><p>9）git reset <file> # 从暂存区恢复到工作文件</p><p>10）git reset – . # 从暂存区恢复到工作文件</p><p>11）git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</p><p>12）git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am “some comments”</p><p>13）git ci –amend # 修改最后一次提交记录</p><p>14）git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</p><p>15）git revert HEAD # 恢复最后一次提交的状态</p><p>16）git diff <file> # 比较当前文件和暂存区文件差异 git diff</p><p>17）git diff <id1><id1><id2> # 比较两次提交之间的差异</p><p>18）git diff <branch1>..<branch2> # 在两个分支之间比较</p><p>19）git diff –staged # 比较暂存区和版本库差异</p><p>20）git diff –stat # 仅仅比较统计信息</p><p>21）git log git log <file> # 查看该文件每次提交记录</p><p>22）git log -p <file> # 查看每次详细修改内容的diff</p><p>23）git log -p -2 # 查看最近两次详细修改内容的diff</p><p>24）git log –stat #查看提交统计信息</p><p>25）git br -r # 查看远程分支</p><p>26）git br <new_branch> # 创建新的分支</p><p>27）git br -v # 查看各个分支最后提交信息</p><p>28）git br –merged # 查看已经被合并到当前分支的分支</p><p>29）git br –no-merged # 查看尚未被合并到当前分支的分支</p><p>30）git co <branch> # 切换到某个分支</p><p>31）git co -b <new_branch> # 创建新的分支，并且切换过去</p><p>32）git co -b <new_branch> <branch> # 基于branch创建新的new_branch</p><p>33）git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</p><p>34）git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支</p><p>35）git br -d <branch> # 删除某个分支</p><p>36）git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</p><p>37）git merge <branch> # 将branch分支合并到当前分支</p><p>38）git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交</p><p>39）git diff &gt; ../sync.patch # 生成补丁</p><p>40）git apply ../sync.patch # 打补丁</p><p>41）git apply –check ../sync.patch #测试补丁能否成功</p><p>42）git stash # 暂存</p><p>43）git stash list # 列出所有stash</p><p>44）git stash apply # 恢复暂存的内容</p><p>45）git stash drop # 删除暂存区</p><p>46）git pull # 抓取远程仓库所有分支更新并合并到本地</p><p>47）git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</p><p>48）git fetch origin # 抓取远程仓库更新</p><p>49）git merge origin/master # 将远程主分支合并到本地当前分支</p><p>50）git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支</p><p>51）git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上</p><p>52）git push # push所有分支</p><p>53）git push origin master # 将本地主分支推到远程主分支</p><p>54）git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</p><p>55）git push origin <local_branch> # 创建远程分支， origin是远程仓库名</p><p>56）git push origin <local_branch>:<remote_branch> # 创建远程分支</p><p>57）git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支</p><p>58）git remote -v # 查看远程服务器地址和仓库名称</p><p>59）git remote show origin # 查看远程服务器仓库状态</p><p>60）git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</p><p>61）git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库</p><p>62）git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</p><p>63）scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</p><p>64）mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库</p><p>65）git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</p><p>66) git push -u origin master # 客户端首次提交</p><p>67) git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</p><p>68) git remote set-head origin master # 设置远程仓库的HEAD指向master分支</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日温故了一下git指令，觉得不错的git学习资源分享如下，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的git教程
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown入门</title>
    <link href="https://salmooo.github.io/2020/04/15/Markdown%E5%85%A5%E9%97%A8/markdown%E5%85%A5%E9%97%A8/"/>
    <id>https://salmooo.github.io/2020/04/15/Markdown%E5%85%A5%E9%97%A8/markdown%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-14T21:12:49.000Z</published>
    <updated>2020-04-15T03:02:27.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最全的Markdown语法汇总在这里"><a href="#最全的Markdown语法汇总在这里" class="headerlink" title="最全的Markdown语法汇总在这里"></a>最全的Markdown语法汇总在这里</h1><p>2019.03.03 00:25<br>                        3019浏览</p><!-- 手记详情 --><h1 id="Markdown-语法汇总精要"><a href="#Markdown-语法汇总精要" class="headerlink" title="Markdown 语法汇总精要"></a>Markdown 语法汇总精要</h1><p>标签： Markdown</p><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 _斜体_，这是 <strong>粗体</strong>。</p><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br><span class="line">&#96;&#96;&#96;预览</span><br><span class="line"></span><br><span class="line">你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</span><br><span class="line"></span><br><span class="line">### 3. 外链接</span><br><span class="line"></span><br><span class="line">使用 [描述](链接地址) 为文字增加外链接。</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;prism</span><br><span class="line">这是去往 [本人github](https:&#x2F;&#x2F;github.com&#x2F;moweiyang0214) 的链接。</span><br></pre></td></tr></table></figure><p>效果：<br>这是去往 <a href="https://github.com/moweiyang0214" target="_blank" rel="noopener">本人github</a> 的链接。</p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表项 一</span><br><span class="line">- 无序列表项 二</span><br><span class="line">- 无序列表项 三</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br><span class="line">&#96;&#96;&#96;预览</span><br><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">1.  有序列表项 一</span><br><span class="line">2.  有序列表项 二</span><br><span class="line">3.  有序列表项 三</span><br><span class="line"></span><br><span class="line">### 6. 文字引用</span><br><span class="line"></span><br><span class="line">使用 &gt; 表示文字引用。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">&gt; 野火烧不尽，春风吹又生。</span><br><span class="line"></span><br><span class="line">### 7. 行内代码块</span><br><span class="line"></span><br><span class="line">使用 &#96;代码&#96; 表示行内代码块。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>让我们聊聊 <code>html</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line">让我们聊聊 &#96;html&#96;。</span><br><span class="line"></span><br><span class="line">### 8.  代码块</span><br><span class="line"></span><br><span class="line">使用 四个缩进空格 表示代码块。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>这是一个代码块，此行左侧有四个不可见的空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line">这是一个代码块，此行左侧有四个不可见的空格。</span><br><span class="line"></span><br><span class="line">### 9.  插入图像</span><br><span class="line"></span><br><span class="line">使用 ![描述](图片链接地址) 插入图像。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://avatars3.githubusercontent.com/u/10223537?s=460&v=4"  alt="我的头像"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：![我的头像](data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB&#x2F;AAffA0nNPuCLAAAAAElFTkSuQmCC)</span><br><span class="line"></span><br><span class="line">## Markdown 高阶语法</span><br><span class="line"></span><br><span class="line">### 1. 内容目录</span><br><span class="line"></span><br><span class="line">在段落中填写 &#96;[TOC]&#96; 以显示全文内容的目录结构。</span><br><span class="line"></span><br><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line">### 2. 标签分类</span><br><span class="line"></span><br><span class="line">在编辑区任意行的列首位置输入以下代码给文稿标签：</span><br><span class="line"></span><br><span class="line">标签： 数学 英语 Markdown</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">Tags： 数学 英语 Markdown</span><br><span class="line"></span><br><span class="line">### 3. 删除线</span><br><span class="line"></span><br><span class="line">使用 ~~ 表示删除线。</span><br><span class="line"></span><br><span class="line">&lt;s&gt;这是一段错误的文本。&lt;&#x2F;s&gt;</span><br><span class="line"></span><br><span class="line">### 4. 注脚</span><br><span class="line"></span><br><span class="line">使用 [^keyword] 表示注脚。</span><br><span class="line"></span><br><span class="line">这是一个注脚&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;[1](http:&#x2F;&#x2F;www.imooc.com&#x2F;article&#x2F;280979?block_id&#x3D;tuijian_wz#fn1)&lt;&#x2F;sup&gt;的样例。</span><br><span class="line"></span><br><span class="line">这是第二个注脚&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;[2](http:&#x2F;&#x2F;www.imooc.com&#x2F;article&#x2F;280979?block_id&#x3D;tuijian_wz#fn2)&lt;&#x2F;sup&gt;的样例。</span><br><span class="line"></span><br><span class="line">### 5. LaTeX 公式</span><br><span class="line"></span><br><span class="line">$ 表示行内公式：</span><br><span class="line"></span><br><span class="line">质能守恒方程可以用一个很简洁的方程式 E&#x3D;mc2E&#x3D;mc^2E&#x3D;mc2 来表达。</span><br><span class="line"></span><br><span class="line">$$ 表示整行公式：</span><br><span class="line"></span><br><span class="line">∑i&#x3D;1nai&#x3D;0\sum_&#123;i&#x3D;1&#125;^n a_i&#x3D;0i&#x3D;1∑n​ai​&#x3D;0</span><br><span class="line"></span><br><span class="line">f(x1,xx,…,xn)&#x3D;x12+x22+⋯+xn2f(x_1,x_x,\ldots,x_n) &#x3D; x_1^2 + x_2^2 + \cdots + x_n^2 f(x1​,xx​,…,xn​)&#x3D;x12​+x22​+⋯+xn2​</span><br><span class="line"></span><br><span class="line">∑k&#x3D;0j−1γ^kjzk\sum^&#123;j-1&#125;_&#123;k&#x3D;0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;k&#x3D;0∑j−1​γ​kj​zk​</span><br><span class="line"></span><br><span class="line">访问 [MathJax](http:&#x2F;&#x2F;meta.math.stackexchange.com&#x2F;questions&#x2F;5020&#x2F;mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。</span><br><span class="line"></span><br><span class="line">### 6. 加强的代码块</span><br><span class="line"></span><br><span class="line">支持四十一种编程语言的语法高亮的显示，行号显示。</span><br><span class="line"></span><br><span class="line">非代码示例：</span><br></pre></td></tr></table></figure><p>$ sudo apt-get install vim-gnome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Python 示例：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;prism</span><br><span class="line">@requires_authorization</span><br><span class="line">def somefunc(param1&#x3D;&#39;&#39;, param2&#x3D;0):</span><br><span class="line">    &#39;&#39;&#39;A docstring&#39;&#39;&#39;</span><br><span class="line">    if param1 &gt; param2: # interesting</span><br><span class="line">        print &#39;Greater&#39;</span><br><span class="line">    return (param2 - param1 + 1) or None</span><br><span class="line"></span><br><span class="line">class SomeClass:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; message &#x3D; &#39;&#39;&#39;interpreter</span><br><span class="line">... prompt&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><p>JavaScript 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* nth element in the fibonacci series.</span><br><span class="line">* @param n &gt;&#x3D; 0</span><br><span class="line">* @return the nth element, &gt;&#x3D; 0.</span><br><span class="line">*&#x2F;</span><br><span class="line">function fib(n) &#123;</span><br><span class="line">  var a &#x3D; 1, b &#x3D; 1;</span><br><span class="line">  var tmp;</span><br><span class="line">  while (--n &gt;&#x3D; 0) &#123;</span><br><span class="line">    tmp &#x3D; a;</span><br><span class="line">    a +&#x3D; b;</span><br><span class="line">    b &#x3D; tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.write(fib(10));</span><br></pre></td></tr></table></figure><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">    section 项目确定</span><br><span class="line">        需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">        可行性报告     :after a1, 5d</span><br><span class="line">        概念验证       : 5d</span><br><span class="line">    section 项目实施</span><br><span class="line">        概要设计      :2016-07-05  , 5d</span><br><span class="line">        详细设计      :2016-07-08, 10d</span><br><span class="line">        编码          :2016-07-15, 10d</span><br><span class="line">        测试          :2016-07-22, 5d</span><br><span class="line">    section 发布验收</span><br><span class="line">        发布: 2d</span><br><span class="line">        验收: 3d</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">    B --&gt; C&#123;Decision&#125;</span><br><span class="line">    C --&gt;|One| D[Result one]</span><br><span class="line">    C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    loop every minute</span><br><span class="line">        John--&gt;Alice: Great!</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl>    <dt>名词 1</dt>    <dd>        定义 1（左侧有一个可见的冒号和四个不可见的空格）    </dd>    <dt>代码块 2</dt>    <dd>        这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）<pre><code>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块（左侧有八个不可见的空格）</span><br></pre></td></tr></table></figure>&lt;/dd&gt;</code></pre></dl><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan&#x3D;&quot;2&quot;&gt;值班人员&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期一&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期二&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期三&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;李强&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;张明&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;王平&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值班人员</th><th>星期一</th><th>星期二</th><th>星期三</th></tr></thead><tbody><tr><td>李强</td><td>张明</td><td>王平</td><td></td></tr></tbody></table><h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon-weibo&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>即显示微博的图标： __</p><p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon-renren&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>即显示人人的图标： __</p><p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- [ ] **Cmd Markdown 开发**</span><br><span class="line">    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</span><br><span class="line">    - [ ] 支持以 PDF 格式导出文稿</span><br><span class="line">    - [x] 新增Todo列表功能 [语法参考](https:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;1375-task-lists-in-gfm-issues-pulls-comments)</span><br><span class="line">    - [x] 改进 LaTex 功能</span><br><span class="line">        - [x] 修复 LaTex 公式渲染问题</span><br><span class="line">        - [x] 新增 LaTex 公式编号功能 [语法参考](http:&#x2F;&#x2F;docs.mathjax.org&#x2F;en&#x2F;latest&#x2F;tex.html#tex-eq-numbers)</span><br><span class="line">- [ ] **七月旅行准备**</span><br><span class="line">    - [ ] 准备邮轮上需要携带的物品</span><br><span class="line">    - [ ] 浏览日本免税店的物品</span><br><span class="line">    - [x] 购买蓝宝石公主号七月一日的船票</span><br></pre></td></tr></table></figure><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><p><strong>Cmd Markdown 开发</strong></p><ul><li><p>改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</p></li><li><p>支持以 PDF 格式导出文稿</p></li><li><p>新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></p></li><li><p>改进 LaTex 功能</p><ul><li>修复 LaTex 公式渲染问题</li><li>新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li><li><p><strong>七月旅行准备</strong></p><ul><li>准备邮轮上需要携带的物品</li><li>浏览日本免税店的物品</li><li>购买蓝宝石公主号七月一日的船票</li></ul></li></ul><hr><ol><li><p>参考链接： <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a> 。 <a href="http://www.imooc.com/article/280979?block_id=tuijian_wz#fnref1" target="_blank" rel="noopener">↩︎</a></p></li><li><p>这是另一个 <em>注脚</em> 的 <strong>文本</strong>。 <a href="http://www.imooc.com/article/280979?block_id=tuijian_wz#fnref2" target="_blank" rel="noopener">↩︎</a></p></li></ol><p>转载于<a href="http://www.imooc.com/article/280979?block_id=tuijian_wz" target="_blank" rel="noopener">慕课</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最全的Markdown语法汇总在这里&quot;&gt;&lt;a href=&quot;#最全的Markdown语法汇总在这里&quot; class=&quot;headerlink&quot; title=&quot;最全的Markdown语法汇总在这里&quot;&gt;&lt;/a&gt;最全的Markdown语法汇总在这里&lt;/h1&gt;&lt;p&gt;2019.0
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://salmooo.github.io/2020/04/14/hello-world/"/>
    <id>https://salmooo.github.io/2020/04/14/hello-world/</id>
    <published>2020-04-14T11:07:19.021Z</published>
    <updated>2020-04-14T11:07:19.021Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
