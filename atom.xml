<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Salmooo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://salmooo.github.io/"/>
  <updated>2020-04-18T15:28:15.252Z</updated>
  <id>https://salmooo.github.io/</id>
  
  <author>
    <name>Salmone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lanqiao/蓝桥杯省内模拟赛(C++组)20200418</title>
    <link href="https://salmooo.github.io/2020/04/18/Lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B(C++%E7%BB%84)20200418/"/>
    <id>https://salmooo.github.io/2020/04/18/Lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B(C++%E7%BB%84)20200418/</id>
    <published>2020-04-18T13:37:06.363Z</published>
    <updated>2020-04-18T15:28:15.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十一届蓝桥杯省模拟赛-试题-题解"><a href="#第十一届蓝桥杯省模拟赛-试题-题解" class="headerlink" title="第十一届蓝桥杯省模拟赛 试题+题解"></a>第十一届蓝桥杯省模拟赛 试题+题解</h1><blockquote><p>  大家好，我是Salmone。<br>本文是第十一届蓝桥杯省模拟赛的试题和题解，参加的是4.18日的晚上场，<br>​这次模拟做了2个多小时，后两题不太会写然后参考大神们的帖子摸出来，不知道过多少样例<br>[toc]</p></blockquote><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>在计算机存储中，12.5MB是多少字节？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。因为1MB = 1024KB,1KB = 1024B，所以12.5MB = 12.5 * 1024 * 1024 = 12800KB * 1024 = 13107200 B。所以答案为<code>13107200</code></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>一个包含有2019个结点的无向连通图，最少包含多少条边？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。一个n个结点的无相连通图最少需要N-1条边。需要注意这里是无向的。所以答案为<code>2018</code></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>由1对括号，可以组成一种合法括号序列：()。<br>由2对括号，可以组成两种合法括号序列：()()、(())。<br>由4对括号组成的合法括号序列一共有多少种？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。<br>这里深度为1的序列有一种为：<code>()()()()</code>,<br>深度为2的有7种:<code>(())()()</code>、<code>()(())()</code>、<code>()()(())</code>、<code>(()()())</code>、<code>(()())()</code>、<code>()(()())</code>、<code>(())(())</code>,<br>深度为3的有5种：<code>((()))()</code>、<code>()((()))</code>、<code>((())())</code>、<code>(()(()))</code>、<code>((()()))</code>,深度为4的有1种:<code>(((())))</code>，所以答案为<code>14</code>。</p><p>答案为<code>14</code></p><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>将LANQIAO中的字母重新排列，可以得到不同的单词，如LANQIAO、AAILNOQ等，注意这7个字母都要被用上，单词不一定有具体的英文意义。<br>请问，总共能排列如多少个不同的单词。</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。 7的字母的全排列，7个都要用上，即是A77/A22=7!/2!=( 7 * 6 * 5 *<br>4 * 3 * 2 * 1 ) / 2= 2520 (这里由于<code>A</code>有2个，所以除以A22, 知识点.重复元素的排列组合)</p><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>给定一个单词，请使用凯撒密码将这个单词加密。<br>凯撒密码是一种替换加密的技术，单词中的所有字母都在字母表上向后偏移3位后被替换成密文。即a变为d，b变为e，…，w变为z，x变为a，y变为b，z变为c。<br>例如，lanqiao会变成odqtldr。</p><p>输入格式</p><p>输入一行，包含一个单词，单词中只包含小写英文字母。</p><p>输出格式</p><p>输出一行，表示加密后的密文。</p><p>样例输入</p><p>lanqiao</p><p>样例输出</p><p>odqtldr</p><p>评测用例规模与约定</p><p>对于所有评测用例，单词中的字母个数不超过100。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>​        这题我们直接将读入的数据进行一个转化就好，每个字母向后移动3个，z移动后为c，即是循环移动。需要注意的是，题目中未说明是否会有空格，以及其他字符，所以这里保险起见，我们使用getline进行读取。然后这里同样的未说明是否只有小写字母，所以我们将大写字母的情况也列出来了，如果非字母，则不变。</p><p>完整的程序为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F; 对字母进行后移</span><br><span class="line">char solve(char ch)&#123;</span><br><span class="line">    if(int(ch) &lt;&#x3D; 122 &amp;&amp; int(ch) &gt;&#x3D; 97)&#123;</span><br><span class="line">        &#x2F;&#x2F; 小写字母时,97 - 122</span><br><span class="line">        return char(97 + ((int(ch) - 97 + 3) % 26));</span><br><span class="line">    &#125; else if(int(ch) &gt;&#x3D; 65 &amp;&amp; int(ch) &lt;&#x3D; 90)&#123;</span><br><span class="line">        &#x2F;&#x2F; 大写字母时,65 - 90</span><br><span class="line">        return char(65 + ((int(ch) - 97 + 3) % 26));</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F; 非字母直接返回</span><br><span class="line">        return ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    string str &#x3D; &quot;&quot;;</span><br><span class="line">    getline(cin,str);</span><br><span class="line">    int length &#x3D; str.length();</span><br><span class="line">    for(int i &#x3D; 0; i &lt; length; i++)&#123;</span><br><span class="line">        str[i] &#x3D; solve(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;str;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>给定三个整数 a, b, c，如果一个整数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，则这个数称为反倍数。<br>请问在 1 至 n 中有多少个反倍数。</p><p>输入格式</p><p>输入的第一行包含一个整数 n。<br>第二行包含三个整数 a, b, c，相邻两个数之间用一个空格分隔。</p><p>输出格式</p><p>输出一行包含一个整数，表示答案。</p><p>样例输入</p><p>30<br>2 3 6</p><p>样例输出</p><p>10</p><p>样例说明</p><p>以下这些数满足要求：1, 5, 7, 11, 13, 17, 19, 23, 25, 29。</p><p>评测用例规模与约定</p><p>对于 40% 的评测用例，1 &lt;= n &lt;= 10000。<br>对于 80% 的评测用例，1 &lt;= n &lt;= 100000。<br>对于所有评测用例，1 &lt;= n &lt;= 1000000，1 &lt;= a &lt;= n，1 &lt;= b &lt;= n，1 &lt;= c &lt;= n。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>​        本题就是求从1到n有多少个数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，那我们直接一个暴力遍历，<br>然后进行判断即可。需要主要的是，这里需要使用的是<code>i%a</code>来判断i能否整除a，而不是<code>a%i</code>。</p><p>完整的题解代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n,a,b,c;</span><br><span class="line">    &#x2F;&#x2F;读入n,a,b,c</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; ++i) &#123;</span><br><span class="line">        if(i%a !&#x3D; 0 &amp;&amp; i%b !&#x3D; 0 &amp;&amp; i%c !&#x3D; 0) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。即 a[2i]&lt;a[2i-1], a[2i+1]&gt;a[2i]。<br>小明想知道，长度为 m，每个数都是 1 到 n 之间的正整数的摆动序列一共有多少个。</p><p>输入格式</p><p>输入一行包含两个整数 m，n。</p><p>输出格式</p><p>输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。</p><p>样例输入</p><p>3 4</p><p>样例输出</p><p>14</p><p>样例说明</p><p>以下是符合要求的摆动序列：<br>2 1 2<br>2 1 3<br>2 1 4<br>3 1 2<br>3 1 3<br>3 1 4<br>3 2 3<br>3 2 4<br>4 1 2<br>4 1 3<br>4 1 4<br>4 2 3<br>4 2 4<br>4 3 4</p><p>评测用例规模与约定</p><p>对于 20% 的评测用例，1 &lt;= n, m &lt;= 5；<br>对于 50% 的评测用例，1 &lt;= n, m &lt;= 10；<br>对于 80% 的评测用例，1 &lt;= n, m &lt;= 100；<br>对于所有评测用例，1 &lt;= n, m &lt;= 1000。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>​        这题如果直接暴力求解的话，估计只能够过50%的数据，所以还是得使用dp来进行求解。<code>dp[i][j]</code>表示第i位数时，最大数为m时共有多少个。然后根据题目要求：如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。所以我们每次处理都需要判断i的奇偶，这里使用<code>i&amp;1</code>进行判断，这里使用他的原因在之前的另一篇博客中写了，有不懂的小伙伴可以去参考一下，地址为：<a href="https://blog.csdn.net/qq_43422111/article/details/105326623" target="_blank" rel="noopener">为什么同样的算法，你的程序却一直超时？ 算法竞赛你不得不知道的小技巧</a>。然后我们为边界赋值，这里赋值只有1位数的时，最大数的不同时，可能的种类，这里初始化为<code>dp[1][i] = n - i + 1;</code>。然后我们从</p><p>​        下面我们来详细的解释一下dp的过程。这里我们计算的时候先从第一行开始，为第一行进行一个初始化，初始化为下一行可以选择的值的数目，即当前所能组成的摆动数列的个数。我们初始化<code>dp[1][i] = n - i + 1;</code></p><p>第一行中，令 <code>d[1][j]</code>为：第1个数选择大于等于 j的数的方案总数。</p><p>从第二行开始：</p><p>​    奇数行中，令 <code>d[i][j]</code>为：第i个数选择大于等于j的数时的方案总数。<br>​    偶数行中，令 <code>d[i][j]</code>为：第i个数选择小于等于j的数时的方案总数。</p><p>即从第二行开始，如果行数为偶数行，那么我们当前可能的数目为：<code>dp[i][j] = (dp[i-1][j+1] + dp[i][j-1]) % 10000;</code>,如果为奇数行则：<code>dp[i][j] = (dp[i-1][j-1] + dp[i][j+1]) % 10000;</code>。</p><p>​    然后这样的话，如果我们总的长度为奇数的话，那么就是<code>dp[m][1]</code>,如果是偶数，则为<code>dp[m][n]</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int dp[1004][1004];</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; m为长度，n为数的范围</span><br><span class="line">    int m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dp[1][i] &#x3D; n - i + 1;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 2; i &lt;&#x3D; m; i++)</span><br><span class="line">        if(i &amp; 1)</span><br><span class="line">            for(int j &#x3D; n; j &gt;&#x3D; 1; j--)</span><br><span class="line">                dp[i][j] &#x3D; (dp[i-1][j-1] + dp[i][j+1]) % 10000;</span><br><span class="line">        else</span><br><span class="line">            for(int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">                dp[i][j] &#x3D; (dp[i-1][j+1] + dp[i][j-1]) % 10000;</span><br><span class="line"></span><br><span class="line">    int ans &#x3D; m &amp; 1 ? dp[m][1] : dp[m][n];</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。<br>例如，一个 4 行 5 列的螺旋矩阵如下：<br>1 2 3 4 5<br>14 15 16 17 6<br>13 20 19 18 7<br>12 11 10 9 8</p><p>输入格式</p><p>输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。<br>第二行包含两个整数 r, c，表示要求的行号和列号。</p><p>输出格式</p><p>输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。</p><p>样例输入</p><p>4 5<br>2 2</p><p>样例输出</p><p>15</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，2 &lt;= n, m &lt;= 20。<br>对于 70% 的评测用例，2 &lt;= n, m &lt;= 100。<br>对于所有评测用例，2 &lt;= n, m &lt;= 1000，1 &lt;= r &lt;= n，1 &lt;= c &lt;= m。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>​        这题我们可以直接模拟过程将这个螺旋矩阵构建出来，然后直接输出我们需要的那个位置的数即可。<br>在我们进行构建螺旋矩阵进行上下左右走的时候记得要加一个判断，即当前的位置是否已走过，判定一下边界情况。这个和之前的一个LeetCode很像，如果有不会模拟的，可以看看博主的那篇博客，写的很详细：<a href="https://blog.csdn.net/qq_43422111/article/details/105096715" target="_blank" rel="noopener">LeetCode 54. 螺旋矩阵 C++描述</a></p><p>完整题解代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; n为行数，m列数</span><br><span class="line">    &#x2F;&#x2F; r为输出的行，c为输出的列</span><br><span class="line">    int n, m,r, c;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;c;</span><br><span class="line">    int store[1005][1005];</span><br><span class="line">    &#x2F;&#x2F; 所有置为0</span><br><span class="line">    memset(store,0, sizeof(store));</span><br><span class="line">    &#x2F;&#x2F; 总数</span><br><span class="line">    int sum &#x3D; n * m;</span><br><span class="line">    int row &#x3D; 0, col &#x3D; 0, cnt &#x3D; 1;</span><br><span class="line">    store[row][col] &#x3D; 1;</span><br><span class="line">    while(cnt &lt; sum)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 向右走，直到走到头或者下一个已经走过</span><br><span class="line">        while(col + 1 &lt; m &amp;&amp; !store[row][col+1])</span><br><span class="line">            store[row][++col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向下走，直到走到头或者下一个已经走过</span><br><span class="line">        while(row + 1 &lt; n &amp;&amp; !store[row+1][col])</span><br><span class="line">            store[++row][col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向左走，直到走到头或者下一个已经走过</span><br><span class="line">        while(col - 1 &gt;&#x3D; 0 &amp;&amp; !store[row][col-1])</span><br><span class="line">            store[row][--col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向上走，直到走到头或者下一个已经走过</span><br><span class="line">        while(row - 1 &gt;&#x3D; 0 &amp;&amp; !store[row-1][col])</span><br><span class="line">            store[--row][col] &#x3D; ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;注意数组下标，因为从0开始，所以最后输出的行列号r-1和c-1哦</span><br><span class="line">    cout&lt;&lt;store[r-1][c-1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>小明和朋友们一起去郊外植树，他们带了一些在自己实验室精心研究出的小树苗。<br>小明和朋友们一共有 n 个人，他们经过精心挑选，在一块空地上每个人挑选了一个适合植树的位置，总共 n 个。他们准备把自己带的树苗都植下去。<br>然而，他们遇到了一个困难：有的树苗比较大，而有的位置挨太近，导致两棵树植下去后会撞在一起。<br>他们将树看成一个圆，圆心在他们找的位置上。如果两棵树对应的圆相交，这两棵树就不适合同时植下（相切不受影响），称为两棵树冲突。<br>小明和朋友们决定先合计合计，只将其中的一部分树植下去，保证没有互相冲突的树。他们同时希望这些树所能覆盖的面积和（圆面积和）最大。</p><p>输入格式</p><p>输入的第一行包含一个整数 n ，表示人数，即准备植树的位置数。<br>接下来 n 行，每行三个整数 x, y, r，表示一棵树在空地上的横、纵坐标和半径。</p><p>输出格式</p><p>输出一行包含一个整数，表示在不冲突下可以植树的面积和。由于每棵树的面积都是圆周率的整数倍，请输出答案除以圆周率后的值（应当是一个整数）。</p><p>样例输入</p><p>6<br>1 1 2<br>1 4 2<br>1 7 2<br>4 1 2<br>4 4 2<br>4 7 2</p><p>样例输出</p><p>12</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，1 &lt;= n &lt;= 10；<br>对于 60% 的评测用例，1 &lt;= n &lt;= 20；<br>对于所有评测用例，1 &lt;= n &lt;= 30，0 &lt;= x, y &lt;= 1000，1 &lt;= r &lt;= 1000。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">class node&#123;</span><br><span class="line">    public:</span><br><span class="line">        int a, b, c;</span><br><span class="line">        node(int a &#x3D; 0, int b &#x3D; 0, int c &#x3D; 0):a(a), b(b), c(c)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">node arr[35];</span><br><span class="line">&#x2F;&#x2F;圆心距离与两半径相比判断是否相交，相切不受影响</span><br><span class="line">bool check(int i, int j)&#123;</span><br><span class="line">    return (arr[i].a - arr[j].a) * (arr[i].a - arr[j].a) + (arr[i].b - arr[j].b) * (arr[i].b - arr[j].b) &gt;&#x3D; (arr[i].c + arr[j].c) * (arr[i].c + arr[j].c);</span><br><span class="line">&#125;</span><br><span class="line">signed main(void)&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    &#x2F;&#x2F;初始化节点</span><br><span class="line">    for(int i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">        int a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        arr[i] &#x3D; node(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    int ans &#x3D; -1;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; (1 &lt;&lt; n); i ++)&#123;</span><br><span class="line">     &#x2F;&#x2F;现在检查这种方案是否符合规则</span><br><span class="line">        vector&lt;int&gt; mark(n);</span><br><span class="line">        int t &#x3D; i, p &#x3D; 0;</span><br><span class="line">        while(t)&#123;</span><br><span class="line">            mark[p ++] &#x3D; (t &amp; 1);</span><br><span class="line">            t &gt;&gt;&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        bool isOK &#x3D; true;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">        &#x2F;&#x2F;首先遍历所有的树，选出第一棵种下的树，然后就递归枚举下一棵，判断和已种的是否冲突，同时累加已种面积</span><br><span class="line">            if(!mark[i]) continue;</span><br><span class="line">            for(int j &#x3D; i + 1; j &lt; n; j ++)&#123;</span><br><span class="line">                if(!mark[j]) continue;</span><br><span class="line">                if(!check(i, j))&#123;</span><br><span class="line">                    isOK &#x3D; false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(isOK &#x3D;&#x3D; false) break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 计算所有种下的树的占地面积</span><br><span class="line">        if(isOK)&#123;</span><br><span class="line">            int sum &#x3D; 0;</span><br><span class="line">            for(int i &#x3D; 0; i &lt; n; i++)&#123;</span><br><span class="line">                if(mark[i])&#123;</span><br><span class="line">                    sum +&#x3D; arr[i].c * arr[i].c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans &#x3D; max(ans, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>2015年，全中国实现了户户通电。作为一名电力建设者，小明正在帮助一带一路上的国家通电。<br>这一次，小明要帮助 n 个村庄通电，其中 1 号村庄正好可以建立一个发电站，所发的电足够所有村庄使用。<br>现在，这 n 个村庄之间都没有电线相连，小明主要要做的是架设电线连接这些村庄，使得所有村庄都直接或间接的与发电站相通。<br>小明测量了所有村庄的位置（坐标）和高度，如果要连接两个村庄，小明需要花费两个村庄之间的坐标距离加上高度差的平方，形式化描述为坐标为 (x_1, y_1) 高度为 h_1 的村庄与坐标为 (x_2, y_2) 高度为 h_2 的村庄之间连接的费用为<br>sqrt((x_1-x_2)<em>(x_1-x_2)+(y_1-y_2)</em>(y_1-y_2))+(h_1-h_2)*(h_1-h_2)。<br>在上式中 sqrt 表示取括号内的平方根。请注意括号的位置，高度的计算方式与横纵坐标的计算方式不同。<br>由于经费有限，请帮助小明计算他至少要花费多少费用才能使这 n 个村庄都通电。</p><p>输入格式</p><p>输入的第一行包含一个整数 n ，表示村庄的数量。<br>接下来 n 行，每个三个整数 x, y, h，分别表示一个村庄的横、纵坐标和高度，其中第一个村庄可以建立发电站。</p><p>输出格式</p><p>输出一行，包含一个实数，四舍五入保留 2 位小数，表示答案。</p><p>样例输入</p><p>4<br>1 1 3<br>9 9 7<br>8 8 6<br>4 5 4</p><p>样例输出</p><p>17.41</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，1 &lt;= n &lt;= 10；<br>对于 60% 的评测用例，1 &lt;= n &lt;= 100；<br>对于所有评测用例，1 &lt;= n &lt;= 1000，0 &lt;= x, y, h &lt;= 10000。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>这题可以使用prim算法进行求解，别忘了最后的输出的2位小数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 1004;</span><br><span class="line">const double MAX &#x3D; 0x7f7f7f7f;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">double a[maxn][maxn],d[maxn], ans;</span><br><span class="line">bool visit[maxn];</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    int h;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line">point p[maxn];</span><br><span class="line"></span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j &#x3D; 0; j &lt;&#x3D; n; j++)</span><br><span class="line">            a[i][j] &#x3D; MAX;</span><br><span class="line">        d[i] &#x3D; MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;最小生成树模版题,这用了Prim.</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    memset(visit, 0, sizeof(visit));</span><br><span class="line">    d[1] &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int x &#x3D; 0;</span><br><span class="line">        for(int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            if(!visit[j] &amp;&amp; (x &#x3D;&#x3D; 0 || d[j] &lt; d[x])) x &#x3D; j;</span><br><span class="line">        visit[x] &#x3D; 1;</span><br><span class="line">        for(int y &#x3D; 1; y &lt;&#x3D; n; y++)</span><br><span class="line">            if(!visit[y]) d[y] &#x3D; min(d[y], a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    init();</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        scanf(&quot;%d %d %d&quot;, &amp;p[i].x, &amp;p[i].y, &amp;p[i].h);</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)</span><br><span class="line">        for(int j &#x3D; i + 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            double temp &#x3D; sqrt( (p[i].x - p[j].x) * (p[i].x - p[j].x) + (p[i].y-p[j].y) * (p[i].y-p[j].y)) + (p[i].h-p[j].h) * (p[i].h-p[j].h);</span><br><span class="line">            a[i][j] &#x3D; a[j][i] &#x3D; min(a[i][j], temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    Prim();</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 2; i &lt;&#x3D; n; i++) ans +&#x3D; d[i];</span><br><span class="line">    &#x2F;&#x2F; 输出2位小数</span><br><span class="line">    printf(&quot;%.2f&quot;, ans);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_43422111/article/details/105489080#_437" target="_blank" rel="noopener">参考博客https://blog.csdn.net/qq_43422111/article/details/105489080#_437</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十一届蓝桥杯省模拟赛-试题-题解&quot;&gt;&lt;a href=&quot;#第十一届蓝桥杯省模拟赛-试题-题解&quot; class=&quot;headerlink&quot; title=&quot;第十一届蓝桥杯省模拟赛 试题+题解&quot;&gt;&lt;/a&gt;第十一届蓝桥杯省模拟赛 试题+题解&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git入门/Learngit</title>
    <link href="https://salmooo.github.io/2020/04/17/Git%E5%85%A5%E9%97%A8/Learngit/"/>
    <id>https://salmooo.github.io/2020/04/17/Git%E5%85%A5%E9%97%A8/Learngit/</id>
    <published>2020-04-17T05:08:58.315Z</published>
    <updated>2020-04-17T05:16:44.273Z</updated>
    
    <content type="html"><![CDATA[<p>今日温故了一下git指令，觉得不错的git学习资源分享如下，</p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的git教程</a><br>廖大大的教程真的简明易懂，还配上B站视频，很nice~</p><p><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">菜鸟git教程</a><br>菜鸟教程和廖雪峰教程差不多，例子更多一点。</p><p><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener">在线沙盒学习git</a></p><p>好啦，再分享下超级无敌全的git命令：<br>可自行到该地址自取哈。<br><a href="https://gitee.com/liaoxuefeng/learngit/blob/master/Git%E6%9C%80%E8%AF%A6%E7%BB%86%E5%91%BD%E4%BB%A4-%E5%85%B168%E6%9D%A1#" target="_blank" rel="noopener">gitee地址</a></p><p>下面也列举一波~<br>1）git help <command> # 显示command的help</p><p>2）git show # 显示某次提交的内容 git show $id</p><p>3）git co – <file> # 抛弃工作区修改</p><p>4）git co . # 抛弃工作区修改</p><p>5）git add <file> # 将工作文件修改提交到本地暂存区</p><p>6）git add . # 将所有修改过的工作文件提交暂存区</p><p>7）git rm <file> # 从版本库中删除文件</p><p>8）git rm <file> –cached # 从版本库中删除文件，但不删除文件</p><p>9）git reset <file> # 从暂存区恢复到工作文件</p><p>10）git reset – . # 从暂存区恢复到工作文件</p><p>11）git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</p><p>12）git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am “some comments”</p><p>13）git ci –amend # 修改最后一次提交记录</p><p>14）git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</p><p>15）git revert HEAD # 恢复最后一次提交的状态</p><p>16）git diff <file> # 比较当前文件和暂存区文件差异 git diff</p><p>17）git diff <id1><id1><id2> # 比较两次提交之间的差异</p><p>18）git diff <branch1>..<branch2> # 在两个分支之间比较</p><p>19）git diff –staged # 比较暂存区和版本库差异</p><p>20）git diff –stat # 仅仅比较统计信息</p><p>21）git log git log <file> # 查看该文件每次提交记录</p><p>22）git log -p <file> # 查看每次详细修改内容的diff</p><p>23）git log -p -2 # 查看最近两次详细修改内容的diff</p><p>24）git log –stat #查看提交统计信息</p><p>25）git br -r # 查看远程分支</p><p>26）git br <new_branch> # 创建新的分支</p><p>27）git br -v # 查看各个分支最后提交信息</p><p>28）git br –merged # 查看已经被合并到当前分支的分支</p><p>29）git br –no-merged # 查看尚未被合并到当前分支的分支</p><p>30）git co <branch> # 切换到某个分支</p><p>31）git co -b <new_branch> # 创建新的分支，并且切换过去</p><p>32）git co -b <new_branch> <branch> # 基于branch创建新的new_branch</p><p>33）git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</p><p>34）git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支</p><p>35）git br -d <branch> # 删除某个分支</p><p>36）git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</p><p>37）git merge <branch> # 将branch分支合并到当前分支</p><p>38）git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交</p><p>39）git diff &gt; ../sync.patch # 生成补丁</p><p>40）git apply ../sync.patch # 打补丁</p><p>41）git apply –check ../sync.patch #测试补丁能否成功</p><p>42）git stash # 暂存</p><p>43）git stash list # 列出所有stash</p><p>44）git stash apply # 恢复暂存的内容</p><p>45）git stash drop # 删除暂存区</p><p>46）git pull # 抓取远程仓库所有分支更新并合并到本地</p><p>47）git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</p><p>48）git fetch origin # 抓取远程仓库更新</p><p>49）git merge origin/master # 将远程主分支合并到本地当前分支</p><p>50）git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支</p><p>51）git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上</p><p>52）git push # push所有分支</p><p>53）git push origin master # 将本地主分支推到远程主分支</p><p>54）git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</p><p>55）git push origin <local_branch> # 创建远程分支， origin是远程仓库名</p><p>56）git push origin <local_branch>:<remote_branch> # 创建远程分支</p><p>57）git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支</p><p>58）git remote -v # 查看远程服务器地址和仓库名称</p><p>59）git remote show origin # 查看远程服务器仓库状态</p><p>60）git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</p><p>61）git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库</p><p>62）git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</p><p>63）scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</p><p>64）mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库</p><p>65）git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</p><p>66) git push -u origin master # 客户端首次提交</p><p>67) git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</p><p>68) git remote set-head origin master # 设置远程仓库的HEAD指向master分支</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日温故了一下git指令，觉得不错的git学习资源分享如下，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的git教程
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown入门</title>
    <link href="https://salmooo.github.io/2020/04/15/Markdown%E5%85%A5%E9%97%A8/markdown%E5%85%A5%E9%97%A8/"/>
    <id>https://salmooo.github.io/2020/04/15/Markdown%E5%85%A5%E9%97%A8/markdown%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-14T21:12:49.000Z</published>
    <updated>2020-04-15T03:02:27.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最全的Markdown语法汇总在这里"><a href="#最全的Markdown语法汇总在这里" class="headerlink" title="最全的Markdown语法汇总在这里"></a>最全的Markdown语法汇总在这里</h1><p>2019.03.03 00:25<br>                        3019浏览</p><!-- 手记详情 --><h1 id="Markdown-语法汇总精要"><a href="#Markdown-语法汇总精要" class="headerlink" title="Markdown 语法汇总精要"></a>Markdown 语法汇总精要</h1><p>标签： Markdown</p><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 _斜体_，这是 <strong>粗体</strong>。</p><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br><span class="line">&#96;&#96;&#96;预览</span><br><span class="line"></span><br><span class="line">你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</span><br><span class="line"></span><br><span class="line">### 3. 外链接</span><br><span class="line"></span><br><span class="line">使用 [描述](链接地址) 为文字增加外链接。</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;prism</span><br><span class="line">这是去往 [本人github](https:&#x2F;&#x2F;github.com&#x2F;moweiyang0214) 的链接。</span><br></pre></td></tr></table></figure><p>效果：<br>这是去往 <a href="https://github.com/moweiyang0214" target="_blank" rel="noopener">本人github</a> 的链接。</p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表项 一</span><br><span class="line">- 无序列表项 二</span><br><span class="line">- 无序列表项 三</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br><span class="line">&#96;&#96;&#96;预览</span><br><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">1.  有序列表项 一</span><br><span class="line">2.  有序列表项 二</span><br><span class="line">3.  有序列表项 三</span><br><span class="line"></span><br><span class="line">### 6. 文字引用</span><br><span class="line"></span><br><span class="line">使用 &gt; 表示文字引用。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">&gt; 野火烧不尽，春风吹又生。</span><br><span class="line"></span><br><span class="line">### 7. 行内代码块</span><br><span class="line"></span><br><span class="line">使用 &#96;代码&#96; 表示行内代码块。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>让我们聊聊 <code>html</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line">让我们聊聊 &#96;html&#96;。</span><br><span class="line"></span><br><span class="line">### 8.  代码块</span><br><span class="line"></span><br><span class="line">使用 四个缩进空格 表示代码块。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>这是一个代码块，此行左侧有四个不可见的空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line">这是一个代码块，此行左侧有四个不可见的空格。</span><br><span class="line"></span><br><span class="line">### 9.  插入图像</span><br><span class="line"></span><br><span class="line">使用 ![描述](图片链接地址) 插入图像。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://avatars3.githubusercontent.com/u/10223537?s=460&v=4"  alt="我的头像"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：![我的头像](data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB&#x2F;AAffA0nNPuCLAAAAAElFTkSuQmCC)</span><br><span class="line"></span><br><span class="line">## Markdown 高阶语法</span><br><span class="line"></span><br><span class="line">### 1. 内容目录</span><br><span class="line"></span><br><span class="line">在段落中填写 &#96;[TOC]&#96; 以显示全文内容的目录结构。</span><br><span class="line"></span><br><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line">### 2. 标签分类</span><br><span class="line"></span><br><span class="line">在编辑区任意行的列首位置输入以下代码给文稿标签：</span><br><span class="line"></span><br><span class="line">标签： 数学 英语 Markdown</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">Tags： 数学 英语 Markdown</span><br><span class="line"></span><br><span class="line">### 3. 删除线</span><br><span class="line"></span><br><span class="line">使用 ~~ 表示删除线。</span><br><span class="line"></span><br><span class="line">&lt;s&gt;这是一段错误的文本。&lt;&#x2F;s&gt;</span><br><span class="line"></span><br><span class="line">### 4. 注脚</span><br><span class="line"></span><br><span class="line">使用 [^keyword] 表示注脚。</span><br><span class="line"></span><br><span class="line">这是一个注脚&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;[1](http:&#x2F;&#x2F;www.imooc.com&#x2F;article&#x2F;280979?block_id&#x3D;tuijian_wz#fn1)&lt;&#x2F;sup&gt;的样例。</span><br><span class="line"></span><br><span class="line">这是第二个注脚&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;[2](http:&#x2F;&#x2F;www.imooc.com&#x2F;article&#x2F;280979?block_id&#x3D;tuijian_wz#fn2)&lt;&#x2F;sup&gt;的样例。</span><br><span class="line"></span><br><span class="line">### 5. LaTeX 公式</span><br><span class="line"></span><br><span class="line">$ 表示行内公式：</span><br><span class="line"></span><br><span class="line">质能守恒方程可以用一个很简洁的方程式 E&#x3D;mc2E&#x3D;mc^2E&#x3D;mc2 来表达。</span><br><span class="line"></span><br><span class="line">$$ 表示整行公式：</span><br><span class="line"></span><br><span class="line">∑i&#x3D;1nai&#x3D;0\sum_&#123;i&#x3D;1&#125;^n a_i&#x3D;0i&#x3D;1∑n​ai​&#x3D;0</span><br><span class="line"></span><br><span class="line">f(x1,xx,…,xn)&#x3D;x12+x22+⋯+xn2f(x_1,x_x,\ldots,x_n) &#x3D; x_1^2 + x_2^2 + \cdots + x_n^2 f(x1​,xx​,…,xn​)&#x3D;x12​+x22​+⋯+xn2​</span><br><span class="line"></span><br><span class="line">∑k&#x3D;0j−1γ^kjzk\sum^&#123;j-1&#125;_&#123;k&#x3D;0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;k&#x3D;0∑j−1​γ​kj​zk​</span><br><span class="line"></span><br><span class="line">访问 [MathJax](http:&#x2F;&#x2F;meta.math.stackexchange.com&#x2F;questions&#x2F;5020&#x2F;mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。</span><br><span class="line"></span><br><span class="line">### 6. 加强的代码块</span><br><span class="line"></span><br><span class="line">支持四十一种编程语言的语法高亮的显示，行号显示。</span><br><span class="line"></span><br><span class="line">非代码示例：</span><br></pre></td></tr></table></figure><p>$ sudo apt-get install vim-gnome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Python 示例：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;prism</span><br><span class="line">@requires_authorization</span><br><span class="line">def somefunc(param1&#x3D;&#39;&#39;, param2&#x3D;0):</span><br><span class="line">    &#39;&#39;&#39;A docstring&#39;&#39;&#39;</span><br><span class="line">    if param1 &gt; param2: # interesting</span><br><span class="line">        print &#39;Greater&#39;</span><br><span class="line">    return (param2 - param1 + 1) or None</span><br><span class="line"></span><br><span class="line">class SomeClass:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; message &#x3D; &#39;&#39;&#39;interpreter</span><br><span class="line">... prompt&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><p>JavaScript 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* nth element in the fibonacci series.</span><br><span class="line">* @param n &gt;&#x3D; 0</span><br><span class="line">* @return the nth element, &gt;&#x3D; 0.</span><br><span class="line">*&#x2F;</span><br><span class="line">function fib(n) &#123;</span><br><span class="line">  var a &#x3D; 1, b &#x3D; 1;</span><br><span class="line">  var tmp;</span><br><span class="line">  while (--n &gt;&#x3D; 0) &#123;</span><br><span class="line">    tmp &#x3D; a;</span><br><span class="line">    a +&#x3D; b;</span><br><span class="line">    b &#x3D; tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.write(fib(10));</span><br></pre></td></tr></table></figure><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">    section 项目确定</span><br><span class="line">        需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">        可行性报告     :after a1, 5d</span><br><span class="line">        概念验证       : 5d</span><br><span class="line">    section 项目实施</span><br><span class="line">        概要设计      :2016-07-05  , 5d</span><br><span class="line">        详细设计      :2016-07-08, 10d</span><br><span class="line">        编码          :2016-07-15, 10d</span><br><span class="line">        测试          :2016-07-22, 5d</span><br><span class="line">    section 发布验收</span><br><span class="line">        发布: 2d</span><br><span class="line">        验收: 3d</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">    B --&gt; C&#123;Decision&#125;</span><br><span class="line">    C --&gt;|One| D[Result one]</span><br><span class="line">    C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    loop every minute</span><br><span class="line">        John--&gt;Alice: Great!</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl>    <dt>名词 1</dt>    <dd>        定义 1（左侧有一个可见的冒号和四个不可见的空格）    </dd>    <dt>代码块 2</dt>    <dd>        这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）<pre><code>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块（左侧有八个不可见的空格）</span><br></pre></td></tr></table></figure>&lt;/dd&gt;</code></pre></dl><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan&#x3D;&quot;2&quot;&gt;值班人员&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期一&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期二&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期三&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;李强&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;张明&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;王平&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值班人员</th><th>星期一</th><th>星期二</th><th>星期三</th></tr></thead><tbody><tr><td>李强</td><td>张明</td><td>王平</td><td></td></tr></tbody></table><h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon-weibo&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>即显示微博的图标： __</p><p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon-renren&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>即显示人人的图标： __</p><p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- [ ] **Cmd Markdown 开发**</span><br><span class="line">    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</span><br><span class="line">    - [ ] 支持以 PDF 格式导出文稿</span><br><span class="line">    - [x] 新增Todo列表功能 [语法参考](https:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;1375-task-lists-in-gfm-issues-pulls-comments)</span><br><span class="line">    - [x] 改进 LaTex 功能</span><br><span class="line">        - [x] 修复 LaTex 公式渲染问题</span><br><span class="line">        - [x] 新增 LaTex 公式编号功能 [语法参考](http:&#x2F;&#x2F;docs.mathjax.org&#x2F;en&#x2F;latest&#x2F;tex.html#tex-eq-numbers)</span><br><span class="line">- [ ] **七月旅行准备**</span><br><span class="line">    - [ ] 准备邮轮上需要携带的物品</span><br><span class="line">    - [ ] 浏览日本免税店的物品</span><br><span class="line">    - [x] 购买蓝宝石公主号七月一日的船票</span><br></pre></td></tr></table></figure><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><p><strong>Cmd Markdown 开发</strong></p><ul><li><p>改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</p></li><li><p>支持以 PDF 格式导出文稿</p></li><li><p>新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></p></li><li><p>改进 LaTex 功能</p><ul><li>修复 LaTex 公式渲染问题</li><li>新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li><li><p><strong>七月旅行准备</strong></p><ul><li>准备邮轮上需要携带的物品</li><li>浏览日本免税店的物品</li><li>购买蓝宝石公主号七月一日的船票</li></ul></li></ul><hr><ol><li><p>参考链接： <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a> 。 <a href="http://www.imooc.com/article/280979?block_id=tuijian_wz#fnref1" target="_blank" rel="noopener">↩︎</a></p></li><li><p>这是另一个 <em>注脚</em> 的 <strong>文本</strong>。 <a href="http://www.imooc.com/article/280979?block_id=tuijian_wz#fnref2" target="_blank" rel="noopener">↩︎</a></p></li></ol><p>转载于<a href="http://www.imooc.com/article/280979?block_id=tuijian_wz" target="_blank" rel="noopener">慕课</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最全的Markdown语法汇总在这里&quot;&gt;&lt;a href=&quot;#最全的Markdown语法汇总在这里&quot; class=&quot;headerlink&quot; title=&quot;最全的Markdown语法汇总在这里&quot;&gt;&lt;/a&gt;最全的Markdown语法汇总在这里&lt;/h1&gt;&lt;p&gt;2019.0
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://salmooo.github.io/2020/04/14/hello-world/"/>
    <id>https://salmooo.github.io/2020/04/14/hello-world/</id>
    <published>2020-04-14T11:07:19.021Z</published>
    <updated>2020-04-14T11:07:19.021Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
