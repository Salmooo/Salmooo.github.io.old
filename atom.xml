<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Salmooo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://salmooo.github.io/"/>
  <updated>2020-04-22T14:53:40.562Z</updated>
  <id>https://salmooo.github.io/</id>
  
  <author>
    <name>Salmone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EIT/yc/云计算介绍之云计算的产生概述</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/yc/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BB%8B%E7%BB%8D%E4%B9%8B%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E4%BA%A7%E7%94%9F%E6%A6%82%E8%BF%B0/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/yc/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BB%8B%E7%BB%8D%E4%B9%8B%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E4%BA%A7%E7%94%9F%E6%A6%82%E8%BF%B0/</id>
    <published>2020-04-22T13:37:20.460Z</published>
    <updated>2020-04-22T14:53:40.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云计算介绍之云计算的产生概述"><a href="#云计算介绍之云计算的产生概述" class="headerlink" title="云计算介绍之云计算的产生概述"></a>云计算介绍之云计算的产生概述</h1><pre><code>### 博客目录* [1.云计算的出现](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#1_3)* [2.云计算虚拟化概述](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#2_45)* [2.1 什么是虚拟化](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#21__47)* [2.2 虚拟化的方式](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#22__52)* [2.3 常见的虚拟化类型](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#23__59)* [（1）服务器虚拟化](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#1_61)* [（2）网络虚拟化](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#2_65)* [（3）存储虚拟化](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#3_74)* [2.4 什么是云计算](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#24__82)* [3.SANGFOR CLOUD解决方案](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#3SANGFOR_CLOUD_103)* [3.1 企业云解决方案](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#31__105)* [3.2 桌面云解决方案](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#32__111)* [3.3 应用交付解决方案](https://blog.csdn.net/csdn10086110/article/details/91413055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158746995019724835835458%2522%252C%2522scm%2522%253A%252220140713.130102334.app%255Fblog.%2522%257D&amp;request_id=158746995019724835835458&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-9#33__126)## 1.云计算的出现**造成IT服务困境的原因**&gt; 竖井式IT架构&gt; 业务扩容困难&gt; 业务部署缓慢&gt; 管理策略分散&gt; 运维成本上升为了满足企业业务快速发展的需求，IT系统应该具备如下特点&gt; 新IT：由互联网思维催生的数据中心深层次变革&gt; 应该具有以下特点：&gt; 数据可靠&gt; 资源灵活&gt; 节约成本&gt; 快速上线&gt; 统一管理&gt; 高使用率**新IT的核心价值**&gt; 基础设施 平台化&gt; • 硬件资源虚拟化管理&gt; • 虚拟资源池化管理&gt; • 软件定义数据中心&gt; 运维管理 集约化&gt; •虚拟化整合实现效益最大化&gt; • 资源自动弹性技术提升业务效率&gt; • 大规模集群HA技术降低运营成本&gt; 业务交付 服务化&gt; • 流程式的敏捷业务交付&gt; • 业务部门以内部结算方式消费IT&gt; • IT部门由成本中心向利润中心转变**云计算虚拟化—新IT的基础**![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611090552608.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)## 2.云计算虚拟化概述### 2.1 什么是虚拟化&gt; &lt;mark&gt;1.虚拟化的对象是各种各样的资源&lt;br&gt;&gt; 2.经过虚拟化后的逻辑资源对用户隐藏了不必要的细 节&lt;br&gt;&gt; 3.用户可以在虚拟环境中 实现其真实环境的部分或全部功能&lt;/mark&gt;### 2.2 虚拟化的方式![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611091304305.)![在这里插入图片描述](https://img-blog.csdnimg.cn/2019061109153617.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)**主流虚拟化服务商**![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611091605646.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)### 2.3 常见的虚拟化类型#### （1）服务器虚拟化&gt; 一台服务器在逻辑上虚拟出多台服务器，且相互隔离独立运行&gt; ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611091829395.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)#### （2）网络虚拟化&gt; &lt;mark&gt;网络设备N:1虚拟化技术IRF&lt;/mark&gt;&gt; 可以实现将多台物理网络设备虚拟成一台网络设备&gt; &lt;mark&gt;网络设备1:N虚拟化技术MDC&lt;/mark&gt;&gt; 可以实现在单台网络设备上虚拟多台逻辑设备![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611091854502.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)#### （3）存储虚拟化1.  基于主机的存储虚拟化2.  基于存储设备的存储虚拟化    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611092131654.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)3.  基于网络的存储虚拟化    ![在这里插入图片描述](https://img-blog.csdnimg.cn/2019061109223692.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)### 2.4 什么是云计算&gt; 云计算：通过网络将共享资源以服务的方式按需提供给用户的一种计算方式**五大特征**&gt; 自助服务&gt; 网络分发&gt; 资源池化&gt; 灵活调度&gt; 服务可衡量**三种服务**![在这里插入图片描述](https://img-blog.csdnimg.cn/2019061109490863.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)**四个模型**&gt; 公有云&gt; 私有云&gt; 混合云&gt; 行业云&gt; ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611095021965.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)## 3.SANGFOR CLOUD解决方案### 3.1 企业云解决方案![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611095143445.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)**深信服 超融合架构**![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611095212605.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)### 3.2 桌面云解决方案![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611095615605.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)&gt; 将原先PC机上的操作系统、应用程序和数据全部集中到数据中心，只要网络可达，就可以通过瘦终端或其他设备访问位于服务器上的个人桌面及各种应用，并且用户体验和我们使用传统 PC是一样的。![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611095855413.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 终端设备：瘦终端、普通PC、笔记本、智能终端（如手机、IPAD）</span><br><span class="line">2. 网络：局域网、广域网，会通过专有协议来传输图像和指令（如SRAP）</span><br><span class="line">3. 软件：服务器虚拟化、存储虚拟化、虚拟桌面控制器</span><br><span class="line">4. 服务器和存储:其中存储可以用虚拟存储，也可以用独立存储</span><br></pre></td></tr></table></figure>* 1* 2* 3* 4### 3.3 应用交付解决方案&gt; 应用交付（Application Deliver，简称AD）的核心即负载均衡&gt; ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611100417582.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)&gt; 应用交付解决方案与传统的负载均衡相比，在强调稳定性的基础上，增加了智能和优化方面的功能特性，以帮助用户应对来自于复杂应用环境中部署并交付服务的挑战&gt; ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190611100343223.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG4xMDA4NjExMA==,size_16,color_FFFFFF,t_70)</code></pre></article>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;云计算介绍之云计算的产生概述&quot;&gt;&lt;a href=&quot;#云计算介绍之云计算的产生概述&quot; class=&quot;headerlink&quot; title=&quot;云计算介绍之云计算的产生概述&quot;&gt;&lt;/a&gt;云计算介绍之云计算的产生概述&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;### 博客目录

* [1
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/yc/云计算未来的发展趋势</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/yc/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/yc/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/</id>
    <published>2020-04-22T13:37:20.458Z</published>
    <updated>2020-04-22T14:53:40.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云计算未来的发展趋势"><a href="#云计算未来的发展趋势" class="headerlink" title="云计算未来的发展趋势"></a>云计算未来的发展趋势</h1><p>云计算的发展如火如荼，发展到现在已经出乎我们的意料，未来云计算趋势方向，具体如下：<br>1、云计算的分工将会变得更加细化<br>随着云计算产业生态链不断完善，行业分工逐渐细化。在未来 年，云计算的分工更加细化，行业云将成为云计算领域的发展热点。<br>2、Iaas将迎来更大的降价风潮<br>万物互联对云计算带来更大的需求，在行业竞争和规模效应的驱动下，在2017年，我们将见证iaas迎来新 轮的降价风潮。<br>3、私有云与超融合型基础设施将实现统<br>在2017年，私有云将越来越多地立足于超融合型平台之上，即将计算、网络与存储资源进行预先整合的新型平台，帮助企业更快地运行云实施。<br>4、容器技术将成为云计算的标配<br>随着容器技术的成熟和更高的接受度，我们预计容器技术将在2017年成为云计算的标配。<br>5、公有云将更深入关键业务应用<br>随着公有云给企业带来更多的便利和成本优势，在2017年，我们预计更多的企业将更愿意把关键业务应用放在公有服务中，尤其更加吸引以成本驱动的企业投身入公有云的怀抱中。<br>人工智能、大数据、云计算和物联网的未来发展值得重视，均为前沿产业，有兴趣的朋友，可以查阅多智时代，在此为你推荐几篇优质好文：<br>1.企业为何采用云计算？主要用途是什么？<br><a href="http://www.duozhishidai.com/article-14574-1.html" target="_blank" rel="noopener">http://www.duozhishidai.com/article-14574-1.html</a><br>2.企业云计算的基本特征是什么，在建设过程中主要分为哪几个阶段？<br><a href="http://www.duozhishidai.com/article-13379-1.html" target="_blank" rel="noopener">http://www.duozhishidai.com/article-13379-1.html</a><br>3.什么是云计算技术，对云计算技术的产生、概念、原理、应用和前景又在哪里？<br><a href="http://www.duozhishidai.com/article-527-1.html" target="_blank" rel="noopener">http://www.duozhishidai.com/article-527-1.html</a><br>4.云计算服务模式，主要分为哪几种？<br><a href="http://www.duozhishidai.com/article-13377-1.html" target="_blank" rel="noopener">http://www.duozhishidai.com/article-13377-1.html</a><br>5.面对巨大的云计算人才需要，你准备好了么？<br><a href="http://www.duozhishidai.com/article-12312-1.html" target="_blank" rel="noopener">http://www.duozhishidai.com/article-12312-1.html</a></p><hr><p><a href="http://www.duozhishidai.com/" target="_blank" rel="noopener">多智时代-<br><font color="red">人工智能</font>和<br><font color="red">大数据</font>学习入门网站|人工智能、大数据、<br><font color="red">物联网</font>、<br><font color="red">云计算</font>的学习交流网站</a></p><p><a href="http://www.duozhishidai.com/" target="_blank" rel="noopener"><img src="/" class="lazyload" data-src="http://www.duozhishidai.com/static/image/public/banner.jpg"  alt="多智时代-人工智能大数据学习入门网站|人工智能、大数据、云计算、物联网的学习服务的好平台"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;云计算未来的发展趋势&quot;&gt;&lt;a href=&quot;#云计算未来的发展趋势&quot; class=&quot;headerlink&quot; title=&quot;云计算未来的发展趋势&quot;&gt;&lt;/a&gt;云计算未来的发展趋势&lt;/h1&gt;&lt;p&gt;云计算的发展如火如荼，发展到现在已经出乎我们的意料，未来云计算趋势方向，具体
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/yc/云计算怎么学？学习云计算有什么用？</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/yc/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%80%8E%E4%B9%88%E5%AD%A6%EF%BC%9F%E5%AD%A6%E4%B9%A0%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/yc/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%80%8E%E4%B9%88%E5%AD%A6%EF%BC%9F%E5%AD%A6%E4%B9%A0%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F/</id>
    <published>2020-04-22T13:37:20.455Z</published>
    <updated>2020-04-22T14:53:40.562Z</updated>
    
    <content type="html"><![CDATA[<p>#云计算怎么学？学习云计算有什么用？</p><p>云计算火了，云计算的时代到来了，但是，相信还是有很多朋友没闹明白云计算是怎么一回事儿吧！或者说，虽然知道云计算是个什么了，却还没有弄明白，云计算到底有什么用？</p><p>A.经济适用</p><p>无论是从私有云角度资源利用率提高，还是从公有云角度按需使用（一些公有云厂商号称秒级计费，关机不计费，大家注意这里有坑，一些厂商即便关机还要收取磁盘占用费，此外，针对公网IP按流量收费，即便是你没有产生流量，还要收运维费和服务费，请大家注意噢！）都可以一定程度上节约成本。</p><p>B.业务快速上线</p><p>基于模板（私有云）和镜像（公有云）用户可以预先配置好需要批量配置的操作系统，更有些厂商号称秒级创建实例，采用的备份和快照技术更为人为失误情况下的快速回滚停供了可能。</p><p>C.便捷运维</p><p>无论是公有云和私有云都有比较便捷的运维平台，此外，现在云管平台也可以将公有云和私有云的管理进行整合，甚至可以管理容器。运维效率远高于传统人工运维（机房运维）。</p><p>D.可靠性</p><p>云计算模式下能够以较低费用简化数据备份、灾难恢复和实现业务连续性，因为可以在云提供商网络中的多个不同区域的不同站点上对数据进行备份处理。</p><p>E.高性能与弹性伸缩</p><p>基于虚拟化和新技术的成熟（如基于Ceph的ServerSan）可以实现资源的高性能、动态伸缩和弹性扩展。当然，云计算在发展过程也会遇到各种问题，如数据隐私性与安全性问题、用户使用习惯问题、用户观念问题、上云迁移问题、网络传输问题等。</p><p>随着云计算服务趋向成熟，每个人都能便捷的使用网上丰富的软件服务，利用无限制的在线存储，通过手机、电视等多种设备上网和分享数据。云计算对人们的影响力如此强，我们也应该跟上时代进步的步伐、技术发展的浪潮，学好云计算。问题随之而来，怎么才能学好云计算呢？</p><p>云计算怎么学？</p><p>对于上班的人来说，一般在职的，本身是有项目经验的，这是很大的优势。平常工作忙的可以参加周末班进行上课学习，决定上课之前一定要做预习，带着问题的上课。平时有时间可以多看看云计算、虚拟化、openstack等相关的书籍，建议自我学习的过程中，多做点相关项目，学习相关的知识。对于没有基础的人来说，零基础学员在理论学习阶段，要注重打基础，特别是IA、IP阶段，方便以后的进阶学习。<br>————————————————<br>版权声明：本文为CSDN博主「长沙千锋」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_43311315/article/details/89157054" target="_blank" rel="noopener">https://blog.csdn.net/qq_43311315/article/details/89157054</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#云计算怎么学？学习云计算有什么用？&lt;/p&gt;
&lt;p&gt;云计算火了，云计算的时代到来了，但是，相信还是有很多朋友没闹明白云计算是怎么一回事儿吧！或者说，虽然知道云计算是个什么了，却还没有弄明白，云计算到底有什么用？&lt;/p&gt;
&lt;p&gt;A.经济适用&lt;/p&gt;
&lt;p&gt;无论是从私有云角度资
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/vr/VR技术原理分析</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/vr/VR%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/vr/VR%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</id>
    <published>2020-04-22T13:37:17.417Z</published>
    <updated>2020-04-22T14:53:40.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VR技术原理分析，【VR原理入门理论篇】，学习研究VR技术必须要了解的理论知识。"><a href="#VR技术原理分析，【VR原理入门理论篇】，学习研究VR技术必须要了解的理论知识。" class="headerlink" title="VR技术原理分析，【VR原理入门理论篇】，学习研究VR技术必须要了解的理论知识。"></a>VR技术原理分析，【VR原理入门理论篇】，学习研究VR技术必须要了解的理论知识。</h1><p>目录</p><ol><li><p>VR沉浸感和交互作用产生的原理：</p></li><li><p>关于沉浸感和交互作用的定义</p></li><li><p>如何生成符合VR要求的虚拟世界</p></li></ol><p>4.最主流的VR开发引擎</p><ol><li>VR沉浸感和交互作用产生的原理：</li></ol><p>　　在之前，我们观看一个虚拟的创造内容是通过平面显示器的，在其中，你会看到很多10年前的虚拟现实装备，他们基本是平面显示器，或者将产生的画面投影到一个弧形甚至是球形屏幕上；或者在这些屏幕上叠加左右眼分别的图像，从而产生更加立体的效果。<br>　　<br>　　而这类装置往往很大型，也很昂贵。<br>　　<br>　　而近几年发展起来的VR头戴显示器，则达到了更好的使用效果：更好的沉浸感和更便宜的价格，目前一套主流的VR眼镜是不到1万元RMB的。<br>　　<br>　　这种VR眼镜能够达到更好的沉浸感的原理是什么呢？</p><p>VR眼镜<br>VR眼镜原理<br>我们看到，VR眼镜，主要通过三方面来达到沉浸感的目的：</p><p>VR眼镜原理<br>VR眼镜原理 - VR技术</p><p>1）通过凸透镜来放大人眼看到的即时图像范围，现在的VR眼镜大概会产生90-120度范围的图像视野，这样的视野大概和一个良好的三通道环幕投影系统产生的效果差不多，不过VR眼镜要更加贴近人眼一些，人眼被干扰的可能性大大降低</p><p>VR眼镜原理</p><p>2）通过头部的陀螺仪，当人转动头部时，陀螺仪能够及时的通知图像生成引擎，及时的更新画面，从而使人感觉到，自己是在看一个环绕的虚拟空间，从而产生360度的三维空间感。</p><p>VR眼镜原理<br>VR眼镜原理<br>3）左右眼每一时刻看到的图像是不一样的，是两幅区别左右眼位置的不同头像，从而产生很强烈的立体纵深感。</p><p>以上三个原因，就是VR眼镜的沉浸特点。</p><p>VR技术<br>VR技术</p><ol start="2"><li>关于沉浸感和交互作用的定义<br>对于这两个名词的定义，我认为大概可以如此解释：</li></ol><p>1）所谓沉浸感</p><pre><code>使用户处于一个四维的虚拟世界之内，用户各种感觉器官、特别是视觉器官对虚拟世界发生适应性正向反馈。</code></pre><p>就目前的VR眼镜来讲，主要通过两方面来达到沉浸感的目的：</p><p>一是通过经过放大的显示屏技术，能够在用户眼前显示出一个放大的局部虚拟时间景象，目前显示视场角在90-110度左右，在这个显示范围内，主要通过三维引擎技术，产生实时的立体图像。<br>二是通过和头部的位姿传感采集的数据配合，让三维引擎响应头部转动方向（和当前头部位置变化），以很高的频率实时改变显示的三维头像，用户头部转动的角度刚好和三维引擎模拟的三维画面视觉一致，让用户觉得放佛是通过一个大窗口 在观察一个虚拟的三维世界。<br>2）所谓交互作用</p><p>用户通过动作、手势、语言等人类自然的方式能够与虚拟世界进行有效的沟通。</p><p>通常来讲，用户的双手动作，双脚行走，在虚拟世界中产生用户能够理解的变化，用户就认为该虚拟世界对用户发生了反馈，那么用户的动作和虚拟世界对用户的反馈，组合在一起，就形成一次交互作用</p><p>那么主题来了，要达到目前VR眼镜所具有的沉浸互动效果，是需要有一整套软件和内容的配合。</p><ol start="3"><li>如何生成符合VR要求的虚拟世界<br>生成一个三维的虚拟世界，自从三维游戏诞生时，就不缺乏工具，基本可以认为，凡是具备三维构建和渲染能力的图形学引擎，都可以生成三维的虚拟图像世界，很多引擎拥有完整的游戏引擎功能，不仅仅限于图像方面，还能够产生声音，模拟物理现象等功能，这些目前还存在于世的引擎包括但不限于：</li></ol><p>1）世界上最知名的引擎排名前十，其中包括各大游戏公司出品的引擎：</p><p>The Dead Engine，美国EA公司重制过的引擎<br>Avalanche Engine，<br>Mt Framework引擎，鬼泣游戏大家知道吧？就是这个做的<br>Anvil引擎，UBsoft的引擎<br>EGO引擎<br>寒霜引擎<br>CryEngine<br>IW引擎<br>顽皮狗引擎<br>Unreal Engine<br>2）还有一堆开放源代码的渲染引擎，有兴趣的同学可以下载下来尝试下：<br>OGRE、Irrlicht、Panda3D、Crystal Space、jME、Blender Game Engine、Reality Factory、The Nebula Device 2、RealmForge、OpenSceneGraph</p><p>何谓引擎：</p><p>　　这些引擎都是基于计算机操作系统API和显卡驱动接口构建的，目的是方便上层应用开发人员快速生产内容，在引擎和操作系统之间，其实普遍还有一层中间件，基础图形接口：<br>　　在windowsPC和移动操作系统上，是directx基础图像api<br>　　在工业领域，在linux、苹果PC和IPhone上，在安卓操作系统上，是一系列OpenGL基础图形接口（移动端为opengl es，是简化的opengl版本）<br>　　几乎所有引擎都是基于上述两者或者其中之一进行构建的。</p><p>4.最主流的VR开发引擎<br>上述引擎由于其难易程度，功能完善度，开发成本等原因，在经历了长时间的兴衰过程后，目前最为流行和最适合开发VR内容的三大引擎为：</p><p>Unity    Unreal Engine    CryEngine<br>在手机游戏爆发的时代，迅速崛起，成为开发游戏最多最为流程的引擎</p><p>，其主要特点为：</p><p>不开源</p><p>上手容易</p><p>多平台开发容易</p><p>目前的unreal第四代版本大有青出于蓝之势，依然是引擎中的No.!。</p><p>其特点简单归纳为：</p><p>开放源代码</p><p>软件体系完整，不太需要额外插件。</p><p>视觉表现和功能都极为强大</p><p>上手入门不易</p><p>最牛逼的孤岛引擎了，其代表作在效果上，大部分人认为比unreal更强，其特点概括为：</p><p>开放源代码</p><p>编辑器强大</p><p>入门难</p><p>三多：插件多、资源多、文档多    文档不少    文档并不多<br>上述三种引擎对VR的支持力度如何？</p><p>上述三大引擎在不同程度上，已经内置对VR的支持;</p><p>Unity    Unreal Engine    CryEngine<br>内置 SteamVR插件<br>内置OSVR插件<br>内置SteamVR插件</p><p>内置OSVR插件</p><p>内置OSVR插件<br>有了上述引擎提供的SteamVR和OSVR插件原生支持，开发者无需担忧跟不上VR眼镜中功能API和设备本身的发展变化，可利用插件打造兼容不同设备的虚拟现实体验。</p><p>teamVR插件是什么？</p><p>SteamVR 是Value公司的一个VR 游戏平台，其开源SDK 是，OpenVR，OpenVR SDK是由原本的SteamWorks SDK更新而来，其包含对几大VR设备的支持和封装，这样开发者可以不用面对具体的设备接口，而只需要面对 OpenVR SDk的统一接口了，该SDK 包含了对HTC VIVE和Oculus Rift开发者版本的支持，也包含Steam VR的控制器及定位设备的支持。相关的API是以C++实作，已有C++经验的开发人员可以直接 学习。</p><p>OSVR插件是什么?</p><p>雷蛇及其合作伙伴联合创建了一个虚拟现实开放式平台：OSVR开源虚拟现实系统(Open-Source Virtual Reality)。OSVR旨在支持软件插件(Unity 3D、虚幻引擎4和英雄引擎(HeroEngine)、输入硬件(Sixsense和Leap Motion等)及其他虚拟现实的设备，包括Oculus rift DK2和Vrvana Totem。</p><p>有了上述主流引擎和专用VR插件，那么你就可以开始学习VR开发了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VR技术原理分析，【VR原理入门理论篇】，学习研究VR技术必须要了解的理论知识。&quot;&gt;&lt;a href=&quot;#VR技术原理分析，【VR原理入门理论篇】，学习研究VR技术必须要了解的理论知识。&quot; class=&quot;headerlink&quot; title=&quot;VR技术原理分析，【VR
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/vr/VR发展前景展望</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/vr/VR%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF%E5%B1%95%E6%9C%9B/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/vr/VR%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF%E5%B1%95%E6%9C%9B/</id>
    <published>2020-04-22T13:37:17.415Z</published>
    <updated>2020-04-22T14:53:40.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VR发展前景展望"><a href="#VR发展前景展望" class="headerlink" title="VR发展前景展望"></a>VR发展前景展望</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>随着计算机技术的飞速发展，虚拟现实也在短时间内经历了萌芽探索到飞速发展完善的转变。由于其独特的沉浸式体验，VR的前景被大多数人看好，更多的VR相关技术也在为让人能更完美的融合到这个虚拟的世界做出努力【1】，当然与此同时也有少部分人指出当下VR的发展还远远没有达到我们认识的水平，它依然摆脱不了诸多的限制【2】。但不论如何，它还是在不断的向前发展。<br>那么在这样是技术面前，我们将何去何从？它又会给我们的社会带来什么样的影响？</p><h2 id="上界和下界"><a href="#上界和下界" class="headerlink" title="上界和下界"></a>上界和下界</h2><p>如果说想象力是创新的原动力【3】，那么我在想，是不是反过来，根据现有的故事和猜测，可以预测出未来这项技术的走向？回望过去，其实很多技术应用层面的发展都曾出现在科幻小说家的笔下。VR发展早在半个多世纪之前就见之于作家笔端【4】。原子弹爆炸这种事情也曾偶然的被科幻小说家言中【5】。<br>那么我尝试从描述虚拟现实的作品，来看看虚拟现实可能的发展区间以及人们对这项技术的考虑。</p><p>上界往往是各大公司呈现给我们的，比如HoloLens。VR或是MR这些技术无缝隙的接入人们的生活，让一切都能智能化，人们能够体验到更加便捷的自主的生活。此外虚拟的世界会营造出全新的关系，而这关系相比起传统的人际关系在人类的生活中会占据更大的比例，也会带来不一样的奇遇，像是《刀剑神域》、《头号玩家》之类的影视作品就描述了在一个虚拟世界的冒险经历。虚拟和现实相互融合，人们在这两者的交叉地带中选择，实现更大的自由。这也是对VR 的乐观预测者，VR带给我们的沉浸式体验所指向的未来。<br>下界则显得各不相同。最简单粗暴的预测是VR性爱造成人类灭绝的【6】。更多文学作品对人类未来的思考显得更加深沉并具有更强的艺术感染力，比如赛博朋克风格的作品。《银翼杀手》和《攻壳机动队》都在思考记忆和人的关系，像《盗梦空间》更是体现出对于人无法区分界定虚拟和现实的恐慌，而这个问题肯定也是虚拟现实所会带给人的一个直接的挑战。此外还有不少作品直接的描述了VR设备，短片《恐怖谷》描述的被社会遗弃的人陷入不自知的杀戮和被利用，而《怀旧者》里这个虚拟的世界被主人公用以逃避这个糟糕的现实。这些悲观主义者对着虚拟现实有着隐隐的担忧，并更能引起人本性的拷问。这些关于虚拟现实的负面预测，有一半是这项技术本身带来的冲击，还有一半是不妥善的利用这个技术的人带来的。</p><p>而根据发展来看，最后的结果往往会在这两者的之间取一个平衡。因为商业宣传需要足够强的吸引力才能达到好的营销目的，而影视文学作品则需要足够强的冲突才能维系生命力，这两者可能都会是一种倾向于极端的表达。<br>所以我倾向于取一种折中——或许它就是一项有意思的，能拓宽我们视野的工具。可能暂时做不到那么好，但是也做不到那么差。<br>回顾我们科技发展的过程。互联网发展到现在，并没有完全的被碎片化消息埋没。而手机通讯也并没有完全的颠覆旧有的交流方式。它们的发展并没有我们想象的那么极端。因此我觉得也有理由相信，虚拟现实的发展不会完全的负面。而它也不会取代真实的世界，因为人类的独特有一部分在于我们对于真理的求索。虚拟的世界无法建构起完整的有血有肉的历史，而且它的规律模型也远远落后于科技前沿的认识。不管怎么说，肯定有一部分人会执着于探索这个世界一些最本真的东西。<br>而具体它能做到多好，或许还需要时间来告诉我们。<br>在接受这一技术的同时，保持思考，保持独立和警醒，这才是我们该做的。</p><h2 id="认知冲击"><a href="#认知冲击" class="headerlink" title="认知冲击"></a>认知冲击</h2><p>我不认为单靠现在的虚拟现实技术会直接的带来人们对自身身份认知的改变，因为能够影响人对自身认知的只有自己——这种改变的触发因素应该是更加接近人的生活的东西，而不是以现在的这种形式。就好像电脑游戏，你说它改变了吧，它也确实改变了一部分人，但是也有一部分人就是对这个东西不感兴趣甚至从来没有打过游戏。这种可有可无的改变是很难说是对人类共同命运的体现。<br>但是无法否认未来的虚拟现实，以及虚拟现实所带来的各种技术的推动和发展，所可能带来的冲击。</p><p>在我的设想里，既然虚拟现实能够让我们身处异地——那么也许，不想挤地铁的人们会发明VR办公。人们并不需要再真实的赶往另一个地方，而由虚拟人物来进行这些工作，人们只需要在家里戴上VR设备进行操作。<br>那么一旦这样，人们能够收集大量关于某个特定工作的数据量。如果能够妥善的对这些数据进行分析的话，或许出现在公司的这个虚拟人物就不再需要由具体的某个人去操作。AI能够代替完成很多重复的内容。比如老师可以由AI来重复之前训练过的内容，而只需要在某些需要交流，或是需要对课堂环境进行应急处理的时候才需要由人工来控制。<br>这样适应某一个分工的AI会比一个精通各个方面的AI方便训练很多，而且现有的工作基本大部分会依靠电脑等信息化媒介，而对于AI来说处理这部分的信息也会比处理图形等信息容易很多。这样那些相对较为机械的岗位的工作量会大大下降，带来的结果大概是工作门槛的提高。<br>这样的情况下，很难预测到会发生什么。因为失业率上升往往是一个动荡而不好的词汇。或许知识技能的两级分化会更加严重，或许会带来新的暴动和危机。<br>或许那个时候社会水平已经足够大部分人不工作靠保险金生活。但是工作在人的社会价值中存在着与众不同的地位。现代人会把办公室的工作比作西绪弗斯永不停息而又毫无意义的劳作。那么如加缪的认识：如果一个人不推石头了，那又用什么来证明他的存在呢？当人发现自己“推石头”的工作被取代的时候，人又该如何定位自己的存在和价值？</p><p>还有一个问题是刚刚提到的AI。<br>AI除了能够替代人们进行工作之外，还能在娱乐、社交等方面渗透入我们的生活。寄托于虚拟现实的AI会更加的虚实难辨。因为脱离了硬件的限制，AI更加的容易在虚拟的世界中混入人群，给人提供真实的错误印象。当然这不能说完全是弊端，至少这种情况下进行图灵测试会更加的容易。但是人类对AI的认识，由机器人到身边的虚拟角色应该还是会有一定的变化的。聊天机器人比如微软小冰或者是Replika，都很容易引起人们对其的好感。维森鲍姆作为第一个构造聊天机器人的人，人们对机器人的喜爱让他极度的不安并最终扼杀了这个研究项目【7】。即使如此，聊天机器人还是发展了起来。而想到虚拟现实的发展，能够给这些聊天机器人确定的形象和外观，并且可以进行肌体的真实互动，这对于人来说，可能更容易沦陷进去。像之前提到的电影《怀旧者》那样，父亲并不愿意接受失去自己孩子的事实，而是不断的沉迷于虚拟的环境。我不能判断这种关系给人的影响是利大于弊还是弊大于利，但我认为必定会对人，或是人与人之间的关系带来重大的的变革。</p><p>时至今日，我们还无从得这些技术会用怎么样的方式发展，他又会用怎么样的方式融入我们的生活，但是我知道它必将影响人对自身的认识。</p><h2 id="创造性破坏"><a href="#创造性破坏" class="headerlink" title="创造性破坏"></a>创造性破坏</h2><p>虽然说虚拟现实带来的连锁反应可能会带来人认知的革新，但并不意味着我们应该回避这种影响。<br>我更喜欢称这种影响是一种“创造性破坏”。<br>这个词的本意是企业家不断的打破旧的市场均衡，而在构建新的规则的动态过程中，实现经济的增长。或许VR对于投资者来说就是这样的一个破坏的机会。但在这里我想表达的意思是，其实人的认知也是一个这样“破而后立”的过程。<br>或许那些曾经看起来新的开拓性的事情，到后来会逐渐的被人们接纳。大到科学驱逐上帝，人们在担心旧有的秩序崩坏。小到当电脑游戏刚刚发展起来的时候，人们在担心影响孩子的成长。但是这些在现在看来都习以为常，或许几十年后，对于孩子们看着老人对于虚拟的排斥，就好像我们看着爷爷奶奶不愿用QQ、微信那种感觉吧。<br>因而我们在分析产品的未来的时候，应该考虑到人对这个世界惊人的适应性。科技的发展史也是人类自身的发展史。或许今天一个人处理的信息量是百年前的人所无法想象的。我们能够适应这个信息爆炸的年代，并能够在这个情况下接着一步步向前迈进——这确实是一种足以让人自豪的高贵。</p><p>当然相信人能适应技术的发展，不代表我们对于技术应该处于一种等待的围观的状态。在现有的情况下，我们需要积极主动的去适应这种变化，而不是真的如同自然选择一样等待自然修正。<br>相关的规定制度也是需要我们考虑到的。或许有关部门需要联合心理学家，通过妥善的立法，来避免VR对人的认知行为带来不良影响，以发挥这个虚拟空间的心理的作用【8】。这个领域绝对不是一个可以放任发展的领域，需要时刻对人在其中的反应加以控制。毕竟这是一个如此真实的梦境。<br>就算仅仅是游戏，对人也已经可以产生非常的巨大的影响。像蓝鲸游戏能够造成大量的自杀案件，如果不控制得当的话，虚拟现实的这方面的事件只能引起更多的争议。而且VR的本身就大规模应用于军事训练，也就是说如果虚拟现实中的枪击等事件能够达到真实的程度，很容易就能埋下暴力的引子。</p><p>不论如何，被技术所可能带来的悲惨前景束缚都是不可取的。“密涅瓦的猫头鹰总在黄昏之后起飞。”从这个角度看起来，我们或许只有真实的经历了VR在内的科技发展所带来的一切变化，才能建构起完整的对这一项技术、以及人类自身的认识。愿我们有足够的信心和勇气来迎接虚拟现实所可能会带来的变化和革新。</p><p><strong>参考文献</strong><br>【1】 <a href="https://medium.com/futurepi/predictions-whats-next-for-vr-mr-2c9663d58c46" target="_blank" rel="noopener">https://medium.com/futurepi/predictions-whats-next-for-vr-mr-2c9663d58c46</a><br>【2】 <a href="https://www.cnet.com/news/its-time-to-break-up-with-vr/" target="_blank" rel="noopener">https://www.cnet.com/news/its-time-to-break-up-with-vr/</a><br>【3】 <a href="http://thinkbusiness.nus.edu/article/imagination-as-the-driver-of-innovation/" target="_blank" rel="noopener">http://thinkbusiness.nus.edu/article/imagination-as-the-driver-of-innovation/</a><br>【4】 <a href="http://www.iheima.com/zixun/2016/0613/156475.shtml" target="_blank" rel="noopener">http://www.iheima.com/zixun/2016/0613/156475.shtml</a><br>【5】 <a href="https://zh.wikipedia.org/zh-hans/%E7%A7%91%E5%B9%BB%E5%B0%8F%E8%AA%AA%E9%BB%83%E9%87%91%E6%99%82%E4%BB%A3" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/%E7%A7%91%E5%B9%BB%E5%B0%8F%E8%AA%AA%E9%BB%83%E9%87%91%E6%99%82%E4%BB%A3</a><br>【6】 <a href="https://zhuanlan.zhihu.com/p/24639024" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24639024</a><br>【7】 <a href="http://tech.163.com/18/0202/07/D9KE3A5L00097UDT.html" target="_blank" rel="noopener">http://tech.163.com/18/0202/07/D9KE3A5L00097UDT.html</a><br>【8】 <a href="http://www.xinhuanet.com/newmedia/2017-09/18/c_136617421.htm" target="_blank" rel="noopener">http://www.xinhuanet.com/newmedia/2017-09/18/c_136617421.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VR发展前景展望&quot;&gt;&lt;a href=&quot;#VR发展前景展望&quot; class=&quot;headerlink&quot; title=&quot;VR发展前景展望&quot;&gt;&lt;/a&gt;VR发展前景展望&lt;/h1&gt;&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/vr/分析VR技术发展现状与未来发展的四大趋势</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/vr/%E5%88%86%E6%9E%90VR%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6%E4%B8%8E%E6%9C%AA%E6%9D%A5%E5%8F%91%E5%B1%95%E7%9A%84%E5%9B%9B%E5%A4%A7%E8%B6%8B%E5%8A%BF/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/vr/%E5%88%86%E6%9E%90VR%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6%E4%B8%8E%E6%9C%AA%E6%9D%A5%E5%8F%91%E5%B1%95%E7%9A%84%E5%9B%9B%E5%A4%A7%E8%B6%8B%E5%8A%BF/</id>
    <published>2020-04-22T13:37:17.414Z</published>
    <updated>2020-04-22T14:53:40.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分析VR技术发展现状与未来发展的四大趋势"><a href="#分析VR技术发展现状与未来发展的四大趋势" class="headerlink" title="分析VR技术发展现状与未来发展的四大趋势"></a>分析VR技术发展现状与未来发展的四大趋势</h1><p>引言</p><p>虚拟现实是新生代的信息交互技术，今年来，它不断发展和完善，迅速在各个领域和行业都得到了广泛应用，对人们的知觉体验有着良好的增强作用。对VR技术来说，它的基本特点就是将计算机仿真、智能传感器与图形显示等多种科学技术结合起来，并用于与人类真实世界感知方式完全一样的虚拟空间的创建，给予用户沉浸式的体验。本文的主要内容是简单概括VR技术的基本原理和发展现状，并且提出了此项技术未来发展前景的美好愿望。</p><p>一、VR设备的基本原理<br>虽然各行各业都会用到VR技术，但是最为平常的还是在各大行业中的综合应用。在地产漫游行业，VR技术可以直接进行报批，大大减少沟通的成本，提高工作效率，因此，其在房产销售方面表现突出，飞速发展。其工作的原理就是开发商利用虚拟现实技术，在地产漫游中任意的进行图片或片段的截取，从而进行广告的制造，客户在地产漫游虚拟现实系统中沉浸在真实感极高的房产中，身临其境的去感受，从而促进双方达成合意，进行交易，高效低成本，实现双赢。有研究显示，有虚拟现实技术的房产漫游访问率和购房的效果增加了30%以上，效果显著。甚至在奥运会，世博会期间，我国的VR技术登上国际舞台，获得国内外的一致好评。其次，在虚拟样板间、多类型车辆的行驶、空间布置、设计虚拟演示等方面应用的比较广泛，深入。其实我们VR技术在生活中有很多运用，比如电影中我们看到的许多特技，就是通过VR技术完成的，给观众带来了更震撼的视觉效果。</p><p>二、VR技术以及现状<br>1.VR技术的基本概念</p><p>VR又名虚拟现实技术，最早出现在美国。20世纪80年代初，美国VPL公司创建人拉尼尔首次提出VR技术。虚拟现实技术是一种综合利用计算机图形系统和各种现实及控制等接口设备，在计算机上生成的、可交互的三维环境中用于给予用户关于视觉、听觉、嗅觉、味觉、触觉等感官的模拟沉浸感觉的技术。当下，VR技术在计算机图像、网络技术、分布计算技术等多个领域应用广泛，如今网络上的视频会议也是此技术的应用，同时，VR技术对新产品的开发也有着卓越的贡献。VR技术低成本、高效率、超高传输速度的优点有利于社会经济和生产力的发展，我国和许多外国国家开始关注此项技术，VR技术发展前途一片光明。<br>2.虚拟现实技术的特征介绍</p><p>多感知性的特征，是指视、力、触、运动、味、嗅等感知系统，就人类理想的虚拟现实技术的发展而言，是希望可以将现实中所有的感知完整的模拟出来，但由于现在所掌握的技术有限，仅仅只能模拟出视、力、触、运动、味、嗅等感知系统。</p><p>交互性，是指当人处于虚拟世界时，依然可以像在现实中一样，通过触碰、使用某些具体物品，感受到所用物品的重量，形状，颜色等存在于人与物品之间的互动信息。</p><p>构想性，指人处于虚拟世界，将所想的物品所做的事情展现在虚拟世界里，想象这样做，或者那样做，分别能达到什么样的效果，甚至在虚拟世界中还可以把在现实世界不可能存在的事和物都呈现出来。</p><p>分析VR技术发展现状与未来发展的四大趋势</p><ol start="3"><li>VR技术发展现状</li></ol><p>（1）美国研究VR技术发展现状</p><p>由于VR技术起源于美国，所以美国拥有主要的VR技术研究机构，其中NASA Ames实验室是VR技术的出生地，它引领着VR技术在世界各国发展壮大。美国实验室在20世纪80年代已经开始基础研究空间信息领域，在80年代的中期创建了虚拟视觉环境研究工程，随后又创建了虚拟界面环境工作机构。目前，虚拟行星探索是美国VR技术研究机构的重点研究目标，此项研究的重点内容就是通过虚拟技术放在对于遥远行星的研究工作中。举个例子，波音公司所生产的波音777运输机在设计中使用的就是全无纸化设计模式，以VR技术为设计基础，设计人员通过虚拟环境加工波音777运输机上的工件，使加工流程大大缩减。</p><p>（2）VR技术在欧洲的发展现状</p><p>当下，欧洲的英国研究公司所研究设计的DVS系统中带领着一些VR技术在各领域实际应用中的标准化，并且该公司还为VR技术在实际编辑中设计了先进的环境编辑语言。由于编辑语言不一样，其在实际应用中的操作模型也都不一样，但与编辑语言一一对应。所以，DVS系统在进行不一样的操作流程时，虚拟现实技术就会展现不一样的功能。对VR技术某些方面研究工作，英国处在较前列，尤其是对于VR技术的处理、辅助设备设计研究方面较为突出。</p><p>（3）国内VR技术发展现状</p><p>与世界发达国家相比，在对于VR技术研究时间及成果上我国是比较落后的。在我国计算机技术等先进技术飞速发展和进步的同时，我国各行业越来越关注虚拟现实技术，VR技术在我国国内的研究也更加广泛和深刻。在我国科委国防科工委部的要求下， VR技术已经成为国家科研工程中的核心工程， VR技术研究工作也得到了各大科研机构及高校的认可和助力，其研究成果也极其显著。比如，作为我国最早参与到VR技术的高校，北京航空航天大学对于VR技术研究也比较具有的权威性和专业性，主要进行VR技术中的三维动态数据库及分布式虚拟环境等方面研究的工作以及对VR技术中物体特点的处理模式的探索。</p><p>4.VR技术的应用范围</p><p>从VR技术被提出、应用到现在，几十年过去了，其被应用于越来越多的行业和领域，。比如在医学领域，VR技术可以被用来做模拟手术，使现实中的手术成功率大大提高，保障了病人的生命安全。除此之外，VR技术在军事，科技，商业，建筑，娱乐，生活等方面都有应用。</p><p>三、对VR技术的发展的前景展望<br>随着虚拟现实内容日渐丰富，商业模式更加多样化，虚拟现实也将会变得更加主流。而虚拟现实的未来发展趋势也备受业内关注，从目前来看，虚拟现实行业拥有四大发展趋势，相信很多人看过虚拟现实发展趋势会觉得虚拟现实是非常值得投资的。</p><p>1、更多的360度全景内容出现</p><p>分析VR技术发展现状与未来发展的四大趋势</p><p>360度全景内容要比常规的视频和内容更容易获得关注，这一数据是根据对1000多个广告系列的视频点击数和总体参与度分析的结果。VR可以为人们带来身临其境的真实感，所以很多看房、服装、家装等行业都在运用。VR城市全球联营平台的商家都已经通过拍摄360度全景视频进行宣传，在未来，大家会看到更多的360度全景VR内容。</p><p>2、广告会更多的采用VR的形式</p><p>分析VR技术发展现状与未来发展的四大趋势</p><p>其实最近这种例子已经越来越多：去年谷歌制作了一些VR虚拟现实广告、英菲尼迪与OmniVirt合作，让客户通过360度全景VR体验虚拟驾驶Q60等等。虽然这些只是VR营销的几个例子，但是显然在今年我们将会看到更多VR的广告，而这些广告将会推动VR虚拟现实的发展。</p><p>3、更身临其境的体验</p><p>分析VR技术发展现状与未来发展的四大趋势</p><p>最近，HEAR360就表示他们可能会使用全新的全向麦克风来捕捉360度的声音，以带来更加逼真的音效体验，换言之，带来更真实的体验。拥有更加身临其境的体验，虚拟世界与现实世界的差别将会缩到更小。而更加方便、智能的虚拟世界将会大火，所以，入住在VR虚拟现实尝试全球联营平台你便拥有全世界。</p><p>4、提高VR产品的可用性并降低成本</p><p>分析VR技术发展现状与未来发展的四大趋势</p><p>无论是软硬件，只有当产品容易被用户接受时，才能变成主流。然而现在，特别是高端的设备，每个人都需要花费数千美元，普通人根本买不起。而在今年这一切将会改变，VR产品将变得更加开放，一系列产品会有一个渐进的价格调整过程，让大众都负担的起。</p><p>结语</p><p>VR虚拟现实行业已经越来越成熟，而且发展也日渐成熟，从虚拟现实发展趋势来看，VR虚拟现实行业是非常值得投资的，而且VR的发展潜力也是巨大的，相信未来虚拟现实还会为人们带来更多的惊喜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分析VR技术发展现状与未来发展的四大趋势&quot;&gt;&lt;a href=&quot;#分析VR技术发展现状与未来发展的四大趋势&quot; class=&quot;headerlink&quot; title=&quot;分析VR技术发展现状与未来发展的四大趋势&quot;&gt;&lt;/a&gt;分析VR技术发展现状与未来发展的四大趋势&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/iot/物联网-认识物联网</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/iot/%E7%89%A9%E8%81%94%E7%BD%91-%E8%AE%A4%E8%AF%86%E7%89%A9%E8%81%94%E7%BD%91/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/iot/%E7%89%A9%E8%81%94%E7%BD%91-%E8%AE%A4%E8%AF%86%E7%89%A9%E8%81%94%E7%BD%91/</id>
    <published>2020-04-22T13:37:14.540Z</published>
    <updated>2020-04-22T14:53:40.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物联网-认识物联网"><a href="#物联网-认识物联网" class="headerlink" title="物联网-认识物联网"></a>物联网-认识物联网</h1><h1 id="初探物联网"><a href="#初探物联网" class="headerlink" title="初探物联网"></a>初探物联网</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190118120848449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt="">)<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190118120944234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt="">)<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190118120955590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt="">)<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190118121009850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt=""></p><h1 id="物联网来源"><a href="#物联网来源" class="headerlink" title="物联网来源"></a>物联网来源</h1><p>Mark Weiser（1952-1999） 前施乐公司首席科学家</p><p>1991年在权威杂志《美国科学》发表文章预测： 计算机将最终“消失”，演变为在我们没有意识到其存在时，就已融入人们的生活中的境地。</p><h1 id="物联网（The-Internet-of-things，IOT）的基本定义"><a href="#物联网（The-Internet-of-things，IOT）的基本定义" class="headerlink" title="物联网（The Internet of things，IOT）的基本定义"></a>物联网（The Internet of things，IOT）的基本定义</h1><p>通过射频识别（RFID）、红外感应器、全球定位系统、激光扫描器等信息传感设备，按约定的协议，将任何物品通过有线与无线方式与互联网连接，进行通信和信息交换，以实现智能化识别、定位、跟踪、监控和管理的一种网络。</p><h1 id="物联网的理解"><a href="#物联网的理解" class="headerlink" title="物联网的理解"></a>物联网的理解</h1><p>物联网是通过各种传感技术（RFID、传感器、GPS、摄像机、激光扫描器……）、各种通讯手段（有线、无线、长距、短距……），将任何物体与互联网相连接，采集其声、光、热、电、力学、化学、生物、位置等各种需要的信息，与互联网结合形成的一个巨大网络。其目的是实现物与物、物与人，所有的物品与网络的连接，进而实现“管理、控制、营运”一体化的一种网络。</p><h1 id="“物”的范围"><a href="#“物”的范围" class="headerlink" title="“物”的范围"></a>“物”的范围</h1><p>这里的“物”要满足以下条件才能够被纳入“物联网”的范围：</p><p>1、要有数据传输通路；</p><p>2、要有一定的存储功能；</p><p>3、要有CPU；</p><p>4、要有操作系统；</p><p>5、要有专门的应用程序；</p><p>6、遵循物联网的通信协议；</p><p>7、在世界网络中有可被识别的唯一编号。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/201901181215458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt=""></p><h1 id="物联网的三个层次"><a href="#物联网的三个层次" class="headerlink" title="物联网的三个层次"></a>物联网的三个层次</h1><ul><li>感知层</li><li>网络层</li><li>应用层</li></ul><p><strong>感知层</strong>：据采集与感知主要用于采集物理世界中发生的物理事件和数据，包括各类物理量、标识、音频、视频数据。物联网的数据采集涉及传感器、RFID、多媒体信息采集、二维码和实时定位等技术。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2019011812183086.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt=""></p><p><strong>网络层</strong>：实现更加广泛的互联功能，能够把感知到的信息无障碍、高可靠性、高安全性地进行传送，需要传感器网络与移动通信技术、互联网技术相融合。经过十余年的快速发展，移动通信、互联网等技术已比较成熟，基本能够满足物联网数据传输的需要。</p><p><strong>应用层</strong>：应用层主要包含应用支撑平台子层和应用服务子层。其中应用支撑平台子层用于支撑跨行业、跨应用、跨系统之间的信息协同、共享、互通的功能。应用服务子层包括智能交通、智能医疗、智能家居、智能物流、智能电力等行业应用。</p><h2 id="物联网三个重要特征："><a href="#物联网三个重要特征：" class="headerlink" title="物联网三个重要特征："></a>物联网三个重要特征：</h2><h2 id="1、全面感知，利用RFID，传感器，二维码等随时随地获取物体的信息，比如-装载在高层建筑、桥梁上的监测设备；-人体携带的心跳、血压、脉搏等监测医疗设备；-商场货架上的电子标签；"><a href="#1、全面感知，利用RFID，传感器，二维码等随时随地获取物体的信息，比如-装载在高层建筑、桥梁上的监测设备；-人体携带的心跳、血压、脉搏等监测医疗设备；-商场货架上的电子标签；" class="headerlink" title="1、全面感知，利用RFID，传感器，二维码等随时随地获取物体的信息，比如 装载在高层建筑、桥梁上的监测设备； 人体携带的心跳、血压、脉搏等监测医疗设备； 商场货架上的电子标签；"></a>1、全面感知，利用RFID，传感器，二维码等随时随地获取物体的信息，比如 装载在高层建筑、桥梁上的监测设备； 人体携带的心跳、血压、脉搏等监测医疗设备； 商场货架上的电子标签；</h2><h2 id="2、可靠传递，通过各种电信网络与互联网的融合，将物体的信息实时准确地传递出去；"><a href="#2、可靠传递，通过各种电信网络与互联网的融合，将物体的信息实时准确地传递出去；" class="headerlink" title="2、可靠传递，通过各种电信网络与互联网的融合，将物体的信息实时准确地传递出去；"></a>2、可靠传递，通过各种电信网络与互联网的融合，将物体的信息实时准确地传递出去；</h2><h2 id="3、智能处理，利用云计算，模糊识别等各种智能计算技术，对海量的数据和信息进行分析和处理，对物体实施智能化的控制。"><a href="#3、智能处理，利用云计算，模糊识别等各种智能计算技术，对海量的数据和信息进行分析和处理，对物体实施智能化的控制。" class="headerlink" title="3、智能处理，利用云计算，模糊识别等各种智能计算技术，对海量的数据和信息进行分析和处理，对物体实施智能化的控制。"></a>3、智能处理，利用云计算，模糊识别等各种智能计算技术，对海量的数据和信息进行分析和处理，对物体实施智能化的控制。</h2><h1 id="物联网核心技术"><a href="#物联网核心技术" class="headerlink" title="物联网核心技术"></a>物联网核心技术</h1><p>包括射频识别(RFID)装置、WSN 网络、红外感应器、全球定位系统、Internet 与移动网络，网络服务，行业应用软件。在这些技术当中，又以底层嵌入式设备芯片开发最为关键，引领整个行业的上游发展。</p><p><strong>无线射频识别技术（Radio Frequency Identification,RFID）</strong>，或称射频识别技术，是从二十世纪90年代兴起的一项非接触式自动识别技术。它是利用射频方式进行非接触双向通信，以达到自动识别目标对象并获取相关数据，具有精度高、适应环境能力强、抗干扰强、操作快捷等许多优点。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190118122308274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt="">)<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190118122345545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt=""></p><p>与目前广泛使用的自动识别技术例如摄像、条码、磁卡、IC卡等相比，射频识别技术具有很多突出的优点：</p><ol><li>非接触操作，长距离识别(几厘米至几十米)，完成识别工作时无须人工干预，应用便利</li><li>无机械磨损，寿命长，可工作于各种油渍、灰尘污染等恶劣的环境</li><li>可识别高速运动物体并同时识别多个电子标签</li><li>数据安全方面除电子标签的密码保护外，数据部分可用一些算法实现安全管理</li><li>读写器具有不直接对最终用户开放的物理接口，保证其自身的安全性</li><li>读写器与标签之间存在相互认证的过程，实现安全通信和存储</li></ol><p><strong>IPV6</strong></p><ul><li>物联网的前提是必须为物品赋以独一无二的地址</li><li>现有标准IPv4只支持大概40亿（232次方）个网络地址，平均每个人不到1个，人都不够分的。</li><li>IPv6是互联网协议第四版（IPv4）的更新版</li><li>Pv6支持2^128（约3.4 ×1038）个地址，这等价于在地球上每平方英寸有4.3×1020地址（6.7×1017地址／mm2）</li><li>丰富的地址资源使得物联网成为可能。</li></ul><p><strong>WSN</strong></p><p>传感器：能感受规定的被测量并按照一定的规律转换成可用信号的器件或装置，通常由敏感元件和转换元件组成 。</p><p>无线传感器网络（WSN）是由大量传感器节点通过无线通信方式形成的一个多跳的自组织网络系统，其目的是协作地感知、采集和处理网络覆盖区域中感知对象的信息，它能够实现数据的采集量化、处理融合和传输应用。</p><p><strong>WSN/ZigBee技术</strong></p><p>无线传感网络内的各个要素通过一个统一的协议进行信息的传输，这个协议就是ZigBee。 ZigBee是IEEE 802.15.4协议的代名词。根据这个协议规定的技术是一种短距离、低功耗的无线通信技术。 无线传感器网络 Wireless Sensor Networks 包含传感器节点，按计算能力可分为普通节点和汇聚节点等； 传感器节点包含了具有采集环境数据功能的感应器和具有联网功能的电子元件； 节点间能够通过特有无线通信方式互联（如：ZigBee）。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190118123148241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt=""></p><h1 id="物联网应用示意图"><a href="#物联网应用示意图" class="headerlink" title="物联网应用示意图"></a>物联网应用示意图</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2019011812321087.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA3OTY1Ng==,size_16,color_FFFFFF,t_70"  alt=""></p><h1 id="影响物联网发展的五大因素"><a href="#影响物联网发展的五大因素" class="headerlink" title="影响物联网发展的五大因素"></a>影响物联网发展的五大因素</h1><ul><li>个人隐私与数据安全 –安全因素的考虑会影响物连网的设计，避免个人数据受窃听受破坏的威胁。除此之外，专家称物联网的发展会改变人们对于隐私的理解，以最近的网络社区流行为例，个人隐私是公众热议的话题。</li><li>公众信任 —信息安全目前是广大群众对物联网的主要关注点。如果物联网的设计没有健全的安全机制，会降低公众对此信任。所有在设计物联网之初，就有必要考虑的安全层面。</li><li>标准化 —标准化无疑是影响物联边普及的重要因素。目前 RFID，WSN 等技术领域还没有一套完整的国际标准，各厂家的设备往往不能实现互操作。标准化将合理使用现在标准，或者在必要时创建新的统一标准。</li><li>研究发展 —物联网相关技术仍处在不成熟阶段，需要各国政府投入大量资金支持科研，技术转化。</li><li>系统开放–物联网的发展离不开合理的商业模型运作和各种利益投资。对物联网技术系统的开放，将会促进应用层面的开发和各种系统间的互操作性。8</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;物联网-认识物联网&quot;&gt;&lt;a href=&quot;#物联网-认识物联网&quot; class=&quot;headerlink&quot; title=&quot;物联网-认识物联网&quot;&gt;&lt;/a&gt;物联网-认识物联网&lt;/h1&gt;&lt;h1 id=&quot;初探物联网&quot;&gt;&lt;a href=&quot;#初探物联网&quot; class=&quot;header
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/iot/9个顶级开发IoT项目的开源物联网平台</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/iot/9%E4%B8%AA%E9%A1%B6%E7%BA%A7%E5%BC%80%E5%8F%91IoT%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E6%BA%90%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/iot/9%E4%B8%AA%E9%A1%B6%E7%BA%A7%E5%BC%80%E5%8F%91IoT%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E6%BA%90%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/</id>
    <published>2020-04-22T13:37:14.526Z</published>
    <updated>2020-04-22T14:53:40.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9个顶级开发IoT项目的开源物联网平台"><a href="#9个顶级开发IoT项目的开源物联网平台" class="headerlink" title="9个顶级开发IoT项目的开源物联网平台"></a>9个顶级开发IoT项目的开源物联网平台</h1><p>物联网（IoT）是帮助人工智能（AI）以更好的方式控制和理解事物的未来技术。 我们收集了一些最有名的物联网平台，帮助您以受控方式开发物联网项目。</p><p>物联网平台是帮助设置和管理互联网连接设备的组件套件。 一个人可以从一个系统远程收集数据，监控和管理所有连接互联网的设备。 物联网平台上有很多可用的在线平台，但为公司构建物联网解决方案都依赖于物联网平台主机和支持质量。</p><p>在这里，我们编译了一些最好的和着名的开源物联网（IoT）平台。 大多数这些平台都提供API来支持Linux开发板，如Raspberry Pi，Arduino和BeagleBone。</p><p>Kaa IoT Platform<br><a href="https://www.kaaproject.org/" target="_blank" rel="noopener">https://www.kaaproject.org/</a></p><p>它是功能丰富的开放和高效的物联网云平台。 任何物联网公司，物联网系统集成商或个人都可以免费实现其智能产品概念。 通过提供服务器和端点SDK组件，Kaa可以为连接的对象和后端基础架构提供数据管理。<br>Kaa关键物联网功能：</p><p>管理无限数量的连接设备<br>建立跨设备互操作性<br>执行A/B服务测试 （随机将测试用户群分为2部分，用户群1使用A方案，用户群2使用B方案，经过一定测试时间后，根据收集到的两方案样本观测数据，根据显著性检验结果选取最好方案。）<br>执行实时设备监控<br>执行远程设备准备和配置<br>收集并分析传感器数据<br>分析用户行为可提供有针对性的通知<br>为智能产品创建云服务</p><p>SiteWhere: Open Platform for the Internet of Things<br><a href="http://www.sitewhere.org/" target="_blank" rel="noopener">http://www.sitewhere.org/</a></p><p>Sitewhere的工作架构和整合的东西</p><p>它是提供设备数据的摄取，存储，处理和集成的另一个开源IoT平台。 SiteWhere运行在Apache Tomcat提供的核心服务器上。 它提供高度调整的MongoDB和HBase实现。 它可以轻松与黑客板集成。<br>SiteWhere关键的物联网功能：</p><p>在单个SiteWhere实例上运行任意数量的IoT应用程序<br>Spring提供了核心配置框架<br>用MQTT，AMQP，Stomp和其他协议连接设备<br>通过自注册，REST服务或批量添加设备<br>与第三方集成框架（如Mule AnyPoint）集成<br>默认的数据库存储是MongoDB<br>Eclipse Californium进行CoAP消息传递<br>InfluxDB用于事件数据存储<br>Grafana可视化SiteWhere数据<br>HBase用于非关系数据存储</p><p>ThingSpeak: An open IoT platform with MATLAB analytics<br><a href="https://thingspeak.com/" target="_blank" rel="noopener">https://thingspeak.com/</a></p><p>ThingSpeak是物联网（IoT）平台，可让您在不从Mathworks购买许可证的情况下分析和可视化MATLAB中的数据。 IT允许您收集和存储传感器数据并开发物联网应用程序。 它适用于Arduino，Particle Photon和Electron，ESP8266 Wifi模块，BeagleBone Black，Raspberry Pi，移动和网络应用，Twitter，Twilio和MATLAB，以将传感器数据传到ThingSpeak。 ThingSpeak主要关注传感器记录，位置跟踪，触发和警报以及分析</p><p>ThingSpeak开放源码物联网平台关键物联网特性</p><p>在私人渠道收集数据<br>与公共频道共享数据<br>RESTful和MQTT API<br>MATLAB分析和可视化<br>警报<br>事件调度<br>应用程序集成<br>全球社区<br>DeviceHive: IoT Made Easy<br><a href="https://www.devicehive.com/" target="_blank" rel="noopener">https://www.devicehive.com/</a></p><p>DeviceHive是另一种功能丰富的开源IoT平台，它在Apache 2.0许可下分发。 DeviceHive可以自由使用和更改。它提供了Docker和Kubernetes部署选项。您可以下载并使用公共云和私有云，也可以将单个虚拟机扩展到企业级群集。它可以通过REST API，WebSockets或MQTT连接到任何设备或黑客板。你甚至可以连接ESP8266这样的低端Wi-Fi设备。</p><p>DeviceHive开放源代码物联网平台的关键特性：</p><p>直接与Alexa整合<br>您选择的可视化仪表板<br>通过运行自定义JavaScript代码来自定义DeviceHive行为。<br>它支持大数据解决方案，如ElasticSearch，Apache Spark，Cassandra和Kafka，用于实时和批处理。<br>通过REST API，WebSockets或MQTT连接任何设备。<br>它带有Apache Spark和Spark Streaming支持。<br>支持用各种编程语言编写的库，包括Android和iOS库<br>它允许在设备数据之上运行批量分析和机器学习。</p><p>Zetta: API-First Internet of Things Platform<br><a href="http://www.zettajs.org/" target="_blank" rel="noopener">http://www.zettajs.org/</a></p><p>Zetta是一个基于Node.js构建的面向服务器的开源IoT平台。 Zetta结合了REST API，WebSockets和反应式编程。 它可以在单板计算机，个人电脑或云上运行，并且能够将诸如Linux，BeagleBones，Raspberry Pis，Arduino开发板和PC等不同平台与Heroku等云平台连接在一起，以创建地理分布式网络。 您还可以将数据传输到Splunk等机器分析平台。<br>Zetta开源的物联网平台的关键特性：<br>基于Node.js，REST，WebSockets和基于流的“响应式编程”构建。<br>支持广泛的开发板<br>Zetta允许您组装智能手机应用程序，设备应用程序和云应用程序</p><p>DSA: Open Source Platform &amp; “Toolkit” for Internet Of Things Devices<br><a href="http://www.iot-dsa.org/" target="_blank" rel="noopener">http://www.iot-dsa.org/</a></p><p>分布式服务体系结构（DSA）是一个开源的物联网平台，它将结构化和实时数据模型中的各个设备，服务和应用程序统一起来。它有利于分散设备的互通，逻辑和应用程序。 DSA社区构建了一个图书馆分布式服务链接，允许协议翻译和数据集成到第三方数据源和从第三方数据源进行数据集成所有DSA模块都很轻便，可以将DSBroker，多个DSLink和客户端Web应用程序连接到相同的低功率设备上，例如Raspberry PI，Beaglebone black或任何其他类似的计算平台。这个基于NodeAPI，DSLink和DSBroker的开源IoT平台。计划为第三方处理系统提供Analytics（分析）支持的DSA社区包括R Project，RDBMS，JDBC SQL passthrough和预准备语句，Haystack DSLink，Niagara DSLink，OS X DSLink，Windows DSLink和nix DSLink</p><p>DSA开源IoT平台的关键特性：</p><p>指定M2M授权生命周期<br>公开WebSocket / HTTP端点以订阅来自代理的节点和值更改<br>实施DSA查询DSL<br>硬件集成支持：Dreamplug，Beaglebone，Raspberry PI，Android DSLink，OS X DSLink，Windows DSLink和nix DSLink<br>该平台建立在三个<br>轻量级模块</p><p>Thingsboard.io Open-source IoT Platform<br><a href="https://thingsboard.io/" target="_blank" rel="noopener">https://thingsboard.io/</a></p><p>Thingsboard是100％开源的IoT平台，可以作为SaaS或PaaS解决方案托管它。 IT为您的物联网项目提供设备管理，数据收集，处理和可视化。 它支持提供设备连接的标准协议是MQTT，CoAP和HTTP，并支持云和本地部署。 它提供了30多个可自定义的小部件，允许您为大多数物联网用例构建最终用户自定义仪表板。</p><p>thingsboard.io开源的物联网平台主要特点：</p><p>实时数据可视化和远程设备控制<br>自定义仪表板的30个可定制小部件<br>可定制的规则，插件，小部件和传输实现<br>允许监视客户端和提供服务器端设备属性。<br>支持多租户安装即装即用。<br>支持MQTT和HTTP协议的传输加密。<br>失败的节点可以在没有停机的情况下进行更换</p><p>Thinger.io: The Opensource Platform for Internet of things<br><a href="https://thinger.io/" target="_blank" rel="noopener">https://thinger.io/</a></p><p>Thinger.io是IoT的开源平台，可为连接设备或物品提供可扩展的云基础架构。 您可以使用管理控制台轻松控制它们，或使用其REST API将它们集成到项目逻辑中。 IT支持所有类型的黑客板，如Arduino，ESP8266，Raspberry Pi，Intel Edison。</p><p>Thinger.io开源的物联网平台主要特点：</p><p>实时仪表板<br>Docker和IFTT集成<br>云准备好了<br>将服务器安装在您自己的云中，并使用开放源代码库连接您的设备。<br>WSo2- Open source platform for Internet of Things and mobile projects<br><a href="https://wso2.com/iot" target="_blank" rel="noopener">https://wso2.com/iot</a></p><p>WSo2 Build允许公开API来为移动应用提供支持，允许用户监控和控制他们的设备。 您可以将其与现有的身份系统集成，或使用他们的身份系统。 该物联网平台还支持几乎所有已知的开发板设备，如Raspberry Pi，Arduino Uno等。边缘计算由WSO2 Siddhi提供支持。</p><p>设备通信支持的协议包括MQTT，HTTP，Websockets和XMPP协议以及用于添加更多协议和数据格式的IoT Server Framework扩展。</p><p>WSo2开源的物联网平台主要特点：</p><p>通过WSO2数据分析服务器（DAS），它支持批量，交互式，实时和预测性分析。<br>基于位置的服务（地理围栏）和警报作为可重用的功能<br>MQTT，HTTP，Websockets和XMPP协议<br>为多个注册设备配置/取消配置应用程序<br>为iOS，Android和Windows设备实施自助设备注册和管理<br>分配和管理设备的应用程序/固件<br>分组，管理和监视连接的设备<br>API驱动的设备类型定义<br>查看单个或多个设备的即时可视化统计信息<br>Stats-API编写您自己的可视化文件<br>预制的普通传感器图<br>————————————————<br>版权声明：本文为CSDN博主「shnbiot」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/shnbiot/article/details/8043201732017" target="_blank" rel="noopener">https://blog.csdn.net/shnbiot/article/details/8043201732017</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;9个顶级开发IoT项目的开源物联网平台&quot;&gt;&lt;a href=&quot;#9个顶级开发IoT项目的开源物联网平台&quot; class=&quot;headerlink&quot; title=&quot;9个顶级开发IoT项目的开源物联网平台&quot;&gt;&lt;/a&gt;9个顶级开发IoT项目的开源物联网平台&lt;/h1&gt;&lt;p&gt;物联
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/iot/物联网终端操作系统</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/iot/%E7%89%A9%E8%81%94%E7%BD%91%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/iot/%E7%89%A9%E8%81%94%E7%BD%91%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-04-22T13:37:14.523Z</published>
    <updated>2020-04-22T14:53:40.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物联网终端操作系统"><a href="#物联网终端操作系统" class="headerlink" title="物联网终端操作系统"></a>物联网终端操作系统</h1><p>“无意中发现了一个巨牛的人工智能教程，忍不住分享一下给大家。教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点<a href="https://www.cbedai.net/zhouzhaoxiong1227" target="_blank" rel="noopener">这里</a>可以跳转到教程。”_</p><p>从前面文章的描述中可以看出，物联网终端设备的类型和功能是千差万别的，终端设备的性能在不同场景下的要求也不一致。物联网终端设备的硬件、软件的碎片化也阻碍了物联网本身的发展。</p><p>物联网终端操作系统可以解决上面提到的问题，它不仅可以重新规范物联网终端设备，也能够为物联网应用的迅速发展提供了统一的开发环境。本文首先介绍物联网终端操作系统的必要性，然后通过介绍物联网终端操作系统的能力来说明如何设计物联网终端操作系统，最后简单介绍在操作系统之上的物联网应用。</p><p><strong>物联网终端操作系统的必要性</strong></p><p>物联网应用千差万别，物联网终端设备的形态和需求也是难以统一的，这使得物联网终端操作系统呼之欲出。物联网终端操作系统的目标是充分抽象物联网终端设备，提供快速、高效的物联网应用开发平台。</p><p>具体而言，需要物联网终端操作系统的原因有如下几个：</p><p>第一，物联网终端操作系统解决了物联网终端设备碎片化的问题。物联网终端设备各式各样，如果有一个好的物联网终端操作系统来支撑这些设备，那么各种物联网应用就有了发挥自己能力的舞台，物联网终端设备碎片化的问题也得到了解决。</p><p>第二，物联网终端操作系统可以培养专有的物联网技术生态链。好的物联网终端操作系统可以提高物联网应用的开发速度并培养健康的技术生态链，它可以隔离软/硬件系统，加快物联网应用的开发速度，提高物联网应用的实用性。</p><p><strong>物联网终端操作系统的能力</strong></p><p>从物联网的实际应用出发，物联网终端操作系统需要具备以下能力：</p><p><strong>1.**</strong>硬件控制能力**</p><p>物联网终端设备的一个重要能力是感知和控制物体，这种感知和控制都是由不同的硬件设备完成。由于行业和领域的多样性，物联网硬件可能是多种多样的，那么对硬件的抽象和控制就显得尤为重要。物联网终端操作系统要提供丰富的API 来控制硬件或外设，这些API可以提供硬件的底层控制，也可以提供对高层应用属性的控制。</p><p>总的说来，物联网终端操作系统要能够提供丰富的硬件设备驱动，同时要提供丰富的硬件控制API。</p><p><strong>2.**</strong>软件远程控制能力**</p><p>物联网终端设备的数量非常庞大，并且经常部署在一些比较恶劣的条件下。也就是说，很多终端设备通常都是无人监控和操作的，此时物联网终端设备被远程控制的能力就显得非常重要了。进一步而言，终端操作系统为软件的远程控制能力提供支持，也是物联网终端操作系统的一个特性。</p><p>远程控制能力可以从两个方面理解：应用的远程升级和系统控制能力的高度开放。其中，应用的远程升级需要操作系统能够将应用的运行环境和应用分离，系统控制能力高度开放指终端操作系统能够为应用提供足够丰富的控制接口。</p><p><strong>3.**</strong>丰富的网络能力**</p><p>物联网终端设备具有通过近距离无线通信与其他物联网终端设备进行信息交换的能力，因此，物联网操作系统应该提供丰富的网络接口能力，并支持众多的网络协议。</p><p>同时，物联网终端操作系统的网络协议应该是精简的，因为精简的网络协议有利于设备、应用的快速开发和部署，并解决物联网终端设备能力不一致的问题。</p><p><strong>4.**</strong>计算能力**</p><p>计算能力是物联网终端操作系统需要提供的基础能力，数据的精确度和计算结果的精确度是物联网数据价值的保障。</p><p>物联网终端操作系统需要能够提供丰富的计算模型，方便开发者开发，同时提供计算模型插件能够支持第三方的技术模型。</p><p><strong>5.**</strong>系统大小的可伸缩能力**</p><p>物联网终端设备与计算机、移动终端的一个显著区别是，物联网终端设备外观、尺寸都是不固定的。外观和尺寸的不固定，对操作系统占用空间的大小就会有多种要求，从百K级别到M级别都要适配。在设计时，对物联网终端操作系统的要求是：内核要小，功能可裁剪。</p><p>内核小，不仅指操作系统内核部分小，而且要求操作系统的最小功能集要很小；功能可裁剪，要求物联网终端操作系统提供丰富的可裁剪的功能模块供选择。</p><p><strong>6.**</strong>支持云技术能力**</p><p>在前面的文章中，我们提到过，云技术与物联网是一对天生的搭档。因此，我们要在物联网终端操作系统设计之初就考虑两者的关系，增强物联网终端设备支持云技术的能力。</p><p>简而言之，为了配合云技术在物联网行业的应用，物联网终端操作系统应该有完善的数据处理的能力。</p><p><strong>7.**</strong>系统的自我生长能力**</p><p>在设计物联网终端操作系统时，比较好的设计思想是通用操作系统+行业操作系统(通用操作系统是指物联网终端操作系统的提供者关注操作系统在物联网行业通用领域技术的提升；行业操作系统的指针对不同行业，由行业操作系统提供者制定行业操作系统标准)，理由如下：</p><p>第一，物联网终端设备多样性，要求操作系统也有多样性的特点。</p><p>第二，物联网的应用领域是分行业的，那么需要针对不同行业特性设计不同的终端操作系统。</p><p>第三，从整个计算机技术领域发展来说，开源的理念越来越被接受，开源会让更多人和机构参与进来，对培养生态链非常有帮助。</p><p><strong>物联网应用</strong></p><p>根据物联网的特点，可以将物联网应用分为如下几类：</p><p>第一类，节点应用。这是单个物联网终端设备应用，它们运行在单个物联网终端设备上。</p><p>第二类，协调应用。这是多个设备之间的协调应用，它们通常运行在某一单元网络的网关上，负责单元网络下各个终端设备之间的协调和优化。</p><p>第三类，云端应用。它们负责数据存储、计算和展示。</p><p>第四类，展示应用。它们运行于PC端或移动终端，负责物联网应用系统最终的展示。</p><p><strong>总结</strong></p><p>本文介绍了设计物联网终端操作系统的必要性和其具备的能力，并简单介绍了操作系统之上的物联网应用。为了培养物联网行业的技术生态链，设计物联网终端操作系统是一项值得长期研究并投入实践的工作。这不仅能够满足行业本身的技术要求，还能够培养具备物联网行业知识体系的专业技术人才，有利于物联网行业长期稳定的发展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;物联网终端操作系统&quot;&gt;&lt;a href=&quot;#物联网终端操作系统&quot; class=&quot;headerlink&quot; title=&quot;物联网终端操作系统&quot;&gt;&lt;/a&gt;物联网终端操作系统&lt;/h1&gt;&lt;p&gt;“无意中发现了一个巨牛的人工智能教程，忍不住分享一下给大家。教程不仅是零基础，通俗易
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/bd/大数据思维的十大核心原理</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/bd/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%80%9D%E7%BB%B4%E7%9A%84%E5%8D%81%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/bd/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%80%9D%E7%BB%B4%E7%9A%84%E5%8D%81%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</id>
    <published>2020-04-22T13:37:09.733Z</published>
    <updated>2020-04-22T14:53:40.562Z</updated>
    
    <content type="html"><![CDATA[<p>来源：网络大数据<br>作者：佚名<br>本文系转载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;　　&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.thebigdata.cn&#x2F;YeJieDongTai&#x2F;7180.html&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;&quot;&gt;大数据&lt;&#x2F;a&gt;思维是客观存在，大数据思维是新的思维观。用大数据思维方式思考问题，解决问题是当下企业潮流。大数据思维开启了一次重大的时代转型。&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><ul><li>1<center>![大数据](https://img-blog.csdn.net/20171207151330105?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VwZXJtYXBzdXBwb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center></li></ul><p>大数据思维原理是什么?笔者概括为10项原理。</p><p>**　　一、数据核心原理**</p><p>**　　从“流程”核心转变为“数据”核心**</p><p><a href="http://www.thebigdata.cn/ZiLiaoXiaZai/10811.html" target="_blank" rel="noopener">大数据时代</a>，计算模式也发生了转变，从“流程”核心转变为“数据”核心。<a href="http://www.thebigdata.cn/Hadoop/10722.html" target="_blank" rel="noopener">hadoop</a>体系的分布式计算框架已经是“数据”为核心的范式。非结构化数据及分析需求，将改变IT系统的升级方式：从简单增量到架构变化。大数据下的新思维——计算模式的转变。</p><p>例如：IBM将使用以数据为中心的设计，目的是降低在超级计算机之间进行大量数据交换的必要性。大数据下，云计算找到了破茧重生的机会，在存储和计算上都体现了数据为核心的理念。大数据和云计算的关系：云计算为大数据提供了有力的工具和途径，大数据为云计算提供了很有价值的用武之地。而大数据比云计算更为落地，可有效利用已大量建设的云计算资源，最后加以利用。</p><p>科学进步越来越多地由数据来推动，海量数据给<a href="http://www.thebigdata.cn/JiShuBoKe/31800.html" target="_blank" rel="noopener">数据分析</a>既带来了机遇，也构成了新的挑战。大数据往往是利用众多技术和方法，综合源自多个渠道、不同时间的信息而获得的。为了应对大数据带来的挑战，我们需要新的统计思路和计算方法。</p><p>说明：用数据核心思维方式思考问题，解决问题。以数据为核心，反映了当下IT产业的变革，数据成为人工智能的基础，也成为智能化的基础，数据比流程更重要，数据库、记录数据库，都可开发出深层次信息。云计算机可以从数据库、记录数据库中搜索出你是谁，你需要什么，从而推荐给你需要的信息。</p><p>**　　二、数据价值原理**</p><p>**　　由功能是价值转变为数据是价值**</p><p>大数据真正有意思的是数据变得在线了，这个恰恰是互联网的特点。非互联网时期的产品，功能一定是它的价值，今天互联网的产品，数据一定是它的价值。</p><p>例如：大数据的真正价值在于创造，在于填补无数个还未实现过的空白。有人把数据比喻为蕴藏能量的煤矿，煤炭按照性质有焦煤、无烟煤、肥煤、贫煤等分类，而露天煤矿、深山煤矿的挖掘成本又不一样。与此类似，大数据并不在“大”，而在于“有用”，价值含量、挖掘成本比数量更为重要。不管大数据的核心价值是不是预测，但是基于大数据形成决策的模式已经为不少的企业带来了盈利和声誉。</p><p>数据能告诉我们，每一个客户的消费倾向，他们想要什么，喜欢什么，每个人的需求有哪些区别，哪些又可以被集合到一起来进行分类。大数据是数据数量上的增加，以至于我们能够实现从量变到质变的过程。举例来说，这里有一张照片，照片里的人在骑马，这张照片每一分钟，每一秒都要拍一张，但随着处理速度越来越快，从1分钟一张到1秒钟1张，突然到1秒钟10张后，就产生了电影。当数量的增长实现质变时，就从照片变成了一部电影。</p><p>美国有一家创新企业Decide.com</p><p>它可以帮助人们做购买决策，告诉消费者什么时候买什么产品，什么时候买最便宜，预测产品的价格趋势，这家公司背后的驱动力就是大数据。他们在全球各大网站上搜集数以十亿计的数据，然后帮助数以十万计的用户省钱，为他们的采购找到最好的时间，降低交易成本，为终端的消费者带去更多价值。</p><p>在这类模式下，尽管一些零售商的利润会进一步受挤压，但从商业本质上来讲，可以把钱更多地放回到消费者的口袋里，让购物变得更理性，这是依靠大数据催生出的一项全新产业。这家为数以十万计的客户省钱的公司，在几个星期前，被eBay以高价收购。</p><p>再举一个例子，SWIFT是全球最大的支付平台，在该平台上的每一笔交易都可以进行大数据的分析,他们可以预测一个经济体的健康性和增长性。比如，该公司现在为全球性客户提供经济指数，这又是一个<a href="http://www.thebigdata.cn/YeJieDongTai/30676.html" target="_blank" rel="noopener">大数据服务</a>。,定制化服务的关键是数据。《大数据时代》的作者维克托·迈尔·舍恩伯格认为，大量的数据能够让传统行业更好地了解客户需求，提供个性化的服务。</p><p>说明：用数据价值思维方式思考问题，解决问题。信息总量的变化导致了信息形态的变化，量变引发了质变，最先经历信息爆炸的学科，如天文学和基因学，创造出了“大数据”这个概念。如今，这个概念几乎应用到了所有人类致力于发展的领域中。从功能为价值转变为数据为价值，说明数据和大数据的价值在扩大，数据为“王”的时代出现了。数据被解释是信息，信息常识化是知识，所以说数据解释、数据分析能产生价值。</p><p>**　　三、全样本原理**</p><p>**　　从抽样转变为需要全部数据样本**</p><p>需要全部数据样本而不是抽样，你不知道的事情比你知道的事情更重要，但如果现在数据足够多，它会让人能够看得见、摸得着规律。数据这么大、这么多，所以人们觉得有足够的能力把握未来，对不确定状态的一种判断，从而做出自己的决定。这些东西我们听起来都是非常原始的，但是实际上背后的思维方式，和我们今天所讲的大数据是非常像的。</p><p>举例：在大数据时代，无论是商家还是信息的搜集者，会比我们自己更知道你可能会想干什么。现在的数据还没有被真正挖掘，如果真正挖掘的话，通过信用卡消费的记录，可以成功预测未来5年内的情况。统计学里头最基本的一个概念就是，全部样本才能找出规律。为什么能够找出行为规律?一个更深层的概念是人和人是一样的，如果是一个人特例出来，可能很有个性，但当人口样本数量足够大时，就会发现其实每个人都是一模一样的。</p><p>说明：用全数据样本思维方式思考问题，解决问题。从抽样中得到的结论总是有水分的，而全部样本中得到的结论水分就很少，大数据越大，真实性也就越大，因为大数据包含了全部的信息。</p><p>**　　四、关注效率原理**</p><p>**　　由关注精确度转变为关注效率**</p><p>关注效率而不是精确度，大数据标志着人类在寻求量化和认识世界的道路上前进了一大步，过去不可计量、存储、分析和共享的很多东西都被数据化了，拥有大量的数据和更多不那么精确的数据为我们理解世界打开了一扇新的大门。大数据能提高生产效率和销售效率，原因是大数据能够让我们知道市场的需要，人的消费需要。大数据让企业的决策更科学，由关注精确度转变为关注效率的提高，大数据分析能提高企业的效率。</p><p>例如：在互联网大数据时代，企业产品迭代的速度在加快。三星、小米手机制造商半年就推出一代新智能手机。利用互联网、大数据提高企业效率的趋势下，快速就是效率、预测就是效率、预见就是效率、变革就是效率、创新就是效率、应用就是效率。</p><p>竞争是企业的动力，而效率是企业的生命，效率低与效率高是衡量企来成败的关键。一般来讲，投入与产出比是效率，追求高效率也就是追求高价值。手工、机器、自动机器、智能机器之间效率是不同的，智能机器效率更高，已能代替人的思维劳动。智能机器核心是大数据制动，而大数据制动的速度更快。在快速变化的市场，快速预测、快速决策、快速创新、快速定制、快速生产、快速上市成为企业行动的准则，也就是说，速度就是价值，效率就是价值，而这一切离不开大数据思维。</p><p>说明：用关注效率思维方式思考问题，解决问题。大数据思维有点像混沌思维，确定与不确定交织在一起，过去那种一元思维结果，已被二元思维结果取代。过去寻求精确度，现在寻求高效率;过去寻求因果性，现在寻求相关性;过去寻找确定性，现在寻找概率性，对不精确的数据结果已能容忍。只要大数据分析指出可能性，就会有相应的结果，从而为企业快速决策、快速动作、创占先机提高了效率。</p><p>**　　五、关注相关性原理**</p><p>**　　由因果关系转变为关注相关性**</p><p>关注相关性而不是因果关系，社会需要放弃它对因果关系的渴求，而仅需关注相关关系，也就是说只需要知道是什么，而不需要知道为什么。这就推翻了自古以来的惯例，而我们做决定和理解现实的最基本方式也将受到挑战。</p><p>例如：大数据思维一个最突出的特点，就是从传统的因果思维转向相关思维，传统的因果思维是说我一定要找到一个原因，推出一个结果来。而大数据没有必要找到原因，不需要科学的手段来证明这个事件和那个事件之间有一个必然，先后关联发生的一个因果规律。它只需要知道，出现这种迹象的时候，我就按照一般的情况，这个数据统计的高概率显示它会有相应的结果，那么我只要发现这种迹象的时候，我就可以去做一个决策，我该怎么做。这是和以前的思维方式很不一样，老实说，它是一种有点反科学的思维，科学要求实证，要求找到准确的因果关系。</p><p>在这个不确定的时代里面，等我们去找到准确的因果关系，再去办事的时候，这个事情早已经不值得办了。所以“大数据”时代的思维有点像回归了工业社会的这种机械思维——机械思维就是说我按那个按钮，一定会出现相应的结果，是这样状态。而农业社会往前推，不需要找到中间非常紧密的、明确的因果关系，而只需要找到相关关系，只需要找到迹象就可以了。社会因此放弃了寻找因果关系的传统偏好，开始挖掘相关关系的好处。</p><p>例如：美国人开发一款“个性化分析报告自动可视化程序”软件从网上挖掘数据信息，这款<a href="http://www.thebigdata.cn/JieJueFangAn/30963.html" target="_blank" rel="noopener">数据挖掘</a>软件将自动从各种数据中提取重要信息，然后进行分析，并把此信息与以前的数据关联起来，分析出有用的信息。</p><p>非法在屋内打隔断的建筑物着火的可能性比其他建筑物高很多。纽约市每年接到2.5万宗有关房屋住得过于拥挤的投诉，但市里只有200名处理投诉的巡视员，市长办公室一个分析专家小组觉得大数据可以帮助解决这一需求与资源的落差。该小组建立了一个市内全部90万座建筑物的数据库，并在其中加入市里19个部门所收集到的数据：欠税扣押记录、水电使用异常、缴费拖欠、服务切断、救护车使用、当地犯罪率、鼠患投诉，诸如此类。</p><p>接下来，他们将这一数据库与过去5年中按严重程度排列的建筑物着火记录进行比较，希望找出相关性。果然，建筑物类型和建造年份是与火灾相关的因素。不过，一个没怎么预料到的结果是，获得外砖墙施工许可的建筑物与较低的严重火灾发生率之间存在相关性。利用所有这些数据，该小组建立了一个可以帮助他们确定哪些住房拥挤投诉需要紧急处理的系统。他们所记录的建筑物的各种特征数据都不是导致火灾的原因，但这些数据与火灾隐患的增加或降低存在相关性。这种知识被证明是极具价值的：过去房屋巡视员出现场时签发房屋腾空令的比例只有13%，在采用新办法之后，这个比例上升到了70%——效率大大提高了。</p><p>全世界的商界人士都在高呼大数据时代来临的优势：一家超市如何从一个17岁女孩的购物清单中，发现了她已怀孕的事实;或者将啤酒与尿不湿放在一起销售，神奇地提高了双方的销售额。大数据透露出来的信息有时确实会起颠覆。比如，腾讯一项针对社交网络的统计显示，爱看家庭剧的男人是女性的两倍还多;最关心金价的是中国大妈，但紧随其后的却是90后。而在过去一年，支付宝中无线支付比例排名前十的竟然全部在青海、西藏和内蒙古地区。</p><p>说明：用关注相关性思维方式来思考问题，解决问题。寻找原因是一种现代社会的一神论，大数据推翻了这个论断。过去寻找原因的信念正在被“更好”的相关性所取代。当世界由探求因果关系变成挖掘相关关系，我们怎样才能既不损坏建立在因果推理基础之上的社会繁荣和人类进步的基石，又取得实际的进步呢?这是值得思考的问题。</p><p>解释：转向相关性，不是不要因果关系，因果关系还是基础，科学的基石还是要的。只是在高速信息化的时代，为了得到即时信息，实时预测，在快速的大数据分析技术下，寻找到相关性信息，就可预测用户的行为，为企业快速决策提供提前量。</p><p>比如预警技术，只有提前几十秒察觉，防御系统才能起作用。比如，雷达显示有个提前量，如果没有这个预知的提前量，雷达的作用也就没有了，相关性也是这个原理。比如，相对论与量子论的争论也能说明问题，一个说上帝不掷骰子，一个说上帝掷骰子，争论几十年，最后承认两个都存在，而且量子论取得更大的发展——一个适用于宇宙尺度，一个适用于原子尺度。</p><p>**　　六、预测原理**</p><p>**　　从不能预测转变为可以预测**</p><p>大数据的核心就是预测，大数据能够预测体现在很多方面。大数据不是要教机器像人一样思考，相反，它是把数学算法运用到海量的数据上来预测事情发生的可能性。正因为在大数据规律面前，每个人的行为都跟别人一样，没有本质变化，所以商家会比消费者更了消费者的行为。</p><p>例如：大数据助微软准确预测世界怀。微软大数据团队在2014年巴西世界足球赛前设计了世界怀模型，该预测模型正确预测了赛事最后几轮每场比赛的结果，包括预测德国队将最终获胜。预测成功归功于微软在世界怀进行过程中获取的大量数据，到淘汰赛阶段，数据如滚雪球般增多，常握了有关球员和球队的足够信息，以适当校准模型并调整对接下来比赛的预测。</p><p>世界杯预测模型的方法与设计其它事件的模型相同，诀窍就是在预测中去除主观性，让数据说话。预测性数学模型几乎不算新事物，但它们正变得越来越准确。在这个时代，数据分析能力终于开始赶上数据收集能力，分析师不仅有比以往更多的信息可用于构建模型，也拥有在很短时间内通过计算机将信息转化为相关数据的技术。</p><p>几年前，得等每场比赛结束以后才能获取所有数据，现在，数据是自动实时发送的，这让预测模型能获得更好的调整且更准确。微软世界怀模型的成绩说明了其模型的实力，它的成功为大数据的力量提供了强有力的证明，利用同样的方法还可预测选举或关注股票。类似的大数据分析正用于商业、政府、经济学和社会科学，它们都关于原始数据进行分析。</p><p>我们进入了一个用数据进行预测的时代，虽然我们可能无法解释其背后的原因。如果一个医生只要求病人遵从医嘱，却没法说明医学干预的合理性的话，情况会怎么样呢?实际上，这是依靠大数据取得病理分析的医生们一定会做的事情。</p><p>从一个人乱穿马路时行进的轨迹和速度来看他能及时穿过马路的可能性，都是大数据可以预测的范围。当然，如果一个人能及时穿过马路，那么他乱穿马路时，车子就只需要稍稍减速就好。但是这些预测系统之所以能够成功，关键在于它们是建立在海量数据的基础之上的。</p><p>此外，随着系统接收到的数据越来越多，通过记录找到的最好的预测与模式，可以对系统进行改进。它通常被视为人工智能的一部分，或者更确切地说，被视为一种机器学习。真正的革命并不在于分析数据的机器，而在于数据本身和我们如何运用数据。一旦把统计学和现在大规模的数据融合在一起，将会颠覆很多我们原来的思维。所以现在能够变成数据的东西越来越多，计算和处理数据的能力越来越强，所以大家突然发现这个东西很有意思。所以，大数据能干啥?能干很多很有意思的事情。</p><p>例如，预测当年葡萄酒的品质</p><p>很多品酒师品的不是葡萄酒，那时候葡萄酒还没有真正的做成，他们品的是发烂的葡萄。因此在那个时间点就预测当年葡萄酒的品质是比较冒险的。而且人的心理的因素是会影响他做的这个预测，比如说地位越高的品酒师，在做预测时会越保守，因为他一旦预测错了，要损失的名誉代价是很大的。所以的品酒大师一般都不敢贸然说今年的酒特别好，或者是特别差;而刚出道的品酒师往往会“语不惊人死不休的”。</p><p>普林斯顿大学有一个英语学教授，他也很喜欢喝酒，喜欢储藏葡萄酒，所以他就想是否可以分析到底哪年酒的品质好。然后他就找了很多数据，比如说降雨量、平均气温、土壤成分等等，然后他做回归，最后他说把参数都找出来，做了个网站，告诉大家今年葡萄酒的品质好坏以及秘诀是什么。</p><p>当他的研究公布的时候，引起了业界的轩然大波，因为他做预测做的很提前，因为今年的葡萄收获后要经过一段的时间发酵，酒的味道才会好，但这个教授突然预测说今年的酒是世纪最好的酒。大家说怎么敢这么说，太疯狂了。更疯狂的是到了第二年，他预测今年的酒比去年的酒更好，连续两次预测说是百年最好的酒，但他真的预测对了。现在品酒师在做评判之前，要先到他的网站上看看他的预测，然后再做出自己的判断。有很多的规律我们不知道，但是它潜伏在这些大数据里头。</p><p>例如，大数据描绘“伤害图谱”</p><p>广州市伤害监测信息系统通过广州市红十字会医院、番禺区中心医院、越秀区儿童医院3个伤害监测哨点医院，持续收集市内发生的伤害信息，分析伤害发生的原因及危险因素，系统共收集伤害患者14681例，接近九成半都是意外事故。整体上，伤害多发生于男性，占61.76%，5岁以下儿童伤害比例高达14.36%，家长和社会应高度重视，45.19%的伤害都是发生在家中，其次才是公路和街道。</p><p>收集到监测数据后，关键是通过分析处理，把数据“深加工”以利用。比如，监测数据显示，老人跌倒多数不是发生在雨天屋外，而是发生在家里，尤其是旱上刚起床时和浴室里，这就提示，防控老人跌倒的对策应该着重在家居，起床要注意不要动作过猛，浴室要防滑，加扶手等等。</p><p>说明：用大数据预测思维方式来思考问题，解决问题。数据预测、数据记录预测、数据统计预测、数据模型预测，数据分析预测、数据模式预测、数据深层次信息预测等等，已转变为大数据预测、大数据记录预测、大数据统计预测、大数据模型预测，大数据分析预测、大数据模式预测、大数据深层次信息预测。</p><p>互联网、移动互联网和云计算机保证了大数据实时预测的可能性，也为企业和用户提供了实时预测的信息，相关性预测的信息，让企业和用户抢占先机。由于大数据的全样本性，人和人都是一样的，所以云计算机软件预测的效率和准确性大大提高，有这种迹象，就有这种结果。</p><p>**　　七、信息找人原理**</p><p>**　　从人找信息，转变为信息找人**</p><p>互联网和大数据的发展，是一个从人找信息，到信息找人的过程。先是人找信息，人找人，信息找信息，现在是信息找人的这样一个时代。信息找人的时代，就是说一方面我们回到了一种最初的，广播模式是信息找人，我们听收音机，我们看电视，它是信息推给我们的，但是有一个缺陷，不知道我们是谁，后来互联网反其道而行，提供搜索引擎技术,让我知道如何找到我所需要的信息，所以搜索引擎是一个很关键的技术。</p><p>例如：从搜索引擎——向推荐引擎转变。今天，后搜索引擎时代已经正式来到，什么叫做后搜索引擎时代呢?使用搜索引擎的频率会大大降低，使用的时长也会大大的缩短，为什么使用搜索引擎的频率在下降?时长在下降?原因是推荐引擎的诞生。就是说从人找信息到信息找人越来越成为了一个趋势，推荐引擎就是说它很懂我，知道我要知道，所以是最好的技术。乔布斯说，让人感受不到技术的技术是最好的技术。</p><p>大数据还改变了信息优势。按照循证医学，现在治病的第一件事情不是去研究病理学，而是拿过去的数据去研究，相同情况下是如何治疗的。这导致专家和普通人之间的信息优势没有了。原来我相信医生，因为医生知道的多，但现在我可以到谷歌上查一下，知道自己得了什么病。</p><p>谷歌有一个机器翻译的团队，最开始的时候翻译之后的文字根本看不懂，但是现在60%的内容都能读得懂。谷歌机器翻译团队里头有一个笑话，说从团队每离开一个语言学家，翻译质量就会提高。越是专家越搞不明白，但打破常规让数据说话，得到真理的速度反而更快。</p><p>说明：用信息找人的思维方式思考问题，解决问题。从人找信息到信息找人，是交互时代一个转变，也是智能时代的要求。智能机器已不是冷冰冰的机器，而是具有一定智能的机器。信息找人这四个字，预示着大数据时代可以让信息找人，原因是企业懂用户，机器懂用户，你需要什么信息，企业和机器提前知道，而且主动提供你需要的信息。</p><p>**　　八、机器懂人原理**</p><p>**　　由人懂机器转变为机器更懂人**</p><p>不是让人更懂机器，而是让机器更懂人，或者说是能够在使用者很笨的情况下，仍然可以使用机器。甚至不是让人懂环境，而是让我们的环境来懂我们，环境来适应人，某种程度上自然环境不能这样讲，但是在数字化环境中已经是这样的一个趋势，就是我们所在的生活世界，越来越趋向于它更适应于我们，更懂我们。哪个企业能够真正做到让机器更懂人，让环境更懂人，让我们随身携带的整个的生活世界更懂得我们的话，那他一定是具有竞争力的了，而“大数据”技术能够助我们一臂之力。</p><p>例如：亚马逊网站，只要买书，就会提供一个今天司空见惯的推荐，买了这本书的人还买了什么书，后来发现相关推荐的书比我想买的书还要好，时间久之后就会对它产生一种信任。这种信任就像在北京的那么多书店里面，以前买书的时候就在几家，原因在于我买书比较多，他都已经认识我了，都是我一去之后，我不说我要买什么书，他会推荐最近上来的几本书，可能是我感兴趣的。这样我就不会到别的很近的书店，因为这家书店更懂我。</p><p>例如，解题机器人挑战大型预科学校高考模拟试题的结果，解题机器人的学历水平应该比肩普通高三学生。计算机不擅长对语言和知识进行综合解析，但通过借助大规模数据库对普通文章做出判断的方法，在对话填空和语句重排等题型上成绩有所提高。</p><p>让机器懂人，是让机器具有学习的功能。人工智能已转变为研究机器学习。大数据分析要求机器更智能，具有分析能力，机器即时学习变得更重要。机器学习是指：计算机利用经验改善自身性能的行为。机器学习主要研究如何使用计算机模拟和实现人类获取知识(学习)过程、创新、重构已有的知识，从而提升自身处理问题的能力，机器学习的最终目的是从数据中获取知识。</p><p>大数据技术的其中一个核心目标是要从体量巨大、结构繁多的数据中挖掘出隐蔽在背后的规律，从而使数据发挥最大化的价值。由计算机代替人去挖掘信息，获取知识。从各种各样的数据(包括结构化、半结构化和非结构化数据)中快速获取有价值信息的能力，就是大数据技术。大数据机器分析中，半监督学习、集成学习、 概率模型等技术尤为重要。</p><p>说明：用机器更懂人的思维方式思考问题，解决问题。机器从没有常识到逐步有点常识，这是很大的变化。去年，美国人把一台云计算机送到大学里去进修，增加知识和常识。最近俄罗斯人开发一台计算机软件通过图林测试，表明计算机已初步具有智能。</p><p>让机器懂人，这是人工智能的成功，同时，也是人的大数据思维转变。你的机器、你的软件、你的服务是否更懂人?将是衡量一个机器、一件软件、一项服务好坏的标准。人机关系已发生很大变化，由人机分离，转化为人机沟通，人机互补，机器懂人，现在年青人已离不开智能手机是一个很好的例证。在互联网大数据时代，有问题—问机器—问百度，成为生活的一部分。机器什么都知道，原因是有大数据库，机器可搜索到相关数据，从而使机器懂人。是人让机器更懂人，如果机器更懂人，那么机器的价值更高。</p><p>**　　九、电子商务智能原理**</p><p>**　　大数据改变了电子商务模式，让电子商务更智能**</p><p>商务智能，在今天大数据时代它获得的重新的定义。</p><p>例如：传统企业进入互联网，在掌握了“大数据”技术应用途径之后，会发现有一种豁然开朗的感觉，我整天就像在黑屋子里面找东西，找不着，突然碰到了一个开关，发现那么费力的找东西，原来很容易找得到。大数据思维，事实上它不是一个全称的判断，只是对我们所处的时代某一个纬度的描述。</p><p>大数据时代不是说我们这个时代除了大数据什么都没有，哪怕是在互联网和IT领域，它也不是一切，只是说在我们的时代特征里面加上这么一道很明显的光，从而导致我们对以前的生存状态，以及我们个人的生活状态的一个差异化的一种表达。</p><p>例如：大数据让软件更智能。尽管我们仍处于大数据时代来临的前夕，但我们的日常生活已经离不开它了。交友网站根据个人的性格与之前成功配对的情侣之间的关联来进行新的配对。例如，具有“自动改正”功能的智能手机通过分析我们以前的输入，将个性化的新单词添加到手机词典里。在不久的将来，世界许多现在单纯依靠人类判断力的领域都会被计算机系统所改变甚至取代。计算机系统可以发挥作用的领域远远不止驾驶和交友，还有更多更复杂的任务。别忘了，亚马逊可以帮我们推荐想要的书，谷歌可以为关联网站排序，Facebook知道我们的喜好，而linkedIn可以猜出我们认识谁。</p><p>当然，同样的技术也可以运用到疾病诊断、推荐治疗措施，甚至是识别潜在犯罪分子上。或者说，在你还不知道的情况下，体检公司、医院提醒你赶紧去做检查，可能会得某些病，商家比你更了解你自己，以及你这样的人在某种情况下会出现的可能变化。就像互联网通过给计算机添加通信功能而改变了世界，大数据也将改变我们生活中最重要的方面，因为它为我们的生活创造了前所未有的可量化的维度。</p><p>说明：用电子商务更智能的思维方式思考问题，解决问题。人脑思维与机器思维有很大差别，但机器思维在速度上是取胜的，而且智能软件在很多领域已能代替人脑思维的操作工作。例如美国一家媒体公司已用电脑智能软件写稿，可用率已达70%。云计算机已能处理超字节的大数据量，人们需要的所有信息都可得到显现，而且每个人互联网行为都可记录，这些记录的大数据经过云计算处理能产生深层次信息，经过<a href="http://www.thebigdata.cn/JieJueFangAn/30625.html" target="_blank" rel="noopener">大数据软件</a>挖掘，企业需要的商务信息都能实时提供，为企业决策和营销、定制产品等提供了大数据支持。</p><p>**　　十、定制产品原理**</p><p>**　　由企业生产产品转变为由客户定制产品**</p><p>下一波的改革是大规模定制，为大量客户定制产品和服务，成本低、又兼具个性化。比如消费者希望他买的车有红色、绿色，厂商有能力满足要求，但价格又不至于像手工制作那般让人无法承担。因此，在厂家可以负担得起大规模定制带去的高成本的前提下，要真正做到个性化产品和服务，就必须对客户需求有很好的了解，这背后就需要依靠大数据技术。</p><p>例如：大数据改变了企业的竞争力。定制产品这是一个很好的技术，但是能不能够形成企业的竞争力呢?在产业经济学里面有一个很重要的区别，就是生产力和竞争力的区别，就是说一个东西是具有生产力的，那这种生产力变成一种通用生产力的时候，就不能形成竞争力，因为每一个人，每一个企业都有这个生产力的时候，只能提高自己的生产力，过去没有车的时候和有车的时候，你的活动半径、运行速度大大提高了，但是当每一个人都没有车的时候，你有车，就会形成竞争力。大数据也一样，你有大数据定制产品，别人没有，就会形成竞争力。</p><p>在互联网大数据的时代，商家最后很可能可以针对每一个顾客进行精准的价格歧视。我们现在很多的行为都是比较粗放的，航空公司会给我们里程卡，根据飞行公里数来累计里程，但其实不同顾客所飞行的不同里程对航空公司的利润贡献是不一样的。所以有一天某位顾客可能会收到一封信，“恭喜先生，您已经被我们选为幸运顾客，我们提前把您升级到白金卡。”这说明这个顾客对航空公司的贡献已经够多了。有一天银行说“恭喜您，您的额度又被提高了，”就说明钱花得已经太多了。</p><p>正因为在大数据规律面前，每个人的行为都跟别人一样，没有本质变化。所以商家会比消费者更了消费者的行为。也许你正在想，工作了一年很辛苦，要不要去哪里度假?打开e-Mail，就有航空公司、旅行社的邮件。</p><p>说明：用定制产品思维方式思考问题，解决问题。大数据时代让企业找到了定制产品、订单生产、用户销售的新路子。用户在家购买商品已成为趋势，快递的快速，让用户体验到实时购物的快感，进而成为网购迷，个人消费不是减少了，反而是增加了。为什么企业要互联网化大数据化，也许有这个原因。2000万家互联网网店的出现，说明数据广告、数据传媒的重要性。</p><p>企业产品直接销售给用户，省去了中间商流通环节，使产品的价格可以以出厂价销售，让销费者获得了好处，网上产品便宜成为用户的信念，网购市场形成了。要让用户成为你的产品粉丝，就必须了解用户需要，定制产品成为用户的心愿，也就成为企业发展的新方向。</p><p>大数据思维是客观存在，大数据思维是新的思维观。用大数据思维方式思考问题，解决问题是当下企业潮流。大数据思维开启了一次重大的时代转型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来源：网络大数据&lt;br&gt;作者：佚名&lt;br&gt;本文系转载。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/bd/大数据时代下是数据思维重要，还是相应技术重要？</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/bd/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BB%A3%E4%B8%8B%E6%98%AF%E6%95%B0%E6%8D%AE%E6%80%9D%E7%BB%B4%E9%87%8D%E8%A6%81%EF%BC%8C%E8%BF%98%E6%98%AF%E7%9B%B8%E5%BA%94%E6%8A%80%E6%9C%AF%E9%87%8D%E8%A6%81%EF%BC%9F/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/bd/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BB%A3%E4%B8%8B%E6%98%AF%E6%95%B0%E6%8D%AE%E6%80%9D%E7%BB%B4%E9%87%8D%E8%A6%81%EF%BC%8C%E8%BF%98%E6%98%AF%E7%9B%B8%E5%BA%94%E6%8A%80%E6%9C%AF%E9%87%8D%E8%A6%81%EF%BC%9F/</id>
    <published>2020-04-22T13:37:08.866Z</published>
    <updated>2020-04-22T14:53:40.415Z</updated>
    
    <content type="html"><![CDATA[<p>技术做到一定程度，逐步发现自己的瓶颈。不由得开始思考这一方面的问题！到底大数据时代下，是相应的数据分析技术重要，还是相应数据思维重要？</p><p>先来说数据思维吧！什么是大数据思维，个人感觉应该是互联网思维的一种。是考虑到全面，而不是局部。是考虑到多维，而不是单一维度。不是靠拍脑门做决定，而是让数据说话，用数据做决策。</p><p>先说第一点，考虑全面，而不是局部。众所周知，移动互联网催生了大数据的产生。每一个人每一天通过手机能够的数据总和会是一个巨大的量。而通过这些非结构化的数据，我们首先面对的是如何处理这些数据，这里就涉及到数据的存储，读取的问题。由于数据的非结构化。传统的处理技术将不能够很好的起到作用。不是我们单一抽取几个用户的数据加以统计就可以预测出大量用户的行为。这里需要的全局的数据。首先，这一点是大数据相对于其他技术的第一点不同。</p><p>再来说第二点，考虑多维，而不是单一维度。大家都有目共睹，现在的广告已经开始基于我们的浏览时长而进行二次推荐。而在进行多维分析后，将不再只关注用户的浏览数据，而相应的会有用户的文本信息，好友评论，已购买产品信息，用卡频次…..当将用户数据进行多个维度的整合分析后，就可以做到精准营销。从而打破传统一维营销的被动宣传不叫好的特点。</p><p>最后再看第三点，让数据说话，用数据做决策。在这里不得不提一个软件R,传统行业的业务统计大部分是靠它完成，但他的数据呈现有一点的局限。当我们将一些数据以图表的形式展现在领导面前时，我们就可以根据这些数据做新一年的年度规划。而不至于拍脑门做决定。而且现在数据可视化的应用也是非常的多，现实的应用也展现了相应的价值。</p><p>说完了上面三点，再来说一说大数据技术。</p><p>首先必提的是Hadoop，这样一个分布式的存储现在已经在大部分企业应用，而它的分布式存储又将用户的读取时间缩短。而下一代技术Spark，也就相当于从Hadoop的硬盘存放，转而到了内存存放。众所周知，内存的读取速度会比硬盘快许多倍。</p><p>其次再要说的就是SAS与R，这两个软件都有各自的优势，SAS做为专业数据统计的软件，可以说在大数据量时处理起来有显著的优点。但在超过1T数据量的情况下，它的优势就不再那么明显。而R软件在绘图上有很大的优势，在数据可视化上有很重要的地位。但无奈，R软件在统计上略逊色SAS一筹。而与SAS的同类软件中，SPSS个人感觉在数据量小时会有很大的用途。</p><p>还有就是数据获取，RCurl与相应的爬虫技术，而在大数据时期，各网站在反爬虫方面势必会做要应的措施从而保护自身已有的数据。</p><p>还有就是ETL，这一点，个人感觉以后会在大数据落在时起到非常重要的地位。因为国内的数据大部分都需要清洗，就像我导师说过的一句话，在中国做大数据，最大的困难就是如何识别出假数据。用真实的数据才能分析出我们所要得到的结果。</p><p>好了，到此为止，以上就是自己学习到的大数据知识，分别在思维跟技术方面的认识。但问题又回来了，对于企业来讲，盈利是最基本的选择，到底是选一个具备大数据思维的人还是一个会很多大数据技术的人？而对于自己来说，下一步的方向是继续学习技术，还是掌握相应的思维。</p><p>思维OR技术，或左或右？或都两都需要融合，但话题又回来了，工作是很现实的问题，售前，咨询，研发，架构，实施，工程…….到底该如何选择，抑或就不要选择，先静下心来学习，等到在职的学习毕业后再去选择工作。</p><p>面对转行，从通信培训行业向互联网行业大数据的转变，虽然不知前方道路如何，仍有些迷茫，但既然选择前方，便只顾风雨兼程，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;技术做到一定程度，逐步发现自己的瓶颈。不由得开始思考这一方面的问题！到底大数据时代下，是相应的数据分析技术重要，还是相应数据思维重要？&lt;/p&gt;
&lt;p&gt;先来说数据思维吧！什么是大数据思维，个人感觉应该是互联网思维的一种。是考虑到全面，而不是局部。是考虑到多维，而不是单一维度。
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/bd/大数据还能火多久</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/bd/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%BF%98%E8%83%BD%E7%81%AB%E5%A4%9A%E4%B9%85/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/bd/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%BF%98%E8%83%BD%E7%81%AB%E5%A4%9A%E4%B9%85/</id>
    <published>2020-04-22T13:36:47.835Z</published>
    <updated>2020-04-22T14:53:40.559Z</updated>
    
    <content type="html"><![CDATA[<p>#大数据还能火多久？</p><p>我感觉很多朋友，对“大数据”、“机器学习”、“深度学习”等概念挺晕的，没有感官的认识，这里，我简单说一下：       “大数据”、“人工智能”、“机器学习”、“神经网络”、“深度学习”。这几个词往往掺杂在一起，让人不知所云，这里我简单说一下，不求细节上100%准确，只求能给各位一个感官上的印象，明白说起这几词时，通常都是说什么。        首先，“人工智能”这个词。大家说，什么是人工智能？每个人在自己心里，都有一个特定的人工智能定义。有人认为，老版《星际迷航》里“Datas上校”这个东西叫人工智能；有人认为《机器公敌》里机器人应该叫人工智能；有人认为电影异形里的“大卫”，这么个东西叫人工智能。近一点的，有人认为谷歌开发的下围棋的系统“AlphaGo”，很吊，这玩意是人工智能；谷歌大脑能通过自己看视频，自动识别出猫，这就人工智能了；还有公司，我们通过“人工智能”干了XXXX。。。。。。因此，可以看出，这个词大的没边，因此，真追究起来，谁要说这个词，除装逼外，你就当他什么都没说就行了。        当前，“大数据”这个词，也跟“人工智能”这个词一样，大的没边，虚无飘渺的没边，谁要是说这个词而不说具体的东西，你也就当他什么都没说就好了。        回过头来，我们再看“人工智能”这个词。究竟什么是人工智能？计算机的神级人物图灵给出了“图灵测试”，定义了人工智能——图灵测试（The Turing test）由艾伦·麦席森·图灵发明，指测试者与被测试者（一个人和一台机器）隔开的情况下，通过一些装置（如键盘）向被测试者随意提问，进行多次测试后，如果有超过30%的测试者不能确定出被测试者是人还是机器，那么这台机器就通过了测试，并被认为具有人类智能。（摘自百度百科）        上面，图灵神人说神话，凡人听不懂。针对“人工智能”，用人话讲，如果，某个东西，具有了“学习”、“分类”、“预测”能力，我们就认为这个东西是智能的。比如，我们说人。我们说诸葛亮，料事如神（预测能力强）、神机妙算（“分类”强）。。。因此，诸葛亮很智能。         其实，现实中很多问题，都可以转化为分类问题和回归问题，如何即“准”又“稳”的把事物分类，是我们追求。比如，我们根据一系列指标，把一个妹子分类为“漂亮”、“不漂亮”；把某件事根据一系列指标，分为“可以干”、“不可以干”；把某个人，分为“人品好，可以交”、“人渣，不可交”；这类就是二分类问题。也有多分类问题，比如，把一篇文章，分类到“财经新闻”、“娱乐八卦”、“武侠小说”、“黄色小说”。。。。等等多个类目下的一类中。        因此，为了给编个有“智能”的软件，赋予它分类能力呢。简单，用编程语言语言里的判断语句都能行:If XXX :OOOO elif XXXXX :ooooooelse:OOOOO          各位看官也许会笑，这ＴＭＤ算哪门子的智能。但是，在现实中，就这样用编程语言的特性，编出来的软件，在很多不懂计算机父辈们眼中，就很智能，就能把他们镇住。。。。。         当然，这么low的方案，计算机的神级人物们，是不屑的。毕竟，现实太复杂，对这个复杂的现实建模，对复杂的事物分类，岂能是几个判断语句所能够描述的。所以，大神们，搞出来很多算法策略来搞这件事。这下算法，主流的也就那么多，比如说：决策树算法、随机森林算法、逻辑回归、SVM、朴素贝叶斯、K最近邻算法、K均值算法、Adaboost 算法、神经网络算法、马尔可夫算法，还有最近火的“深度学习”算法、增强对抗网络算法。。。等等。这些算都叫“机器学习”算法。        讲到这里，各位看官，应该对我们经常讲的“人工智能”、“机器学习”、“深度学习”，这些虚无缥缈的词大概是什么意思，有个感官的认识了。         好了，现在我们讨论“人工智能”、“机器学习”、“深度学习”等等这些词时，具体就讨论这些算法就行了，那些虚无缥缈的概念，留给装逼的人、想要吸引投资的人去说吧。         从总体理论方向来说，来说，这些算法，大体上可分为两类，“神经网络”算法和“深度学习”算法，算作一类，其它的算法作为另一类。        但是，不管怎么分类，这些算法要想正常的工作，对事物的分类能够达到实用的水平，两个条件是不可或缺的，那就是“数据”、“计算力”。计算力很好理解，这些算法，都比较复杂，没有强大的CPU、内存等硬件支撑，这些算法，要么不能运行，要么猴年马月也运行不完，给不出结果。如果你训练模型，利用这些算法编好程序后，扔给计算机,它花了半年才计算完，给你打印出结果。你心中，也一定是一万个“草泥马”飘过。。。。。对于数据的要求，这是因为，这些算法的背后的数学原理，大部分都跟概率论有关。各位看官，如果兴趣，可百度“VC维”理论，针对“深度学习”的可学习性的理论解释，人类现在也没有研究透，只知道这玩意挺管用，在很多方面效果挺好，科技前沿，给出的解释是用“泛函空间概率论”来解释。但不管怎么说，就是概率论，就是瞎猜。瞎猜嘛，当然是依据越多，猜的的越准，猜的越稳。也就是数据越多，这些算法就会猜的越准，猜的越稳。好了，现在“大数据”，就可以搀和进来了。没有数据，或者数据很少、数据纬度较少，不够详细，这些算法“巧妇”，也会无米下锅，做不出可口的饭菜的。          有了所谓的“大数据”和云计算，我们就可以方便的命令这些算法“巧妇”们给我们做饭了。从‘数据’这个“米”的角度说，我们可以HDFS存储更多的米，更丰富的食材；从‘大数据组件’这个锅碗瓢盆的‘工具’角度来说，我们有了spark等组件（利用深度学习算法，比较强大的组件是TensorFlow），有了更强大的计算工具，我们可以利用这些组件调用这些高大上的分类算法，再加上所谓的“大数据”、“深度学习”、“机器学习”，就可以做出更好吃的饭了。从系统架构上来说，猜嘛。猜对、猜错都是很正常的，可能这么猜不对，换个参数、换个算法 重新猜一下，就猜对了。因此，也就有了“数据挖坑一身功，全靠调参”的说法。这就要求，我们的系统，有更好灵活性，方便我们对针对这些算法“休妻再娶”。。。。。。。。。。。       有了上面大体的介绍，针对“大数据”、“人工智能”、“深度学习”、“机器学习”等具体行业应用，我再简单说两句。        以电商行业为例，有一个概念叫“用户画像”，它是很多系统的基础，比如推荐系统、精准广告系统、大数据风控系统的等等。      用户画像，是什么呢。说到底，就是对用户的分类数据。比如说，ID 000001110011，性别：女，性格描述：萌妹子，性格特点描述，资产状况描述，信用状况描述，喜欢的颜色，钟爱的品牌，大姨妈的日期，上周的购物。。。。。。。。有了这些信息，我们就可以针对这个用户，进行精准的广告营销、精准的购物推荐、个性化的服务。。。。。。        那么问题来了。现实中，这位妹子注册信息时，性别栏里，可能填的是“男”，年龄栏里填了“5”或者“150”。你怎么知道这个妹子，可能喜欢相宜本草的面膜，她又没明确告诉你。。。。         没办法了，只能猜。如果，我们有了关于这位妹子的各类“大数据”，再结合上面的各种算法，就可以猜了。如果这个ID的用户，上购物网站时，经常浏览的是“胸罩”、“卫生巾”等女性用品，我们的算法（机器学习、深度学习等）把他猜成“女性”，是可以理解的。当然，如果是位暖男，为他女朋友、老婆买这些东西，也是可以理解的。如果我们再增加一个纬度的“大数据”，这个ID用户，最近经常看韩剧，那么他是女性可能性，就又提高了。再增加一个纬度的“大数据”，这个ID在某个评论里说“最近刚生完宝宝，听老公说XXXX,我觉的XXXX”。。。。这里，针对这个ID的画像，把他的性别改为“女”，是可以的，是有99.99%的把握的。但也无法排除0.01%的变态。。。。。       这个例子中，就把“大数据”、“机器学习”等等热门的概念都搞一块了。。。        实际工作的过程中，情况和限制，也就更多更复杂了。针对各类企业、每个企业，我想都在某些时刻，有去猜（也就是去分类）某些事情的需求。此时，找猜的“米”时，一看，之前很多数据没保存，无米下锅。没有人才，没多少人会利用这些牛逼的“算法+数据”去猜。更多是没有数据意识，针对马云口中“DT时代”，没有感官认识，不明白具体是什么意思。。。。。。         在具体落地的解决方案过程中，数据收集、存储、计算工具等等方面，现在技术发展的还是可以的。再具体“怎么猜”（是利用if elif else与语句猜，是利用线性模型猜，还是利用“深度学习”猜）的过程中，那就要具体情况具体分析了：        总共才两三中情况，看一眼就知道怎么回事，提炼出规则，编程成固定规则就行了，上深度学习，纯属脑子有病；         但像BAT这种大公司，有很多牛叉的研究员，整天研究如何利用尽可能对的数据（“大数据”），比较牛逼的算法策略（比如“深度学习”等），尽可能多猜的更准、更稳。哪怕猜准确率提高1%，那么可能多销售几个亿的商品。。。。。         目前，语音识别、机器翻译。等等，本质上，也是“猜”嘛。英语中某个句话猜成中文的意思，有30%准确率，用上深度学习后，猜对的可能性提高到了45%。。。。。某段录音，根据记录的音波，之前猜对概率是85%，积累的数据多了，用的算法牛逼了，参数调的好点了，猜对概率95%了，这就是进步啊。等到，你说依据话，计算机猜你的意思，猜对的概率是99%了，我想那时，你百度什么东西，就不用输关键词了，对这电脑说就行了。。。。        但无论怎么样，即便是BAT、谷歌等大公司，前沿研究除外，能为资本家带来直接利润的机器学习算法，目前还是比较简单的机器学习算法为主，比如一些线性模型类的算法（我记得我第一次学线性回归时，在初中数学里的内容），所以，这些算法的原理也是比较简单的。上世界90年代各方面就研究的很透了，只不过那时候，人类积累的数据少（数据就在那里，每天都在产成，只不过，那是没有性价比高的记录手段）、计算机的计算能力不足。。。。。。至于更高大上一些的算法，比如深度学习等，主要用来对系统里的某一些环节改造，增加猜对的概率。严格意义说，跟所谓的“大数据”，没多少直接关系。即便是没有“深度学习”，用其他的算法，要想达到实用效果，所需要的数据量也不一定少。        回望，很多概念，“火”与不“火”的历程也是有规律可循的。07、08、09年时，与“云”有关的很火，什么“公有云”、“私有云”、“混合云”，12、13、14年时，“大数据”很火；现在，16、17年，“机器学习”、“人工智能”很火。有了“云”架构，我们有了灵活手段的去调度硬件资源，所以要利用搞点事情啊，再加上谷歌的工程师发表了著名的三篇论文，全世界的工程师开发了相关软件；因此，后来的“大数据”火了，这时的“火”，更多是建立“数据仓库”等存储等阶段，针对数据利用、处理，也是普通简单算法范围，如统计一下数据，出一些Top榜什么的。。。。后来，有了积累了多数据、更多资源了，我们有什么理由不把跟牛逼的策略、算法搬出来，对数据挖的更深、利用的更好呢。。。。从中可以看出，这些概念火起来，是计算力的进步，是人类收集、存储、加工、处理、利用信息能力的进步。。。。————————————————————————————————————————首先声明，本人现在杭州一家互联网公司做大数据平台架构师和数据分析师。因此，以下的回答，可能带有自己的视野局限，敬请各位看官理性地指教,讨论。根据我个人的行业经验来看。现在很多人，对大数据的理解都有些偏了。目前，对大数据的主流看法就是”深度学习”,”人工智能”等很火，很高大上的东西，都需要大量的数据，所以大数据会怎样、怎样。。。。         其实，大数据的背后，是人类处理信息（也就是数据，大家不要认为大数据，这个概念中的”数据”，是12345等阿拉伯数字组成的东西，凡是能存电脑里的东西，都是数据）的IT系统的一次革命性升级。这次技术的升级，是继数据库系统后，人类处理数据手段和技能的提升。下面，我以一个例子，来说明我们信息处理手段的提升。    张三是个创业者，每晚到夜市摆摊。由于摊子很小，每天回家后，找一只笔，一个香烟盒子纸，就能把账算了、把货盘了，这时，凭借着一只铅笔，一张破纸，就能把该处理的数据信息处理了。后来，摊子稍微大了一点，张三到门口小超市花几块钱买了个计算器，每天在计算器”为零”的帮助下，再加上一只笔、一张纸把信息处理了。再后来，张三开了个小超市，他处理信息的能力也增强了，用上了Excel、word等软件来处理信息。后来，张三开开了个大超市，其信息处理工具也鸟枪换炮了，用上了进销存管理系统、财务管理系统、人事管理系统。。。。这些系统，在数据存储方面，用数据库，如mysql。在业务处理方面，招几个程序员，用php、python或java，写具体的业务处理逻辑（也就是当年张三在纸上写写画画的处理过程）。这一阶段的IT处理段位，是目前大多数中小企业所在的段位。可以看出，这个段位的IT系统和处理能力有以下不足:1、只能处理结构化数据，对大量非结构化数据（文字、语音、视频等），处理能力严重不足。2、能处理的数据量还是太小，比如，用张破纸，你处理10条数据没问题，给你个计算器，你处理100条数据没压力。用Excel，你处理10万条无压力。给你个mysql，你在千万条数据的级别范围内增删改查无压力。但是，当你要面对的数据是100亿条级别时，你的数据库、存储、业务处理代码等，就有可能分分钟闹毛病给你看。 注意:利用各种中间件构建分布式关系型数据库集群，是能应付的。此处，各位看官领会我说的什么意思就好，先不要纠结具体技术解决方案。3、处理的手段单一，只能跑程序员编好的程序，比较死板。只能按着代码逻辑跑，一点都不”智能”。4、从技术上讲，灵活性还是不足。你的进销存、财务、人事等系统。程序员编完，能用了，也就完了。没有重要问题和需求变更，也不会去频繁升级、重构和迭代更新。从这方面讲，也会造成企业在想要XX数据时，发现没有。想要XX功能时，发现要实现的成本太大。或者，在你的威严下，你手下的程序员辞职了，你满心委屈”我不就是想要个这么小、这么简单的功能么。这小子居然花了那么长时间弄，还TMD辞职了，90后，真是一代不如一代。。。。”。所以，这些，到最后，大多都不了了之。。。5、从具体的实际流程上看，流程太长、太慢。比如说，您是集团公司的老总，有一天突发奇想，想到了一个项目，想”看看相关数据”。此时，你的秘书帮你去搞数据了，北京分公司的数据，很快上来了，上海分公司的数据，秘书打了好几遍电话，才要来。山东分公司的说，我们这边忙着陪客户吃饭喝酒了，具体数据没收集呢，您稍等，我帮您问问、查一下。浙江分公司的，数据报上来了，刚放你办公桌上，你刚翻了一下，他们打电话说，数据报错了、漏报了，您稍等，我们组织人力物力，重新帮你核查。。。此时，时间上，少说也一个月过去了，还不一定保证数据都正确。数据收集上来，您也不用”分析”了。市场风云变幻，黄花菜都凉了。。。        …….鉴于此，大数据处理系统来了。有了hadoop、spark、storm、hbase、 Elasticsearch、zookeeper等等大数据工具搭建起来的数据处理集群，张三终于炮换导弹了。1、有了hdfs，张三可以把以前觉得没太大价值的数据保存起来。未来的事，谁知道呢，数据总是要的，说不定以后用的到呢。如果阿里巴巴没有保存、整理用户的交易数据等，花呗、借呗等业务，开展起来，简直就是做梦。巧妇难为无米之炊。2、有了spark等编程框架，你的业务处理流程，也更加灵活和牛逼了。你可以用python、java,scala等编写一些脚本似的数据分析程序，尽情地挖掘出有价值的东西。这一个个的job，写完后，扔给调度系统，定时，每天晚上让集群帮你跑出来就好了。挺灵活的。3、调用一些开发库，你可以玩一些机器学习等高大上的东西。出去吹牛逼也有料了。4、建立统一的数据处理中心，再加上互联网的力量，终于可以在可接受的时间范围内获得你想要的数据了，而且数据还能详细，方方面面的数据都有，最后还附有机器人”小优”的”智能”建议和温馨提示。5、借助比如storm等实时处理框架，很多结果可以秒级回馈。性能遇到瓶颈了，大不了加机器。反正一切都是分布式的。…….我记得13、14年时，大数据最火的时候。在一次电视节目中，李彦宏面对杨澜，大谈大数据，并举例”谷歌利用大数据预测流感。。。。”等等balabala的一大通，全是忽悠套路，没一点干货！！我想大多数人，听到这些东西，一般都不care，说不准还暗暗的骂一句”草，这些关我鸟事”。。。       最近，谈起大数据，很多人都往”人工智能”等高大上的东西上。我想大多数人，特别是中小企业，也不会关心。那是BAT等大公司的事，我们公司小、数据少，业务也简单。”分析”，也是电脑不如人脑。因此，大多人，也是觉得，大数据或许是未来，但是，对我来说，似乎也没多大用处。如果，此人当时心情不好，还多半认为”大数据”，纯粹是瞎忽悠。       回到本次话题，针对”大数据能火多久”，这个问题，这就要看大数据的本质了。在我看来，我们业内目前讨论”大数据”，应该更倾向于看它背后的技术对当前企业IT系统的革新。就如同目前大多数企业以关系型数据库为中心的IT系统一样，现在，我们处理信息的手段中，又添加了新的成员。现在，如果你向老大建议，我们不要以关系型数据库为核心的各类”进销存”、财务等系统了，全体回退到以Excel、word来处理信息，我相信，他会分分钟扇死你。我相信，20年后，你向老板建议，我们放弃各类以大数据处理集群为核心的精准营销系统、智能客服系统、用户智能分析系统等等，大家集体回退到以纯关系型数据库为核心的时代;我相信，他也一定会分分钟扇死你。         当前，我们对大数据的理解，越来越清晰和接地气。阿里巴巴已经把他们的大数据系统，改名为了”maxComputer”。从名字不难看出，大数据就是大电脑，这意味着更大的信息处理能力、更高的灵活性。。。        大数据能火多久，如同穿越到上世纪80年代，去问个人电脑能火多久一样。现在，我们都不会认为”个人电脑”很”火”。因为，它已经成为了人类工具箱里一件强大的工具，提高了人类的生产力。我相信，”大数据”，也会成为我们的工具箱里的这么一样工具的。     目前，看知乎里的答案。很多人讨论起大数据，很多人的看法，还是照搬教科书里的内容。其实，对真正大数据圈而言，大数据已经落地了。下了凡的七仙女，虽然是神仙，但也成为了农家媳妇，没太大讨论的必要了。大数据从几年前很火，到现在，从PPT上下凡到数据中心，也就没多大的讨论必要了。用就行了，有啥好瞎bb的。。。。。。</p><p>作者：lenglang<br>链接：<a href="https://www.zhihu.com/question/61683506/answer/213274187" target="_blank" rel="noopener">https://www.zhihu.com/question/61683506/answer/213274187</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#大数据还能火多久？&lt;/p&gt;
&lt;p&gt;我感觉很多朋友，对“大数据”、“机器学习”、“深度学习”等概念挺晕的，没有感官的认识，这里，我简单说一下：       “大数据”、“人工智能”、“机器学习”、“神经网络”、“深度学习”。这几个词往往掺杂在一起，让人不知所云，这里我简单说
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/ai/人工智能发展现状</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6/</id>
    <published>2020-04-22T12:42:49.459Z</published>
    <updated>2020-04-22T14:53:40.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“人工智能发展现状”"><a href="#“人工智能发展现状”" class="headerlink" title="“人工智能发展现状”"></a>“人工智能发展现状”</h1><!--转载-->![](https://csdnimg.cn/release/phoenix/template/new_img/reprint.png)<!--python安装手册结束--><article class="baidu_pl">    <!--python安装手册开始--><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-211130ba7a.css&quot;&gt;&lt;!-- flowchart 箭头图标 勿删 --&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;display: none;&quot;&gt;                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot; style=&quot;-webkit-tap-highlight-color: rgba(0, 0, 0, 0);&quot;&gt;&lt;/path&gt;                    &lt;/svg&gt;人工智能是继蒸汽技术、电力技术、计算机及信息技术革命之后的第四次科技革命核心驱动力。从20世纪50年代发展至今，人工智能已经形成全新的生产力，对生产结构和生产关系产生了颠覆性的改变和影响。经历了技术驱动和数据驱动阶段，人工智能现在已经进入场景驱动阶段，深入落地到各个行业之中去解决不同场景的问题。此类行业实践应用也反过来持续优化人工智能的核心算法，形成正向发展的态势。目前，人工智能主要在制造、家居、金融、零售、交通、安防、医疗、物流、教育等行业中有广泛的应用。![在这里插入图片描述](https://img-blog.csdnimg.cn/2019080216395621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lQUDAyMjk=,size_16,color_FFFFFF,t_70)一、制造随着工业制造4.0时代的推进，传统制造业对人工智能的需求开始爆发，众多提供智能工业解决方案的企业应势而生，例如智航无人机、祈飞科技等。人工智能在制造业的应用主要有三个方面：首先是智能装备，包括自动识别设备、人机交互系统、工业机器人以及数控机床等具体设备。其次是智能工厂，包括智能设计、智能生产、智能管理以及集成优化等具体内容。最后是智能服务，包括大规模个性化定制、远程运维以及预测性维护等具体服务模式。虽然目前人工智能的解决方案尚不能完全满足制造业的要求，但作为一项通用性技术，人工智能与制造业融合是大势所趋。![在这里插入图片描述](https://img-blog.csdnimg.cn/20190802162259755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lQUDAyMjk=,size_16,color_FFFFFF,t_70#pic_center)二、家居智能家居主要是基于物联网技术，通过智能硬件、软件系统、云计算平台构成一套完整的家居生态圈。用户可以进行远程控制设备，设备间可以互联互通，并进行自我学习等，来整体优化家居环境的安全性、节能性、便捷性等。值得一提的是，近两年随着智能语音技术的发展，智能音箱成为一个爆发点。小米、天猫、Rokid 等企业纷纷推出自身的智能音箱，不仅成功打开家居市场，也为未来更多的智能家居用品培养了用户习惯。但目前家居市场智能产品种类繁杂，如何打通这些产品之间的沟通壁垒，以及建立安全可靠的智能家居服务环境，是该行业下一步的发力点。三、金融人工智能在金融领域的应用主要包括：智能获客、身份识别、大数据风控、智能投顾、智能客服、金融云等，该行业也是人工智能渗透最早、最全面的行业。未来人工智能也将持续带动金融行业的智能应用升级和效率提升。例如第四范式开发的一套AI系统，不仅可以精确判断一个客户的资产配置，做清晰的风险评估，以及智能推荐产品给客户，将转化率提升65%。很多金融行业的应用，都可以作为人工智能在其他行业落地的典型案例。![在这里插入图片描述](https://img-blog.csdnimg.cn/20190802162334130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lQUDAyMjk=,size_16,color_FFFFFF,t_70#pic_center)四、零售人工智能在零售领域的应用已经十分广泛，无人便利店、智慧供应链、客流统计、无人仓/无人车等等都是的热门方向。京东自主研发的无人仓采用大量智能物流机器人进行协同与配合，通过人工智能、深度学习、图像智能识别、大数据应用等技术，让工业机器人可以进行自主的判断和行为，完成各种复杂的任务，在商品分拣、运输、出库等环节实现自动化。图普科技则将人工智能技术应用于客流统计，通过人脸识别客流统计功能，门店可以从性别、年龄、表情、新老顾客、滞留时长等维度建立到店客流用户画像，为调整运营策略提供数据基础，帮助门店运营从匹配真实到店客流的角度提升转换率。五、交通智能交通系统(Intelligent Traffic System，ITS)是通信、信息和控制技术在交通系统中集成应用的产物。ITS 应用最广泛的地区是日本，其次是美国、欧洲等地区。目前，我国在ITS方面的应用主要是通过对交通中的车辆流量、行车速度进行采集和分析，可以对交通进行实施监控和调度，有效提高通行能力、简化交通管理、降低环境污染等。![在这里插入图片描述](https://img-blog.csdnimg.cn/20190802162403738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lQUDAyMjk=,size_16,color_FFFFFF,t_70#pic_center)六、安防安防领域涉及到的范围较广，小到关系个人、家庭，大到跟社区、城市、国家安全息息相关。智能安防也是国家在城市智能化建设中投入比重较大的项目，预计2017-2021 年国内智能安防产品市场空间将从 166 亿元增长至 2094 亿元。目前智能安防类产品主要有四类：人体分析、车辆分析、行为分析、图像分析。智能安防行业现在主要还是受到硬件计算资源限制，只能运行相对简单的、对实时性要求很高的算法，随着后端智能分析根据需求匹配足够强大的硬件资源，也能运行更复杂的、允许有一定延时的算法。这两种方式还将长期同时存在。七、医疗目前，在垂直领域的图像算法和自然语言处理技术已可基本满足医疗行业的需求，市场上出现了众多技术服务商，例如提供智能医学影像技术的德尚韵兴，研发人工智能细胞识别医学诊断系统的智微信科，提供智能辅助诊断服务平台的若水医疗，统计及处理医疗数据的易通天下等。尽管智能医疗在辅助诊疗、疾病预测、医疗影像辅助诊断、药物开发等方面发挥重要作用，但由于各医院之间医学影像数据、电子病历等不流通，导致企业与医院之间合作不透明等问题，使得技术发展与数据供给之间存在矛盾。![在这里插入图片描述](https://img-blog.csdnimg.cn/20190802162427929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lQUDAyMjk=,size_16,color_FFFFFF,t_70#pic_center)八、教育科大讯飞、乂学教育等企业早已开始探索人工智能在教育领域的应用。通过图像识别，可以进行机器批改试卷、识题答题等;通过语音识别可以纠正、改进发音;而人机交互可以进行在线答疑解惑等。AI 和教育的结合一定程度上可以改善教育行业师资分布不均衡、费用高昂等问题，从工具层面给师生提供更有效率的学习方式，但还不能对教育内容产生较多实质性的影响。![在这里插入图片描述](https://img-blog.csdnimg.cn/20190802162514700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lQUDAyMjk=,size_16,color_FFFFFF,t_70#pic_center)九、物流物流行业通过利用智能搜索、 推理规划、计算机视觉以及智能机器人等技术在运输、仓储、配送装卸等流程上已经进行了自动化改造，能够基本实现无人操作。比如利用大数据对商品进行智能配送规划，优化配置物流供给、需求匹配、物流资源等。目前物流行业大部分人力分布在“最后一公里”的配送环节，京东、苏宁、菜鸟争先研发无人车、无人机，力求抢占市场机会。在不久的将来，多智时代一定会彻底走入我们的生活，有兴趣入行未来前沿产业的朋友，可以收藏多智时代，及时获取人工智能、大数据、云计算和物联网的入门知识和资讯信息，让我们一起携手，引领人工智能的未来</code></pre></article>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;“人工智能发展现状”&quot;&gt;&lt;a href=&quot;#“人工智能发展现状”&quot; class=&quot;headerlink&quot; title=&quot;“人工智能发展现状”&quot;&gt;&lt;/a&gt;“人工智能发展现状”&lt;/h1&gt;&lt;!--转载--&gt;![](https://csdnimg.cn/release/p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/ai/人工智能的利与弊</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/</id>
    <published>2020-04-22T12:39:59.585Z</published>
    <updated>2020-04-22T12:40:28.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020030515032410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTcyODMy,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h2 id="人工智能的利与弊"><a href="#人工智能的利与弊" class="headerlink" title="人工智能的利与弊"></a>人工智能的利与弊</h2><blockquote><p>过去一年，人们越来越担心人工智能和自动化对人类就业和劳动力产生的影响。这无时不刻都在警示人们：机器人将人类推入失业并造成经济和社会混乱。<br>大家都感同身受的是人工智能为改善人民生活水平作出了巨大贡献。尽管如此，仍不能确定人工智能的未来，让我们深入研究一下，看看人工智能的利弊?都有哪些好处和哪些危害!</p></blockquote><h2 id="利"><a href="#利" class="headerlink" title="利"></a>利</h2><p>1、人工智能让人类生活更美好：<br>先如今已经被广泛运用的无人驾驶不仅减轻了人们的负担，更是大大降低了事故率。再比如说，如今苹果系统的SIR手写版系统、生物识别系统都是人工智能的应用，都让人类的生活质量得到显著提高。<br>2、人工智能可以帮助人类繁荣：<br>因为人类文明的每一件事物都是智力的产物，我们用人工智能放大我们自己的智慧，有可能帮助生命像以前一样蓬勃发展，解决我们最棘手的问题，从疾病到气候变化等。<br>3、人工智能推动了人类的理性进步，可以反过来促进人类的发展：<br>人工智能研发过程的本身就具有研究人脑认知与功能的需求和特性，而使人类在这个过程中就学习了学习的方法，从而增强人类的逻辑思维能力。人工智能更新了人类应对问题的方法，比如依靠大数据的分析，沃森医生可以提供对病人伤害最小的、全新的治疗手段和技能范围。</p><p>比如，从而丰富人类应对各种问题的方法。人工智能也拓宽了人类知识技能范围，比如，人工智能根据对大数据分析得到各种新知识、新信息，使人们难以预测的洪水、地震等灾害的预报的精确程度大大提高，使人类在自然面前的约束变得更强大。<br>4、带来更多的工作机会<br>就像曾经脱离了传统农业、传统手工业的大量劳动力，在现代工业生产和城市服务业中找到新的就业机会那样，人工智能的进步也将如此——由当前数据密集型机器学习、通过机器学习与人工智能会话的系统而延伸出的很多领域，将会在未来带来很多工作机遇。<br>未来随着自动驾驶、超人类视觉听觉、智能工作流程等技术的发展，专业司机、保安、放射科医生、行政助理、税务员、家政服务员、记者、翻译等工作都将可能被人工智能所取代。</p><h2 id="弊"><a href="#弊" class="headerlink" title="弊"></a>弊</h2><p>第一，人工智能会反过来控制人类，人类也会被异化，真正可怕的不止是这些。<br>人工智能分为强人工智能跟弱人工智能，当强人工智能发生到一定程度的时候，它会产生一种自我意识，促使自身不断发展，而谷歌研究总监说：人工智能的学习不是代码，更像是一个推动，而人类能稍微看到里面的一些东西，对里面的事情有一些些的了解，但是我们却看不到全面。那么我想请问对方辩友，你们无法全面地了解人工智能，如何发展？若有一天它发展到比你高级了，并且它要消灭比自己低级的人类的时候，当人类都不复存在的时候，对方辩友又凭什么说人工智能对人类发展利大于弊呢？</p><p>第二，马克思在《资本主义的六种技术悖论》中提到机器具有减少人类劳动，和使劳动更有成效的神奇力量，但也因此引起了过多的饥饿和过多的疲劳。<br>在过去的工业革命中，劳动岗位的替代是在人与人之间进行的，但现在，现在的人类的岗位是由人工智能替代了人的岗位，那我想问问对方辩友，那些饱受困苦的人类，被人工智能所替代的人类，他们该何去何从，在有限的岗位内人类被人工智能替代了，这难道能说人工智能的发展对人类的发展是有利的吗？不过，下岗还不是最可怕的。因为人工智能会产生巨大的商业价值，它能养活那些下岗者，那些人类，那么我想再问问对方辩友，一旦到人工智能来养活人类，人类达到了马斯洛需求的最基本需求，那么人类还会有动力去追求更高的目标吗？还是会产生一种惰性醉生梦死，日渐颓废呢？作为人类，你们不觉得这样活着很可悲吗？<br>第三，我们应该赋予人工智能人权吗？这是一个很值得深思的问题。<br>当人工智能在岗位上工作的时候，或许它犯了一些小的错误，被无情地拔掉电源，剥夺了它的自由平等，这难道对它来说是公平的吗？其实在我们思考这个问题的时候，我们就已经赋予它一种人权，这难道是我们该思考的问题吗？<br>以上是答辩双方其中的一段精彩部分，下面是本人观点，仅代表本人。<br>我个人认为人工智能的发展还是利大于弊的，人们所担心的人工智能取代人类完全是无稽之谈，就像当初手机电视的问世一样也是遭到了很多人的反对，但就目前的情况来看手机已经是生活的必需品了，因为有了手机让我们的生活变得更加便捷，也让生活充满了快乐。无论是移动支付还是视频通话都诠释着手机的成功！所以我们人人工智能的出现也会向手机一样，不可能完全取代人类。人们在享受着人工智能的便利同时一直都在恐惧着，如果人类最终会被人工智能所毁灭。那就只能说没有人工智能，人类依然会走向毁灭的。<br>人工智能首次出现，这就说明，它已经被国家层面所接受，并且决定大力扶持发展，这样才能紧跟国际潮流，加强与世界各国的联系，才能在这经济全球化的世界中处于领先地位。规划中，人工智能方向的前景被看好，其相关专业亦为朝阳产业。而面对当今诸多的世界性问题，例如环境问题，利用人工智能解决也不失为一个上上策，单凭某个人或者某个群体的努力是万万办不到的，而人工智能的兴起，则为我们解决这些问题提供了新的解决方法和思路，多了许多解决问题的方法和途径。<br>最后，纵观人类社会的发展史，也是人类的科技进步史，人工智能的出现与兴起，可以说是历史的必然规律，事实胜于雄辩，大家也一定赞同我们的观点：人工智能的利大于弊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/&quot; class=&quot;lazyload&quot; data-src=&quot;https://img-blog.csdnimg.cn/2020030515032410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EIT/ai/人工智能发展历程</title>
    <link href="https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/"/>
    <id>https://salmooo.github.io/2020/04/22/EIT/ai/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</id>
    <published>2020-04-22T12:32:06.062Z</published>
    <updated>2020-04-22T12:36:49.197Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【编者按】**</strong>从19世纪中叶人工智能的萌芽时期，到现今人工智能的重生，从马文·明斯基到AlphaGo，历史上发生了哪些激动人心的故事？本文以此铺展人工智能发展近70年来背后发生的故事。作者@沐阳浸月，中科院自动化所复杂系统国家重点实验室研究生，主攻机器人与人工智能。**</p><hr><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-8f108981f100c0e5?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp"  alt=""><strong>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</strong></p><p>前不久，在人工智能领域发生了两件大事，一个就是是伟大的人工智能先驱马文·明斯基教授逝世，一个是谷歌AlphaGo击败欧洲围棋冠军，职业围棋二段樊麾。</p><p>马文·明斯基教授是几乎见证了从人工智能作为一门学科的兴起直至今日成就的所有大风大浪的人，或者可以说何教授本人就是这些大风浪的弄潮儿，他对人工智能的发展的影响意义十分深远。而谷歌AlphaGo此次取得的成就，也可以算是人工智能领域一次里程碑式的创举，它的成功标志着人工智能领域又进入了一个新高度。这篇文章，我们将从马文·明斯基还是哈佛大学本科生的时候讲起，一直到今日AlphaGo的胜利，梳理一下人工智能是怎样从初见萌芽一步一步走到今日的辉煌成就的。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-ef1bb42d46630e34?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>要是从宏观的角度来讲，人工智能的历史按照所使用的方法，可以分为两个阶段，分水岭大概在1986年神经网络的回归——</p><blockquote><p>在<strong>前半段历史</strong>中，我们主要使用的方法和思路是基于规则的方法，也就是我们试图找到人类认知事物的方法，模仿人类智能和思维方法，找到一套方法，模拟出人类思维的过程，解决人工智能的问题。</p><p><strong>后半段的历史</strong>，也就是我们现在所处的这个时期，我们主要采取的方法是基于统计的方法，也就是我们现在发现，有的时候我们不需要把人类的思维过程模拟出一套规则来教给计算机，我们可以在一个大的数量集里面来训练计算机，让它自己找到规律从而完成人工智能遇到的问题。</p></blockquote><p>这个转化也可以用一个形象的例子来描述，就像我们想造出飞机，就观察鸟是怎么样飞的，然后模仿鸟的动作就行，不需要什么空气动力学什么的，这种思想在人类历史上也被称为“鸟飞派”。但是我们都知道，怀特兄弟造出飞机靠的是空气动力学，而不是仿生学。不过我们不能就因为这一点就笑话人工智能前半段各位研究人员和前辈的努力和心血，因为这是人类认知事物的普遍规律，其实现在也有不少人会认为，计算机可以读懂文字、看懂图片靠的是依靠和我们人类一样的认知过程。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-001227da8be9c84c?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>在研究基于规则的探索中，人工智能经历了三个主要阶段——兴起、繁盛和萧条。会有这样的过程，一个重要原因是基于规则方法的局限性。好了，那我们就先扒一扒这段历史。</p><h2 id="一、萌芽阶段"><a href="#一、萌芽阶段" class="headerlink" title="一、萌芽阶段"></a><strong>一、萌芽阶段</strong></h2><p>人工智能的萌芽时期大概出现在19世纪中叶，第一位需要介绍的人物便是<strong>马文·明斯基</strong>。明斯基于1946年进入哈佛大学主修物理专业，但他选修的课程相当广泛，从电气工程、数学，到遗传学、心理学等涉及多个学科专业，后来他放弃物理改修数学。</p><p>1950年，也就是明斯基本科的最后一年，<strong>他和他的同学Dean Edmonds建造了世界上第一台神经网络计算机，并命名其为SNARC</strong>（Stochastic Neural Analog Reinforcement Calculator）。这台计算机是由3000个真空管和B-24轰炸机上一个多余的自动指示装置来模拟40个神经元组成的网络的。后来，明斯基又到普林斯顿大学攻读数学博士学位，并以“神经网络和脑模型问题”为题完成博士论文，但是当时的评审委员会并不认为这可以看做是数学。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-f855d9de88e3dc28?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（马文·明斯基）</p><p>明斯基的这些成果虽然可以被称作人工智能的早期工作，但是鉴于当时的明斯基还是一个青涩的毛头小子，所做的博士论文都不能得到相应的认可，所以影响力有限。</p><p>接着上场的第二位人物影响力就大很多，那就是<strong>计算机科学之父**</strong>阿兰·图灵，他是被认为最早提出机器智能设想的人**。图灵在1950年的时候（也就是明斯基还在读本科的时候）在杂志《思想》（Mind）发表了一篇名为“计算机器与智能”的文章，在文章中，图灵并没有提出什么具体的研究方法，但是文章中提到的好多概念，诸如图灵测试、机器学习、遗传算法和强化学习等，至今都是人工智能领域十分重要的分支。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-7c4b63da52bf792a?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（图灵在1950年的时候在杂志《思想》（Mind）发表的名为“计算机器与智能”的文章）</p><p>介绍完以上两大人物，接下来标志着人工智能作为一个独立领域而诞生的盛会——达特茅斯研讨会就要粉墨登场了。</p><p>不过在介绍达特茅斯研讨会之前，我们不得不介绍这第三位重量级的人物，那就是<strong>约翰·麦卡锡，</strong>因为他正是这次研讨会的发起人。约翰·麦卡锡于1948年获得加州理工学院数学学士学位，1951年获得普林斯顿大学数学博士学位。然后又在那里作为老师工作了两年，接着短暂地为斯坦福大学供职后到了达特茅斯大学，正是这个时期，它组织了达特茅斯研讨会。在这次大会上，麦卡锡的术语人工智能第一次被正式使用，所以麦卡锡也被称作人工智能之父。其实麦卡锡在达特茅斯会议前后，他的主要研究方向正是计算机下棋。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-a6e153c3d991eeea?imageMogr2/auto-orient/strip%7CimageView2/2/w/542/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（约翰·麦卡锡）</p><p>下棋程序的关键之一是如何减少计算机需要考虑的棋步。麦卡锡经过艰苦探索，终于发明了著名的α-β搜索法，使搜索能有效进行。α-β搜索法说核心就是，算法在采取最佳招数的情况下允许忽略一些未来不会发生的事情。说的有点抽象，我们来举个十分简单的例子。</p><p>假如你面前有两个口袋和一个你的敌人，每个口袋放着面值不等的人民币，你来选择口袋，你的敌人决定给你这个口袋里哪张面值的钱。假设你一次只能找一只口袋，在找口袋时一次只能从里面摸出一次。当然你希望面值越大越好，你的敌人自然希望面值越小越好。假如你选择了第一个口袋。现在我们从第一个口袋开始，看每一张面值，并对口袋作出评价。比方说口袋里有一张5元的和一张10元的。如果你挑了这只口袋敌人自然会给你5元的，10元的就是无关紧要的了。</p><p>现在你开始翻第二个口袋，你每次看一张面值，都会跟你能得到的最好的那张面值(5元)去比较。所以此时你肯定就去找这个口袋里面面值最小的，因为只要最少的要比5元好，那么你就可以挑这个口袋。假如你在第二个口袋摸出一张1元的，那么你就不用考虑这个口袋了，因为如果你挑了这个口袋，敌人肯定会给你1元面值的，那当然要选择最小面值的5元的那个口袋啦。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-f01422989f0b6671?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（基于α-β剪枝算法的智能五子棋）</p><p>虽然有点绕，不过我觉得你应该大概已经理解了这个思路。这就是α-β搜索法，因为这种算法在低于或者超过我们搜索中的α或者β值时就不再搜索，所以这种算法也称为α-β剪枝算法。这种算法至今仍是解决人工智能问题中一种常用的高效方法。当年IBM的深蓝国际象棋程序，因为打败世界冠军卡斯帕罗夫而闻名世界，它靠的正是在30个IBM RS/6000处理器的并行计算机上运行的α-β搜索法。</p><p>但是需要注意的是，前不久的谷歌AlphaGo，由于棋盘是19x19的，几乎所有的交叉点都可以走子，初始的分支因子为361，这对于常规的α-β搜索来说太令人生畏了，所以别看名字里面带了一个α（Alpha，有可能这个名字是为了纪念麦卡锡的α-β搜索算法），AlphaGo采用的是却是蒙特卡洛搜索树（MCTS），它是一种随机采样的搜索树算法，它解决了在有限时间内要遍历十分宽的树而牺牲深度的问题。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-9c28caed11143865?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>后来麦卡锡有从达特茅斯搬到了MIT，在那里他又做出了三项十分重要的贡献。第一个是他定义了高级语言Lisp语言，从此Lisp语言长期以来垄断着人工智能领域的应用，而且人们也有了可以拿来用的得力工具了，但是稀少而且昂贵的计算资源仍是问题。于是麦卡锡和他的同事又发明了分时技术。然后，麦卡锡发表了题为“有常识的程序”的文章，文中他描述了一种系统，取名为意见接收者，任务是使用知识来搜索问题的解，这个假想也被看成是第一个完整的人工智能系统。</p><p>同年，明斯基也搬到了MIT，他们共同创建了世界上第一座人工智能实验室——MIT AI Lab实验室。尽管后来麦卡锡和明斯基在某些观点上产生了分歧导致他们的合作并没有继续，但这是后话。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-f2ba235b6392733d?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（MIT AI Lab实验室）</p><h2 id="二、人工智能的诞生"><a href="#二、人工智能的诞生" class="headerlink" title="二、人工智能的诞生"></a><strong>二、人工智能的诞生</strong></h2><p>好了，前期的一些大人物介绍完了，让我们一起回到1956年那个意义非凡的夏天。</p><p>那年，28岁的约翰·麦卡锡，同龄的马文·明斯基，37岁的罗切斯特和40岁的香农一共四个人，提议在麦卡锡工作的达特茅斯学院开一个头脑风暴式的研讨会，他们称之为“达特茅斯夏季人工智能研究会议”。参加会议的除了以上这四位，还有6位年轻的科学家，其中包括40岁的赫伯特·西蒙和28岁的艾伦·纽维尔。在这次研讨会上，大家讨论了当时计算机科学领域尚未解决的问题，包括人工智能、自然语言处理和神经网络等。人工智能这个提法便是这次会议上提出的，上文也有提到。在这个具有历史意义的会议上，明斯基的SNARC，麦卡锡的α-β搜索法，以及西蒙和纽维尔的“逻辑理论家”是会议的三个亮点。前面已经对明斯基的SNARC，麦卡锡的α-β搜索法有所介绍，下面我们再来看一下西蒙和纽维尔的“逻辑理论家”又是什么。</p><p>西蒙和纽维尔均是来自卡内基梅隆大学（当时还叫卡内基技术学院）的研究者，他们的研究成果在这次盛会上十分引人注意。“逻辑理论家”是西蒙和纽维尔研究出来的一个推理程序，他们声称这个程序可以进行非数值的思考。然后在这次研讨会之后不久，他们的程序就能证明罗素和怀特海德的《数学原理》第二章的大部分定理。但是历史往往对新鲜事物总是反应迟缓，他们将一篇与逻辑理论家合著的论文提交到《符号逻辑杂志》的时候，编辑们拒绝了他们。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-ae0498a949c7529e?imageMogr2/auto-orient/strip%7CimageView2/2/w/382/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>我们现在来看看这个研讨会的成果，或者说叫意义。遗憾的是，由于历史的局限，这个世界上最聪明的头脑一个月的火花碰撞，并没有产生任何新的突破，他们对自然语言处理的理解，合在一起甚至不如今天一位世界上一流大学的博士毕业生。但是这次研讨会却让人工智能领域主要的人物基本上全部登场。在随后的20年，人工智能领域就被这些人以及他们在MIT、CMU、斯坦福和IBM的学生和同事们支配了。</p><p>我们看看这10个人，除了香农，当时其实大多数都没什么名气，但是不久之后便一个个开始崭露头角，其中包括四位图灵奖的获得者（麦卡锡，明斯基，西蒙和纽维尔），这四位也是我上文主要介绍的四个人。当然，香农也不用得图灵奖，作为信息论的发明人，他在科学史上的地位也图灵也差不多了。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-088c9f900d4c052c?imageMogr2/auto-orient/strip%7CimageView2/2/w/300/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（香农）</p><h2 id="三、短暂的繁荣与困境"><a href="#三、短暂的繁荣与困境" class="headerlink" title="三、短暂的繁荣与困境"></a><strong>三、短暂的繁荣与困境</strong></h2><p>从这次会议之后，人工智能迎来了它的一个春天，因为鉴于计算机一直被认为是只能进行数值计算的机器，所以，它稍微做一点看起来有智能的事情，人们都惊讶不已。</p><p>因为鉴于当时简单的计算机与编程工具，研究者们主要着眼于一些比较特定的问题。例如Herbert Gelernter建造了一个几何定理证明器，可以证明一些学生会感到棘手的几何定理；阿瑟·萨缪尔编写了西洋跳棋程序，水平能达到业余高手；James Slagle的SAINT程序能求解大学一年级的闭合式微积分问题；还有就是结合了多项技术的积木世界问题，它可以使用一只每次能拿起一块积木的机器手按照某种方式调整这些木块。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-b7edeaf95ac4380e?imageMogr2/auto-orient/strip%7CimageView2/2/w/427/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（马文·明斯基与他的积木机器人）</p><p>虽然这些早期的人工智能项目看起来拥有着巨大的热情和期望，但是由于方法的局限性，人工智能领域的研究者越来越意识到他们所遇到的瓶颈和困难，再加上没有真正令人振奋人心的项目出来而导致资助的停止，人工智能陷入了一个低潮。</p><p><strong>产生这些现实困难的原因主要有三点。</strong></p><p><strong>第一点是大部分早期程序对要完成的任务的主题一无所知。</strong>就拿机器翻译来说，给程序一个句子，会用的方法只是进行句法分割然后对分割后的成分进行词典翻译，那这样就很容易产生歧义。例如I went to the bank，bank既有银行也有河岸的意思，如果只是单纯的分割加单词翻译，这句话根本没法解释。</p><p><strong>第二点是问题的难解性</strong>。上面我已经提到，早期的人工智能程序主要解决特定的问题，因为特定的问题对象少，复杂度低啊，但是一旦问题的维度上来了，程序立马就捉襟见肘了。</p><p><strong>第三点就是程序本身的结构就有问题。</strong>例如明斯基在1969年证明了两输入的感知机连何时输入是相同的都判断不了。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-210ee72bea4a140e?imageMogr2/auto-orient/strip%7CimageView2/2/w/403/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（感知机模型）</p><p>综上，由于种种困难，再加上资助的减少，人工智能步入了寒冬。这便是人工智能历史的上半段。</p><h2 id="四、人工智能的重生"><a href="#四、人工智能的重生" class="headerlink" title="四、人工智能的重生"></a>四、人工智能的重生</h2><p>上个世纪80年代中期，当初于1969年由Bryson和Ho建立的反传学习算法被重新发明，然后统计学在人工智能领域的使用以及良好的效果也让科学界为之一振。于是在新的结构和新的方法下，人工智能又重获新生。</p><p><strong>首先兴起的是语音识别领域，在这个方面的成就一个重要的原因是隐马尔可夫模型的方法开始主导这个领域。</strong>隐马尔可夫模型包含“隐含”和“马尔可夫链”两个概念，马尔可夫链是具有这样一种特性的链条，就是现在的状态只和前一个状态有关，而和再往前的状态没有关系。所以我们遇到这样一个链条的时候，我们可以随机选择一个状态作为初始状态，然后按照上述规则随机选择后续状态。“隐含”的意思则是在这个马尔可夫链上再加一个限制就是，任意时刻的状态我们是不可知的，但是这个状态会输出一个结果，这个结果只和这个状态相关，所以这个也称为独立输出假设。</p><p>通过这么一解释我们就能看出，隐马尔可夫模型是基于严格的数学理论基础，这允许语音研究者以其他领域中发展数十年的数学成果为依据。其次这个模型的这种随机性可以通过大量的真实语音进行训练，这就保证了性能的鲁棒性。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-d0eb9ee907eeac38?imageMogr2/auto-orient/strip%7CimageView2/2/w/427/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（隐马尔可夫模型简图）</p><p>在马尔可夫链的基础上还诞生了一个以对不确定性知识进行有效表示和严格推理的形式化方法——贝叶斯网络。贝叶斯网络是一个加权的有向图，是马尔可夫链的拓展。马尔可夫链保证了网络中的每一个状态只跟与其直接相连的状态有关，而跟与它间接相连的状态没有关系，那么这就是贝叶斯网络。在这个网络中，每个节点的概率，都可以用贝叶斯公式来计算，贝叶斯网络因此得名。</p><p><strong>贝叶斯网络极大地克服了20世纪60年代和70年代概率推理系统的很多问题，它目前主导着不确定推理和专家系统中的人工智能研究。</strong>而且这种方法允许根据经验进行学习，并且结合了经典人工智能和神经网络最好的部分。所以极大的推动的人工智能领域走向现在我们正处的这个巅峰时代。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-67634c616db203c0?imageMogr2/auto-orient/strip%7CimageView2/2/w/246/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（一个简单的贝叶斯网络。雨水影响洒水器是否有动作，且雨水及洒水器二者均可影响草是否湿润）</p><p>除了这种算法上的革新，还有两个重要推动因素就是互联网的兴起以及极大数据集的可用性。就像我们用Siri的时候必须联网一样，人工智能系统基于Web的应用变得越来越普遍；我之前在文章《<a href="http://www.leiphone.com/news/201512/0sC1ADR757kXMIPu.html" target="_blank" rel="noopener">2015年，机器人界发生了哪些神奇疯狂的故事？（下）</a>》中介绍的HitchBOT，它可以拍照、自动识别路人的语言，并将回答显示在屏幕上，这个能力也是通过在网络上搜索相应的答案而实现的。</p><p>由于我们现在采用的方法已经基本上变为是基于概率的方法，所以我们便需要有大量的数据集对我们的系统进行训练，以完成监督学习。而现在的互联网环境让这种极大数据集的获得变得越来越方便和容易。就如我们所熟知的ImageNet，ImageNet是一个带有标记信息的图片库，里面的图片均已经由人对图片内容进行了标记。它就好比是一个用于测试计算机视觉系统识别能力的“题库”，包含超过百万道“题目”。 题目由图像和对应的单词（80%为名词）组成，考察的方式是计算机视觉系统能否识别图像中的物体并返回正确的单词。ImageNet使用训练题对计算机视觉系统进行“培训”，然后用测试题测试其识别能力。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-c3a72ac83ebc327c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（ImageNet数据集）</p><p>又如AlphaGo，在DeepMind的主页里，AlphaGo是这样被介绍的：它是一种计算机玩围棋的新方法，这种方法运用了基于深度神经网络的蒙特卡洛搜索树，而这个深度神经网络一方面是通过运用人类专家级围棋棋局进行监督学习来训练，另一方面还通过程序通过电脑自己与自己博弈的增强学习来进行训练，可见AlphaGo的成果也离不开通过学习人类专家级棋谱进行监督学习的这个大量数据集的使用。</p><p><img src="/" class="lazyload" data-src="https://upload-images.jianshu.io/upload_images/4834364-141e7ad30e89a89c?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp"  alt=""></p><p>从马文·明斯基到AlphaGo，人工智能走过了怎样的70年？</p><p>（DeepMind的主页里<a href="http://www.deepmind.com/alpha-go.html" target="_blank" rel="noopener">AlphaGo</a>的页面）</p><p>今天这篇文章，我们从人工智能的萌芽一直到今天AlphaGo打败击败欧洲冠军樊麾职业二段这个里程碑式的事件截止，介绍了人工智能能走到今天这个成就的一路的艰难险阻与大风大浪。我相信，随着计算机运算能力以及更加优化的算法，以及大数据集和数据挖掘等技术的帮助，人工智能的路一定会继续高歌猛进。</p><p>转载：<a href="https://www.leiphone.com/news/201601/qXo5EaNlM0Lt4CyR.html" target="_blank" rel="noopener">https://www.leiphone.com/news/201601/qXo5EaNlM0Lt4CyR.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;【编者按】**&lt;/strong&gt;从19世纪中叶人工智能的萌芽时期，到现今人工智能的重生，从马文·明斯基到AlphaGo，历史上发生了哪些激动人心的故事？本文以此铺展人工智能发展近70年来背后发生的故事。作者@沐阳浸月，中科院自动化所复杂系统国家重点实验室研究
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Funny/laugh</title>
    <link href="https://salmooo.github.io/2020/04/21/Funny/laugh/"/>
    <id>https://salmooo.github.io/2020/04/21/Funny/laugh/</id>
    <published>2020-04-21T15:04:18.002Z</published>
    <updated>2020-04-21T03:01:58.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天给大家带来点快乐，程序员才能看懂嘿嘿<br>素材来源于知乎：<a href="https://zhuanlan.zhihu.com/p/47066521" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/47066521</a></p></blockquote><ol><li>公司实习生找 Bug</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljZzA4MGFzNDlJYm1aaWFxOWxzcHA0bHhUZ3JGTkdlQ1ByWU5WWDNpYUdMS2Y4a2lhTWg4NnAzbGhRLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="2"><li>在调试时，将断点设置在错误的位置</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRm9PYzlYRExBTU5CNlM1VjdkenBTb0FNTWdUNlI0Z0VYcmYyQWljM0FESm9yTnR3TG43SHJmQS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="3"><li>当我有一个很棒的调试想法时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljMVc5ckJyeDJaaWI3dFVGOTRMbU1DdXV5RlRPQkxVOGlhUjVYcWI2cTdkZHBrUUEydW43Q2VEN0EvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="4"><li>偶然间看到自己多年前写的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVmtwYzFBREdRWDZtT2hzOE1NMm5OREZ4NmZJZkl4bldUN3dld1RrOEhEUmljbVlWUGNEc1N1dy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="5"><li>当我第一次启动我的单元测试时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljOXgzdFJXRXhWWDN0aWFsMW9pYklocFJvaWNOc2ljNWRYZ1NSVVJBNUl2eXpvVjVZaWIwZDdTUnhNMWcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="6"><li>数据库的 Delete 语句忘了使用限定词 where…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljejVrTEJUaHlwYkdBdnNWMktxNXF1MEVpYTRpYkI4YzNlaWN4TGhYY0M1YzY4RXZpYTFWMEs3VGljY3cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="7"><li>明明是个小 bug，但就是死活修不好……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVGdDakJVOE9GN3hLbUZUUWVveVVxekNsZ1VJZEVhMEo2TEJSODVrR2ljTVVXT3BDYk9ubElpY1EvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="8"><li>当我尝试调整生产数据库中的一些东西时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljbG1uNkdBaWMzOGs2VUV4VzVpYzhxMjRpYm51VzFYMXFXd2M1OVVpY0k2Z1owZlJQWGJWZDF6ZW1wZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="9"><li>好像真的没人发现我产品里的 bug……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRVYxWDVNaWMydXA2dEx3bGMwYWljaWNmcGVzWHY3MUxkcUVLVlpzQ2I3RGtMU0NTUk5oSVN5dm1BLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="10"><li>下班前我还有一项任务没有完成</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljd1p0T0hVZE96MmVacEZubWR4YzVvMFVUbE00ajJpYVhMbmRrMzBiNFBDZEpvd2JrZHVmd2FHZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="11"><li>产品还没测试直接投入生产时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljbWZnYnA4cTJabm5pYkswMnB6d0xDN0NSY1NkYUxGbzh1U0UxenZpY2tBVUNhRGljY0tqQUlwbnN3LzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="12"><li>调试过多线程的都会懂！</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWlja0JtTHo2RWliQk45STFHbUw4MEFZZWg4SmlhOFFBVWljbjBQaWJzZkpvZklwSmx5aWNoNjVaT3hwUmcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="13"><li>当我以为已捕获了所有可能的异常…的时候</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSWpaY09QTmlhV1g0ME5QM0tuUk1KVmlhYk1iem1vQWxpYkhMU2IxTWI4WTZyVWIxNVYyOXJLTmdBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="14"><li>当我试图清理几行所谓的旧代码的时候</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljUmo2dzN5WFJzQ2ljdFVkVmNyZWVSYUoyYWlhQjRsNGdIeFR1MENQVmhYbnF3WmljUWRJaWI5cDJZdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="15"><li>当有人让我帮他调试代码时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWNpYzBQVTZRTXJTaG1RT0dTWklLZjhleGZzcnloa0ZoZHJKdWljaWNLV25ab1BubkN2ZmdYZ2xWdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="16"><li>当程序员第一次向老板演示项目时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcEVHSE1PR3NtSWliazAwcWliT0M4bExrdmgyT1lFZHQyY1dOSHFqMmN3ZTVpYzhNSE1XNDdCMW5RLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="17"><li>结对编程，需要再了解一下吗？</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWNMWUZvZFI0VGVidU54aWE0bVBFRFRja2pZNmRwZWZxejVSMlR3dDZWVTd5dGVRak9xWlR5dEEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="18"><li>当你看到你几个月没碰过的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSnV1OHNGZFBIRFpOcGdSY0FWb0prcDBKekNFQUJHZ1JxendYSG0zM29uaWNkOFpqOVVBc25TZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="19"><li>接到产品经理电话的我睡意全无！</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljYWlhM0h2M052QkJpYm5HcGJlNDQ4aWJ2c1Rjc29iUDlhaWNXUGlhWlR2ckxBazNQaWNvNm1QTzNvaWNKdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="20"><li>测试的时候一切 ok，真正上线的时候……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljdDg4NHViVVFaNjlENHRMdVBpYWxqa2liZW10UDVBOXJYUElkTFVITmlicUtobDV1TnZMdlFUakpBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="21"><li>作为一个程序员，拷问灵魂的时刻到了！</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljbmliU04zVFdMcmxOS29NTWVEZjl5SkE4dDhjaWJpYjFEcXJ5eHBMaWNYSmljODl2R3JOWVRxVUJwQlEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="22"><li>当年学 C 语言的过程</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljMDJRZXpNVmhEeDhXR0VqWm9LZEZPUzNQbEVCRlQ1SWVic3F2QnoyeGRXc2Q3ZnRqdko3MWN3LzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="23"><li>当前端程序员想改后台代码时，后台程序员的样子</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljZlJsVUJJR1dFYlY0bENhaWFpYmljaFgxY3NYcUJuNVN5aWJnc2NaRnNSVG1rM3BuS1g2ejMzUDlMZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="24"><li>调试 bug</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRWV1VEt1amsxR0JSbzVWWGljNEZ4eVhPQlFiZ2pyU2liQk9SNk9la3hyWXBvMjkzQllaQ2h2M3cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="25"><li>正在调试，突然内存溢出了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljV1hoeUtlclJYWmljaWNTMXNlMHdEcmF6MGlhUlFDQWxveU1MU2Y0a1htWW5Hcks1Y0cwWTV4aWJ1Zy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="26"><li>需求文档又改了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljTVEzcGRWTk0yRWt1VkFpYTF0Y3dKY0NUU0FMRzlLdU1BVG9EOWliTDllWEMzS1FVbldFbENWNkEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="27"><li>苦逼的后端工程师</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRUsyMDVhbTUyZGlhejBQRzJoaFZLaWFqaWJrSVdCa2RUVzc0aGRhVk4xWGU5b21mWFBuNUR0QzhBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="28"><li>后端工程师做 UI 的活</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVkFMaDJvWUw0TGJHakVqaWI1U2RiYXhEbzk3MkRKOFkxakdDVVVRUDVJMVpmd0JPSHllVHRpYmcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="29"><li>前后端分离开发</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljYkJKZGtRYjQzaWNwSHJQTzF1QllGeUkyWlRldWJqYnNPQlB5WklrRVQ1TFRuREUwcGliQndvSEEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="30"><li>单身互联网狗的一天</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljWjlWeVRDdFZSMHhEV2dnOG8wUGlhQUJSZmlhaWJEUE5hWENWRG1rQ0JpYjZkb1ZpYXhnaWJXWTh5WFBBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="31"><li>在生产环境做 hotfix</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRGhPemtmenZEZnVTbEYwNXA0TE5oaWNJbGljVDNVQ3JFcUt0SlhHUGJ5Q3lkeGZJNklZazkwTWcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="32"><li>刚调稳定的系统，公司叕空降了一位架构师，又双叕要重构现有系统……</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljUHVDUEx2MUZtMnNtUWZ5aWNnWlhTMWljQWZxWUFUaWMzamxZclJkaWFuMGYxc2liVGR6NGlhVkJEdGliUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="33"><li>当程序员听客户说还在用 IE 时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWlja3pGcXlYZUowY2thYmhUTDhvTmd6SUxiUmFEY1BpYlRKdGFMdFNTZmpsUTAwS0RzMEpIM2pIUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="34"><li>当黑客拿到 root 权限之后</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVjI3RXcwekF6YW8zaWNXdEJ2aWF4aWNRS3B1cXI0ZUdpYXg4YXlITUNodG1iWVpnOEZkV24yN1dhZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="35"><li>代码进入循环分支后</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWF4Y0k3aFBaYXl6eWljS3V5OFFIcmY1dXFCOGZBRzZSM3pNaWE0QjZsQmhBRXRWVERQTjhiazFnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="36"><li>新手程序员第一次做项目的过程</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaWM0N1ZQM2x5TTlvRE1XYXBaNVZpY3JmWnFVT2R0aG8xOHZUQUNpYTVUaktoOTdXTlRpY1JtUHpiQS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="37"><li>零错误零警告一次编译通过</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljOE9Uek9lbmljTjNwMXc0ckY5OEdidlNSODVJaWNOOFZLcW1wWWZHSjY5cnVlZWpidjN4NGliaWNIUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="38"><li>春节前后上班写代码状态是这样的</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljR3RpY3RrNnhhaWFOSjU2YWljMGNkTlRTaGljZWRGMEgwYk9wUGVIMWVIdGlhbVcyUWtwcTlrcWlheGNBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="39"><li>自信爆棚地去重构一个看似简单的模块</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljUWljWFJCSThzOTY1WE1McGliQ09ZbGxBdWhwN1VqNkF4MWtrOEdpYlJsU0dBZXl6YzRUQWFpYldXZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="40"><li>被老板委派接手刚刚离职同事的项目…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcjZyU2liaWNaS3FYR0xueU1BOGI4NjJraE1XWW1CQ2ZXUUc4SVMwYWFndVdlVWlhdmd1d3pZVEZBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="41"><li>当他们要求我测试所有应用功能时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljQW9hQnRiZXdNUlI0ZkpoelAzSkFteGs0RHFneWtXdVRad3RQWU8yRWVXZXhsV3JqWWliWnNTZy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="42"><li>准备下班的时候,测试又提 bug 过來了…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRjhIZ2w4R1U5eUFpYXlsWXc4S1AzdzR6d1lqSDVLV09seWlhekVTM3p5VTFJQXJSSDFYRVp3VlEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="43"><li>使用新框架却忘记阅读文档</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWlja2lhYUttUFN0eklBY2V0UjkxeXpNR2hlYkthdzNPaG5sc1FickgwamZUZjVZNzA0eThRcVpmdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="44"><li>测试实习生的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljWkNzYlV6MU1HSWhVNUE2VHlHZURESkZkTnBxZXpib2FtT1NKZGNvSll1NFI3QnlUWUN3TUJnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="45"><li>网络延迟的危害…</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcDQyaWJXWEliT2RpYU5yRnd5eFQxcVpYVHBVU1J1Q25pY1lEU3lHVWRDUklYRVF0OVkzeWdGUmlhdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="46"><li>测试刚写完的代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSFhtWHh6MVZEWVhmM0ZnUjZ4WnFDWk51dkJaaWJScjAwSjBoaWNiUHhLa2xzaWFOWHZ5dWNkdjl3LzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="47"><li>delete 时，忘记加 where 条件了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRUtqM0tIS0dzbTllNDR0ZEowemxvWFE5QmljMkh4MVo5cFdVY0JmUUtaMFN1NVlKaWI3UEZhY2cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="48"><li>轻量级架构遇到重量级需求</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSWg5d0J1d0s5SGU3VFNEeUVhQVE0VUhod3JpYkJPWXdHRFpZdnF1WUJ6MlVVWVNPZVA4Tk9Fdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="49"><li>当我以为我修复了一个 Bug</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSGozaE5vT3I2MHhQZFRudFphdnJZWFdvblhyWlV5b2ljUnZ2Tm4zOWVGam1oSncwT2IwTlNlUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="50"><li>当我看实习生编码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljQ0t0Y2g5MDIxTUc4aWM4dmtxU2dzVmhCR2Vsa211emppY1Y2R2JadzV5aWFRbmtOSVB5d1dYcE9BLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="51"><li>首次在 IE 中测试我的网站</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljSmlic0tuVUMzbjV4WXJtWlFtdFphalgzaWJ4MThXWkZtWkxGQzZlajF0dWJNQmRyUlU4Rnd0NUEvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="52"><li>当我第一次测试我的代码时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljaGpNVzduUFFvd2RoU1Z0VjZ1UXYxQ0h6WFZBaWEwSnhsc21oNGZTUmNISTVETEZFQXR3Z00wUS82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="53"><li>新手调试 CSS</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljTm8wWmNORzRmSmU3NHBod2lhcTRIQjFFbkZzaWNEbzNUd3J0SXVKZGcySGNLV3BDSEhrYmJpY29BLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="54"><li>提前交付客户要求</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVjZYdFB5VjFxNTY3QzBrbVg0SDlzWGFwZ05UcVd2RFF2aWMzV05aTnFRSzJuYTFCNjF2TkhpY3cvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="55"><li>我设计的接口 和 别人调用我的接口 （好疼）</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRnlzV2liZGtGZzZqQVRpYzRKZ3kzZGp1cDFTV3M5NVZWV3BpYVZVWFVUd2JlYU02TnZhbE1wSnNnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="56"><li>try-catch 在错误的地方</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljckxrd2tBUHQ4WkxmRTg2ZjByV1NWdGJpYzdpYWlickZTd1h3S3psajUyMWJjd29RWFNwUzhFSVRnLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="57"><li>修改一个小 bug，却把服务器弄宕机了</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljQlcxazZOQ3VzSlpvakdOUFlpYjM3NHdjRFVNR2NnWkR3N2tQejVjN0F1VkxYajUwWld6aWFQVXcvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="58"><li>当我推错了分支</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljTm51Sm9yZ3A0TmliaWNoeFR0MXMxT0dGN0lLbkt4RHFXWEduT29HVDFvMkVIN2FseE12SFFpYXVBLzY0MA?x-oss-process=image/format,png"  alt="640"></p><ol start="59"><li>工作中经常被打断</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljR1Q3Y2NnS2x4UzNqb3MwQ2hpY3o1ZU1QOG1Yek9tRWhBeXZNZDRFQmVkSjJjSXUzVmVVODA0Zy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="60"><li>高级开发人员作为一个团队进行编程时</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljRVNmVmdEdElJWGlhU2N3M1VFNGtiWks3NXNsVTZpYmlhdzdwckFQTXZUQ01uYmcwTDZ3WDBpYzJxdy82NDA?x-oss-process=image/format,png"  alt="640"></p><ol start="61"><li>能一个手指完成的绝不用两只手系列</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljcWVZSjl4ZVAxeWlhdUo5NUl2YkZXQ1dCNHVwdGtIWEVqcG9XazlmMFQwYzhTdjNLS0NFUkVpY1EvNjQw?x-oss-process=image/format,png"  alt="640"></p><ol start="62"><li>高级开发人员重构代码</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi8xNTlpY25OVFhDaE9HblJwQm1vaEFNYTAxY2tjeGdzUWljVUVUOUwwSmM5VmxvS2dEZXY5ekpsdmZlMHNocEdzbkZkUFZSaWFXSFpST1BnS2RhT0RpYzVuRmcvNjQw?x-oss-process=image/format,png"  alt="640"></p><p>没有了，过瘾不，忍住，不能笑哈</p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9qdTFEenFYOGlhT21VYkp3TThpYVNmVWV4cG9QTkRlZVRrZzBGc0NqbWVKSEdWMlR2cmljckgxOVdhekdhTTVSYTRremZqcm56T1NuRVl1aWJtaWJJc2REaWFhQS82NDA_d3hfZm10PWpwZWc?x-oss-process=image/format,png"  alt="640?wx_fmt=jpeg"></p><p><strong>‧**</strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong>**‧</strong>‧  END  <strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong><strong>‧</strong></strong>‧<strong>**‧</strong>‧**</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天给大家带来点快乐，程序员才能看懂嘿嘿&lt;br&gt;素材来源于知乎：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47066521&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuan
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Lanqiao/蓝桥杯省内模拟赛(C++组)20200418</title>
    <link href="https://salmooo.github.io/2020/04/18/Lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B(C++%E7%BB%84)20200418/"/>
    <id>https://salmooo.github.io/2020/04/18/Lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B(C++%E7%BB%84)20200418/</id>
    <published>2020-04-18T13:37:06.363Z</published>
    <updated>2020-04-18T15:28:15.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十一届蓝桥杯省模拟赛-试题-题解"><a href="#第十一届蓝桥杯省模拟赛-试题-题解" class="headerlink" title="第十一届蓝桥杯省模拟赛 试题+题解"></a>第十一届蓝桥杯省模拟赛 试题+题解</h1><blockquote><p>  大家好，我是Salmone。<br>本文是第十一届蓝桥杯省模拟赛的试题和题解，参加的是4.18日的晚上场，<br>​这次模拟做了2个多小时，后两题不太会写然后参考大神们的帖子摸出来，不知道过多少样例<br>[toc]</p></blockquote><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>在计算机存储中，12.5MB是多少字节？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。因为1MB = 1024KB,1KB = 1024B，所以12.5MB = 12.5 * 1024 * 1024 = 12800KB * 1024 = 13107200 B。所以答案为<code>13107200</code></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>一个包含有2019个结点的无向连通图，最少包含多少条边？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。一个n个结点的无相连通图最少需要N-1条边。需要注意这里是无向的。所以答案为<code>2018</code></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>由1对括号，可以组成一种合法括号序列：()。<br>由2对括号，可以组成两种合法括号序列：()()、(())。<br>由4对括号组成的合法括号序列一共有多少种？</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。<br>这里深度为1的序列有一种为：<code>()()()()</code>,<br>深度为2的有7种:<code>(())()()</code>、<code>()(())()</code>、<code>()()(())</code>、<code>(()()())</code>、<code>(()())()</code>、<code>()(()())</code>、<code>(())(())</code>,<br>深度为3的有5种：<code>((()))()</code>、<code>()((()))</code>、<code>((())())</code>、<code>(()(()))</code>、<code>((()()))</code>,深度为4的有1种:<code>(((())))</code>，所以答案为<code>14</code>。</p><p>答案为<code>14</code></p><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>将LANQIAO中的字母重新排列，可以得到不同的单词，如LANQIAO、AAILNOQ等，注意这7个字母都要被用上，单词不一定有具体的英文意义。<br>请问，总共能排列如多少个不同的单词。</p><p>答案提交</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>​        这是一个填空题，只需要填写答案即可。 7的字母的全排列，7个都要用上，即是A77/A22=7!/2!=( 7 * 6 * 5 *<br>4 * 3 * 2 * 1 ) / 2= 2520 (这里由于<code>A</code>有2个，所以除以A22, 知识点.重复元素的排列组合)</p><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>给定一个单词，请使用凯撒密码将这个单词加密。<br>凯撒密码是一种替换加密的技术，单词中的所有字母都在字母表上向后偏移3位后被替换成密文。即a变为d，b变为e，…，w变为z，x变为a，y变为b，z变为c。<br>例如，lanqiao会变成odqtldr。</p><p>输入格式</p><p>输入一行，包含一个单词，单词中只包含小写英文字母。</p><p>输出格式</p><p>输出一行，表示加密后的密文。</p><p>样例输入</p><p>lanqiao</p><p>样例输出</p><p>odqtldr</p><p>评测用例规模与约定</p><p>对于所有评测用例，单词中的字母个数不超过100。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>​        这题我们直接将读入的数据进行一个转化就好，每个字母向后移动3个，z移动后为c，即是循环移动。需要注意的是，题目中未说明是否会有空格，以及其他字符，所以这里保险起见，我们使用getline进行读取。然后这里同样的未说明是否只有小写字母，所以我们将大写字母的情况也列出来了，如果非字母，则不变。</p><p>完整的程序为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F; 对字母进行后移</span><br><span class="line">char solve(char ch)&#123;</span><br><span class="line">    if(int(ch) &lt;&#x3D; 122 &amp;&amp; int(ch) &gt;&#x3D; 97)&#123;</span><br><span class="line">        &#x2F;&#x2F; 小写字母时,97 - 122</span><br><span class="line">        return char(97 + ((int(ch) - 97 + 3) % 26));</span><br><span class="line">    &#125; else if(int(ch) &gt;&#x3D; 65 &amp;&amp; int(ch) &lt;&#x3D; 90)&#123;</span><br><span class="line">        &#x2F;&#x2F; 大写字母时,65 - 90</span><br><span class="line">        return char(65 + ((int(ch) - 97 + 3) % 26));</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F; 非字母直接返回</span><br><span class="line">        return ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    string str &#x3D; &quot;&quot;;</span><br><span class="line">    getline(cin,str);</span><br><span class="line">    int length &#x3D; str.length();</span><br><span class="line">    for(int i &#x3D; 0; i &lt; length; i++)&#123;</span><br><span class="line">        str[i] &#x3D; solve(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;str;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>给定三个整数 a, b, c，如果一个整数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，则这个数称为反倍数。<br>请问在 1 至 n 中有多少个反倍数。</p><p>输入格式</p><p>输入的第一行包含一个整数 n。<br>第二行包含三个整数 a, b, c，相邻两个数之间用一个空格分隔。</p><p>输出格式</p><p>输出一行包含一个整数，表示答案。</p><p>样例输入</p><p>30<br>2 3 6</p><p>样例输出</p><p>10</p><p>样例说明</p><p>以下这些数满足要求：1, 5, 7, 11, 13, 17, 19, 23, 25, 29。</p><p>评测用例规模与约定</p><p>对于 40% 的评测用例，1 &lt;= n &lt;= 10000。<br>对于 80% 的评测用例，1 &lt;= n &lt;= 100000。<br>对于所有评测用例，1 &lt;= n &lt;= 1000000，1 &lt;= a &lt;= n，1 &lt;= b &lt;= n，1 &lt;= c &lt;= n。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>​        本题就是求从1到n有多少个数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，那我们直接一个暴力遍历，<br>然后进行判断即可。需要主要的是，这里需要使用的是<code>i%a</code>来判断i能否整除a，而不是<code>a%i</code>。</p><p>完整的题解代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n,a,b,c;</span><br><span class="line">    &#x2F;&#x2F;读入n,a,b,c</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; ++i) &#123;</span><br><span class="line">        if(i%a !&#x3D; 0 &amp;&amp; i%b !&#x3D; 0 &amp;&amp; i%c !&#x3D; 0) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。即 a[2i]&lt;a[2i-1], a[2i+1]&gt;a[2i]。<br>小明想知道，长度为 m，每个数都是 1 到 n 之间的正整数的摆动序列一共有多少个。</p><p>输入格式</p><p>输入一行包含两个整数 m，n。</p><p>输出格式</p><p>输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。</p><p>样例输入</p><p>3 4</p><p>样例输出</p><p>14</p><p>样例说明</p><p>以下是符合要求的摆动序列：<br>2 1 2<br>2 1 3<br>2 1 4<br>3 1 2<br>3 1 3<br>3 1 4<br>3 2 3<br>3 2 4<br>4 1 2<br>4 1 3<br>4 1 4<br>4 2 3<br>4 2 4<br>4 3 4</p><p>评测用例规模与约定</p><p>对于 20% 的评测用例，1 &lt;= n, m &lt;= 5；<br>对于 50% 的评测用例，1 &lt;= n, m &lt;= 10；<br>对于 80% 的评测用例，1 &lt;= n, m &lt;= 100；<br>对于所有评测用例，1 &lt;= n, m &lt;= 1000。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>​        这题如果直接暴力求解的话，估计只能够过50%的数据，所以还是得使用dp来进行求解。<code>dp[i][j]</code>表示第i位数时，最大数为m时共有多少个。然后根据题目要求：如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。所以我们每次处理都需要判断i的奇偶，这里使用<code>i&amp;1</code>进行判断，这里使用他的原因在之前的另一篇博客中写了，有不懂的小伙伴可以去参考一下，地址为：<a href="https://blog.csdn.net/qq_43422111/article/details/105326623" target="_blank" rel="noopener">为什么同样的算法，你的程序却一直超时？ 算法竞赛你不得不知道的小技巧</a>。然后我们为边界赋值，这里赋值只有1位数的时，最大数的不同时，可能的种类，这里初始化为<code>dp[1][i] = n - i + 1;</code>。然后我们从</p><p>​        下面我们来详细的解释一下dp的过程。这里我们计算的时候先从第一行开始，为第一行进行一个初始化，初始化为下一行可以选择的值的数目，即当前所能组成的摆动数列的个数。我们初始化<code>dp[1][i] = n - i + 1;</code></p><p>第一行中，令 <code>d[1][j]</code>为：第1个数选择大于等于 j的数的方案总数。</p><p>从第二行开始：</p><p>​    奇数行中，令 <code>d[i][j]</code>为：第i个数选择大于等于j的数时的方案总数。<br>​    偶数行中，令 <code>d[i][j]</code>为：第i个数选择小于等于j的数时的方案总数。</p><p>即从第二行开始，如果行数为偶数行，那么我们当前可能的数目为：<code>dp[i][j] = (dp[i-1][j+1] + dp[i][j-1]) % 10000;</code>,如果为奇数行则：<code>dp[i][j] = (dp[i-1][j-1] + dp[i][j+1]) % 10000;</code>。</p><p>​    然后这样的话，如果我们总的长度为奇数的话，那么就是<code>dp[m][1]</code>,如果是偶数，则为<code>dp[m][n]</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int dp[1004][1004];</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; m为长度，n为数的范围</span><br><span class="line">    int m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dp[1][i] &#x3D; n - i + 1;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 2; i &lt;&#x3D; m; i++)</span><br><span class="line">        if(i &amp; 1)</span><br><span class="line">            for(int j &#x3D; n; j &gt;&#x3D; 1; j--)</span><br><span class="line">                dp[i][j] &#x3D; (dp[i-1][j-1] + dp[i][j+1]) % 10000;</span><br><span class="line">        else</span><br><span class="line">            for(int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">                dp[i][j] &#x3D; (dp[i-1][j+1] + dp[i][j-1]) % 10000;</span><br><span class="line"></span><br><span class="line">    int ans &#x3D; m &amp; 1 ? dp[m][1] : dp[m][n];</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。<br>例如，一个 4 行 5 列的螺旋矩阵如下：<br>1 2 3 4 5<br>14 15 16 17 6<br>13 20 19 18 7<br>12 11 10 9 8</p><p>输入格式</p><p>输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。<br>第二行包含两个整数 r, c，表示要求的行号和列号。</p><p>输出格式</p><p>输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。</p><p>样例输入</p><p>4 5<br>2 2</p><p>样例输出</p><p>15</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，2 &lt;= n, m &lt;= 20。<br>对于 70% 的评测用例，2 &lt;= n, m &lt;= 100。<br>对于所有评测用例，2 &lt;= n, m &lt;= 1000，1 &lt;= r &lt;= n，1 &lt;= c &lt;= m。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>​        这题我们可以直接模拟过程将这个螺旋矩阵构建出来，然后直接输出我们需要的那个位置的数即可。<br>在我们进行构建螺旋矩阵进行上下左右走的时候记得要加一个判断，即当前的位置是否已走过，判定一下边界情况。这个和之前的一个LeetCode很像，如果有不会模拟的，可以看看博主的那篇博客，写的很详细：<a href="https://blog.csdn.net/qq_43422111/article/details/105096715" target="_blank" rel="noopener">LeetCode 54. 螺旋矩阵 C++描述</a></p><p>完整题解代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; n为行数，m列数</span><br><span class="line">    &#x2F;&#x2F; r为输出的行，c为输出的列</span><br><span class="line">    int n, m,r, c;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;c;</span><br><span class="line">    int store[1005][1005];</span><br><span class="line">    &#x2F;&#x2F; 所有置为0</span><br><span class="line">    memset(store,0, sizeof(store));</span><br><span class="line">    &#x2F;&#x2F; 总数</span><br><span class="line">    int sum &#x3D; n * m;</span><br><span class="line">    int row &#x3D; 0, col &#x3D; 0, cnt &#x3D; 1;</span><br><span class="line">    store[row][col] &#x3D; 1;</span><br><span class="line">    while(cnt &lt; sum)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 向右走，直到走到头或者下一个已经走过</span><br><span class="line">        while(col + 1 &lt; m &amp;&amp; !store[row][col+1])</span><br><span class="line">            store[row][++col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向下走，直到走到头或者下一个已经走过</span><br><span class="line">        while(row + 1 &lt; n &amp;&amp; !store[row+1][col])</span><br><span class="line">            store[++row][col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向左走，直到走到头或者下一个已经走过</span><br><span class="line">        while(col - 1 &gt;&#x3D; 0 &amp;&amp; !store[row][col-1])</span><br><span class="line">            store[row][--col] &#x3D; ++cnt;</span><br><span class="line">        &#x2F;&#x2F; 向上走，直到走到头或者下一个已经走过</span><br><span class="line">        while(row - 1 &gt;&#x3D; 0 &amp;&amp; !store[row-1][col])</span><br><span class="line">            store[--row][col] &#x3D; ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;注意数组下标，因为从0开始，所以最后输出的行列号r-1和c-1哦</span><br><span class="line">    cout&lt;&lt;store[r-1][c-1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>小明和朋友们一起去郊外植树，他们带了一些在自己实验室精心研究出的小树苗。<br>小明和朋友们一共有 n 个人，他们经过精心挑选，在一块空地上每个人挑选了一个适合植树的位置，总共 n 个。他们准备把自己带的树苗都植下去。<br>然而，他们遇到了一个困难：有的树苗比较大，而有的位置挨太近，导致两棵树植下去后会撞在一起。<br>他们将树看成一个圆，圆心在他们找的位置上。如果两棵树对应的圆相交，这两棵树就不适合同时植下（相切不受影响），称为两棵树冲突。<br>小明和朋友们决定先合计合计，只将其中的一部分树植下去，保证没有互相冲突的树。他们同时希望这些树所能覆盖的面积和（圆面积和）最大。</p><p>输入格式</p><p>输入的第一行包含一个整数 n ，表示人数，即准备植树的位置数。<br>接下来 n 行，每行三个整数 x, y, r，表示一棵树在空地上的横、纵坐标和半径。</p><p>输出格式</p><p>输出一行包含一个整数，表示在不冲突下可以植树的面积和。由于每棵树的面积都是圆周率的整数倍，请输出答案除以圆周率后的值（应当是一个整数）。</p><p>样例输入</p><p>6<br>1 1 2<br>1 4 2<br>1 7 2<br>4 1 2<br>4 4 2<br>4 7 2</p><p>样例输出</p><p>12</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，1 &lt;= n &lt;= 10；<br>对于 60% 的评测用例，1 &lt;= n &lt;= 20；<br>对于所有评测用例，1 &lt;= n &lt;= 30，0 &lt;= x, y &lt;= 1000，1 &lt;= r &lt;= 1000。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">class node&#123;</span><br><span class="line">    public:</span><br><span class="line">        int a, b, c;</span><br><span class="line">        node(int a &#x3D; 0, int b &#x3D; 0, int c &#x3D; 0):a(a), b(b), c(c)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">node arr[35];</span><br><span class="line">&#x2F;&#x2F;圆心距离与两半径相比判断是否相交，相切不受影响</span><br><span class="line">bool check(int i, int j)&#123;</span><br><span class="line">    return (arr[i].a - arr[j].a) * (arr[i].a - arr[j].a) + (arr[i].b - arr[j].b) * (arr[i].b - arr[j].b) &gt;&#x3D; (arr[i].c + arr[j].c) * (arr[i].c + arr[j].c);</span><br><span class="line">&#125;</span><br><span class="line">signed main(void)&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    &#x2F;&#x2F;初始化节点</span><br><span class="line">    for(int i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">        int a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        arr[i] &#x3D; node(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    int ans &#x3D; -1;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; (1 &lt;&lt; n); i ++)&#123;</span><br><span class="line">     &#x2F;&#x2F;现在检查这种方案是否符合规则</span><br><span class="line">        vector&lt;int&gt; mark(n);</span><br><span class="line">        int t &#x3D; i, p &#x3D; 0;</span><br><span class="line">        while(t)&#123;</span><br><span class="line">            mark[p ++] &#x3D; (t &amp; 1);</span><br><span class="line">            t &gt;&gt;&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        bool isOK &#x3D; true;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">        &#x2F;&#x2F;首先遍历所有的树，选出第一棵种下的树，然后就递归枚举下一棵，判断和已种的是否冲突，同时累加已种面积</span><br><span class="line">            if(!mark[i]) continue;</span><br><span class="line">            for(int j &#x3D; i + 1; j &lt; n; j ++)&#123;</span><br><span class="line">                if(!mark[j]) continue;</span><br><span class="line">                if(!check(i, j))&#123;</span><br><span class="line">                    isOK &#x3D; false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(isOK &#x3D;&#x3D; false) break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 计算所有种下的树的占地面积</span><br><span class="line">        if(isOK)&#123;</span><br><span class="line">            int sum &#x3D; 0;</span><br><span class="line">            for(int i &#x3D; 0; i &lt; n; i++)&#123;</span><br><span class="line">                if(mark[i])&#123;</span><br><span class="line">                    sum +&#x3D; arr[i].c * arr[i].c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans &#x3D; max(ans, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>2015年，全中国实现了户户通电。作为一名电力建设者，小明正在帮助一带一路上的国家通电。<br>这一次，小明要帮助 n 个村庄通电，其中 1 号村庄正好可以建立一个发电站，所发的电足够所有村庄使用。<br>现在，这 n 个村庄之间都没有电线相连，小明主要要做的是架设电线连接这些村庄，使得所有村庄都直接或间接的与发电站相通。<br>小明测量了所有村庄的位置（坐标）和高度，如果要连接两个村庄，小明需要花费两个村庄之间的坐标距离加上高度差的平方，形式化描述为坐标为 (x_1, y_1) 高度为 h_1 的村庄与坐标为 (x_2, y_2) 高度为 h_2 的村庄之间连接的费用为<br>sqrt((x_1-x_2)<em>(x_1-x_2)+(y_1-y_2)</em>(y_1-y_2))+(h_1-h_2)*(h_1-h_2)。<br>在上式中 sqrt 表示取括号内的平方根。请注意括号的位置，高度的计算方式与横纵坐标的计算方式不同。<br>由于经费有限，请帮助小明计算他至少要花费多少费用才能使这 n 个村庄都通电。</p><p>输入格式</p><p>输入的第一行包含一个整数 n ，表示村庄的数量。<br>接下来 n 行，每个三个整数 x, y, h，分别表示一个村庄的横、纵坐标和高度，其中第一个村庄可以建立发电站。</p><p>输出格式</p><p>输出一行，包含一个实数，四舍五入保留 2 位小数，表示答案。</p><p>样例输入</p><p>4<br>1 1 3<br>9 9 7<br>8 8 6<br>4 5 4</p><p>样例输出</p><p>17.41</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，1 &lt;= n &lt;= 10；<br>对于 60% 的评测用例，1 &lt;= n &lt;= 100；<br>对于所有评测用例，1 &lt;= n &lt;= 1000，0 &lt;= x, y, h &lt;= 10000。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>这题可以使用prim算法进行求解，别忘了最后的输出的2位小数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 1004;</span><br><span class="line">const double MAX &#x3D; 0x7f7f7f7f;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">double a[maxn][maxn],d[maxn], ans;</span><br><span class="line">bool visit[maxn];</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    int h;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line">point p[maxn];</span><br><span class="line"></span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j &#x3D; 0; j &lt;&#x3D; n; j++)</span><br><span class="line">            a[i][j] &#x3D; MAX;</span><br><span class="line">        d[i] &#x3D; MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;最小生成树模版题,这用了Prim.</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    memset(visit, 0, sizeof(visit));</span><br><span class="line">    d[1] &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int x &#x3D; 0;</span><br><span class="line">        for(int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            if(!visit[j] &amp;&amp; (x &#x3D;&#x3D; 0 || d[j] &lt; d[x])) x &#x3D; j;</span><br><span class="line">        visit[x] &#x3D; 1;</span><br><span class="line">        for(int y &#x3D; 1; y &lt;&#x3D; n; y++)</span><br><span class="line">            if(!visit[y]) d[y] &#x3D; min(d[y], a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    init();</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        scanf(&quot;%d %d %d&quot;, &amp;p[i].x, &amp;p[i].y, &amp;p[i].h);</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)</span><br><span class="line">        for(int j &#x3D; i + 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            double temp &#x3D; sqrt( (p[i].x - p[j].x) * (p[i].x - p[j].x) + (p[i].y-p[j].y) * (p[i].y-p[j].y)) + (p[i].h-p[j].h) * (p[i].h-p[j].h);</span><br><span class="line">            a[i][j] &#x3D; a[j][i] &#x3D; min(a[i][j], temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    Prim();</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 2; i &lt;&#x3D; n; i++) ans +&#x3D; d[i];</span><br><span class="line">    &#x2F;&#x2F; 输出2位小数</span><br><span class="line">    printf(&quot;%.2f&quot;, ans);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_43422111/article/details/105489080#_437" target="_blank" rel="noopener">参考博客https://blog.csdn.net/qq_43422111/article/details/105489080#_437</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第十一届蓝桥杯省模拟赛-试题-题解&quot;&gt;&lt;a href=&quot;#第十一届蓝桥杯省模拟赛-试题-题解&quot; class=&quot;headerlink&quot; title=&quot;第十一届蓝桥杯省模拟赛 试题+题解&quot;&gt;&lt;/a&gt;第十一届蓝桥杯省模拟赛 试题+题解&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git入门/Learngit</title>
    <link href="https://salmooo.github.io/2020/04/17/Git%E5%85%A5%E9%97%A8/Learngit/"/>
    <id>https://salmooo.github.io/2020/04/17/Git%E5%85%A5%E9%97%A8/Learngit/</id>
    <published>2020-04-17T05:08:58.315Z</published>
    <updated>2020-04-17T05:16:44.273Z</updated>
    
    <content type="html"><![CDATA[<p>今日温故了一下git指令，觉得不错的git学习资源分享如下，</p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的git教程</a><br>廖大大的教程真的简明易懂，还配上B站视频，很nice~</p><p><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">菜鸟git教程</a><br>菜鸟教程和廖雪峰教程差不多，例子更多一点。</p><p><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener">在线沙盒学习git</a></p><p>好啦，再分享下超级无敌全的git命令：<br>可自行到该地址自取哈。<br><a href="https://gitee.com/liaoxuefeng/learngit/blob/master/Git%E6%9C%80%E8%AF%A6%E7%BB%86%E5%91%BD%E4%BB%A4-%E5%85%B168%E6%9D%A1#" target="_blank" rel="noopener">gitee地址</a></p><p>下面也列举一波~<br>1）git help <command> # 显示command的help</p><p>2）git show # 显示某次提交的内容 git show $id</p><p>3）git co – <file> # 抛弃工作区修改</p><p>4）git co . # 抛弃工作区修改</p><p>5）git add <file> # 将工作文件修改提交到本地暂存区</p><p>6）git add . # 将所有修改过的工作文件提交暂存区</p><p>7）git rm <file> # 从版本库中删除文件</p><p>8）git rm <file> –cached # 从版本库中删除文件，但不删除文件</p><p>9）git reset <file> # 从暂存区恢复到工作文件</p><p>10）git reset – . # 从暂存区恢复到工作文件</p><p>11）git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</p><p>12）git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am “some comments”</p><p>13）git ci –amend # 修改最后一次提交记录</p><p>14）git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</p><p>15）git revert HEAD # 恢复最后一次提交的状态</p><p>16）git diff <file> # 比较当前文件和暂存区文件差异 git diff</p><p>17）git diff <id1><id1><id2> # 比较两次提交之间的差异</p><p>18）git diff <branch1>..<branch2> # 在两个分支之间比较</p><p>19）git diff –staged # 比较暂存区和版本库差异</p><p>20）git diff –stat # 仅仅比较统计信息</p><p>21）git log git log <file> # 查看该文件每次提交记录</p><p>22）git log -p <file> # 查看每次详细修改内容的diff</p><p>23）git log -p -2 # 查看最近两次详细修改内容的diff</p><p>24）git log –stat #查看提交统计信息</p><p>25）git br -r # 查看远程分支</p><p>26）git br <new_branch> # 创建新的分支</p><p>27）git br -v # 查看各个分支最后提交信息</p><p>28）git br –merged # 查看已经被合并到当前分支的分支</p><p>29）git br –no-merged # 查看尚未被合并到当前分支的分支</p><p>30）git co <branch> # 切换到某个分支</p><p>31）git co -b <new_branch> # 创建新的分支，并且切换过去</p><p>32）git co -b <new_branch> <branch> # 基于branch创建新的new_branch</p><p>33）git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</p><p>34）git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支</p><p>35）git br -d <branch> # 删除某个分支</p><p>36）git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</p><p>37）git merge <branch> # 将branch分支合并到当前分支</p><p>38）git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交</p><p>39）git diff &gt; ../sync.patch # 生成补丁</p><p>40）git apply ../sync.patch # 打补丁</p><p>41）git apply –check ../sync.patch #测试补丁能否成功</p><p>42）git stash # 暂存</p><p>43）git stash list # 列出所有stash</p><p>44）git stash apply # 恢复暂存的内容</p><p>45）git stash drop # 删除暂存区</p><p>46）git pull # 抓取远程仓库所有分支更新并合并到本地</p><p>47）git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</p><p>48）git fetch origin # 抓取远程仓库更新</p><p>49）git merge origin/master # 将远程主分支合并到本地当前分支</p><p>50）git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支</p><p>51）git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上</p><p>52）git push # push所有分支</p><p>53）git push origin master # 将本地主分支推到远程主分支</p><p>54）git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</p><p>55）git push origin <local_branch> # 创建远程分支， origin是远程仓库名</p><p>56）git push origin <local_branch>:<remote_branch> # 创建远程分支</p><p>57）git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支</p><p>58）git remote -v # 查看远程服务器地址和仓库名称</p><p>59）git remote show origin # 查看远程服务器仓库状态</p><p>60）git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</p><p>61）git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库</p><p>62）git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</p><p>63）scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</p><p>64）mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库</p><p>65）git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</p><p>66) git push -u origin master # 客户端首次提交</p><p>67) git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</p><p>68) git remote set-head origin master # 设置远程仓库的HEAD指向master分支</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日温故了一下git指令，觉得不错的git学习资源分享如下，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的git教程
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown入门</title>
    <link href="https://salmooo.github.io/2020/04/15/Markdown%E5%85%A5%E9%97%A8/markdown%E5%85%A5%E9%97%A8/"/>
    <id>https://salmooo.github.io/2020/04/15/Markdown%E5%85%A5%E9%97%A8/markdown%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-14T21:12:49.000Z</published>
    <updated>2020-04-15T03:02:27.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最全的Markdown语法汇总在这里"><a href="#最全的Markdown语法汇总在这里" class="headerlink" title="最全的Markdown语法汇总在这里"></a>最全的Markdown语法汇总在这里</h1><p>2019.03.03 00:25<br>                        3019浏览</p><!-- 手记详情 --><h1 id="Markdown-语法汇总精要"><a href="#Markdown-语法汇总精要" class="headerlink" title="Markdown 语法汇总精要"></a>Markdown 语法汇总精要</h1><p>标签： Markdown</p><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 _斜体_，这是 <strong>粗体</strong>。</p><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br><span class="line">&#96;&#96;&#96;预览</span><br><span class="line"></span><br><span class="line">你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</span><br><span class="line"></span><br><span class="line">### 3. 外链接</span><br><span class="line"></span><br><span class="line">使用 [描述](链接地址) 为文字增加外链接。</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;prism</span><br><span class="line">这是去往 [本人github](https:&#x2F;&#x2F;github.com&#x2F;moweiyang0214) 的链接。</span><br></pre></td></tr></table></figure><p>效果：<br>这是去往 <a href="https://github.com/moweiyang0214" target="_blank" rel="noopener">本人github</a> 的链接。</p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表项 一</span><br><span class="line">- 无序列表项 二</span><br><span class="line">- 无序列表项 三</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br><span class="line">&#96;&#96;&#96;预览</span><br><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">1.  有序列表项 一</span><br><span class="line">2.  有序列表项 二</span><br><span class="line">3.  有序列表项 三</span><br><span class="line"></span><br><span class="line">### 6. 文字引用</span><br><span class="line"></span><br><span class="line">使用 &gt; 表示文字引用。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">&gt; 野火烧不尽，春风吹又生。</span><br><span class="line"></span><br><span class="line">### 7. 行内代码块</span><br><span class="line"></span><br><span class="line">使用 &#96;代码&#96; 表示行内代码块。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>让我们聊聊 <code>html</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line">让我们聊聊 &#96;html&#96;。</span><br><span class="line"></span><br><span class="line">### 8.  代码块</span><br><span class="line"></span><br><span class="line">使用 四个缩进空格 表示代码块。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>这是一个代码块，此行左侧有四个不可见的空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line">这是一个代码块，此行左侧有四个不可见的空格。</span><br><span class="line"></span><br><span class="line">### 9.  插入图像</span><br><span class="line"></span><br><span class="line">使用 ![描述](图片链接地址) 插入图像。</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://avatars3.githubusercontent.com/u/10223537?s=460&v=4"  alt="我的头像"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果：![我的头像](data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB&#x2F;AAffA0nNPuCLAAAAAElFTkSuQmCC)</span><br><span class="line"></span><br><span class="line">## Markdown 高阶语法</span><br><span class="line"></span><br><span class="line">### 1. 内容目录</span><br><span class="line"></span><br><span class="line">在段落中填写 &#96;[TOC]&#96; 以显示全文内容的目录结构。</span><br><span class="line"></span><br><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line">### 2. 标签分类</span><br><span class="line"></span><br><span class="line">在编辑区任意行的列首位置输入以下代码给文稿标签：</span><br><span class="line"></span><br><span class="line">标签： 数学 英语 Markdown</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">Tags： 数学 英语 Markdown</span><br><span class="line"></span><br><span class="line">### 3. 删除线</span><br><span class="line"></span><br><span class="line">使用 ~~ 表示删除线。</span><br><span class="line"></span><br><span class="line">&lt;s&gt;这是一段错误的文本。&lt;&#x2F;s&gt;</span><br><span class="line"></span><br><span class="line">### 4. 注脚</span><br><span class="line"></span><br><span class="line">使用 [^keyword] 表示注脚。</span><br><span class="line"></span><br><span class="line">这是一个注脚&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;[1](http:&#x2F;&#x2F;www.imooc.com&#x2F;article&#x2F;280979?block_id&#x3D;tuijian_wz#fn1)&lt;&#x2F;sup&gt;的样例。</span><br><span class="line"></span><br><span class="line">这是第二个注脚&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;[2](http:&#x2F;&#x2F;www.imooc.com&#x2F;article&#x2F;280979?block_id&#x3D;tuijian_wz#fn2)&lt;&#x2F;sup&gt;的样例。</span><br><span class="line"></span><br><span class="line">### 5. LaTeX 公式</span><br><span class="line"></span><br><span class="line">$ 表示行内公式：</span><br><span class="line"></span><br><span class="line">质能守恒方程可以用一个很简洁的方程式 E&#x3D;mc2E&#x3D;mc^2E&#x3D;mc2 来表达。</span><br><span class="line"></span><br><span class="line">$$ 表示整行公式：</span><br><span class="line"></span><br><span class="line">∑i&#x3D;1nai&#x3D;0\sum_&#123;i&#x3D;1&#125;^n a_i&#x3D;0i&#x3D;1∑n​ai​&#x3D;0</span><br><span class="line"></span><br><span class="line">f(x1,xx,…,xn)&#x3D;x12+x22+⋯+xn2f(x_1,x_x,\ldots,x_n) &#x3D; x_1^2 + x_2^2 + \cdots + x_n^2 f(x1​,xx​,…,xn​)&#x3D;x12​+x22​+⋯+xn2​</span><br><span class="line"></span><br><span class="line">∑k&#x3D;0j−1γ^kjzk\sum^&#123;j-1&#125;_&#123;k&#x3D;0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;k&#x3D;0∑j−1​γ​kj​zk​</span><br><span class="line"></span><br><span class="line">访问 [MathJax](http:&#x2F;&#x2F;meta.math.stackexchange.com&#x2F;questions&#x2F;5020&#x2F;mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。</span><br><span class="line"></span><br><span class="line">### 6. 加强的代码块</span><br><span class="line"></span><br><span class="line">支持四十一种编程语言的语法高亮的显示，行号显示。</span><br><span class="line"></span><br><span class="line">非代码示例：</span><br></pre></td></tr></table></figure><p>$ sudo apt-get install vim-gnome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Python 示例：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;prism</span><br><span class="line">@requires_authorization</span><br><span class="line">def somefunc(param1&#x3D;&#39;&#39;, param2&#x3D;0):</span><br><span class="line">    &#39;&#39;&#39;A docstring&#39;&#39;&#39;</span><br><span class="line">    if param1 &gt; param2: # interesting</span><br><span class="line">        print &#39;Greater&#39;</span><br><span class="line">    return (param2 - param1 + 1) or None</span><br><span class="line"></span><br><span class="line">class SomeClass:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; message &#x3D; &#39;&#39;&#39;interpreter</span><br><span class="line">... prompt&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><p>JavaScript 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* nth element in the fibonacci series.</span><br><span class="line">* @param n &gt;&#x3D; 0</span><br><span class="line">* @return the nth element, &gt;&#x3D; 0.</span><br><span class="line">*&#x2F;</span><br><span class="line">function fib(n) &#123;</span><br><span class="line">  var a &#x3D; 1, b &#x3D; 1;</span><br><span class="line">  var tmp;</span><br><span class="line">  while (--n &gt;&#x3D; 0) &#123;</span><br><span class="line">    tmp &#x3D; a;</span><br><span class="line">    a +&#x3D; b;</span><br><span class="line">    b &#x3D; tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.write(fib(10));</span><br></pre></td></tr></table></figure><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">    section 项目确定</span><br><span class="line">        需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">        可行性报告     :after a1, 5d</span><br><span class="line">        概念验证       : 5d</span><br><span class="line">    section 项目实施</span><br><span class="line">        概要设计      :2016-07-05  , 5d</span><br><span class="line">        详细设计      :2016-07-08, 10d</span><br><span class="line">        编码          :2016-07-15, 10d</span><br><span class="line">        测试          :2016-07-22, 5d</span><br><span class="line">    section 发布验收</span><br><span class="line">        发布: 2d</span><br><span class="line">        验收: 3d</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">    B --&gt; C&#123;Decision&#125;</span><br><span class="line">    C --&gt;|One| D[Result one]</span><br><span class="line">    C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    loop every minute</span><br><span class="line">        John--&gt;Alice: Great!</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl>    <dt>名词 1</dt>    <dd>        定义 1（左侧有一个可见的冒号和四个不可见的空格）    </dd>    <dt>代码块 2</dt>    <dd>        这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）<pre><code>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块（左侧有八个不可见的空格）</span><br></pre></td></tr></table></figure>&lt;/dd&gt;</code></pre></dl><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan&#x3D;&quot;2&quot;&gt;值班人员&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期一&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期二&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;星期三&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;李强&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;张明&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;王平&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值班人员</th><th>星期一</th><th>星期二</th><th>星期三</th></tr></thead><tbody><tr><td>李强</td><td>张明</td><td>王平</td><td></td></tr></tbody></table><h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon-weibo&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>即显示微博的图标： __</p><p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon-renren&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>即显示人人的图标： __</p><p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- [ ] **Cmd Markdown 开发**</span><br><span class="line">    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</span><br><span class="line">    - [ ] 支持以 PDF 格式导出文稿</span><br><span class="line">    - [x] 新增Todo列表功能 [语法参考](https:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;1375-task-lists-in-gfm-issues-pulls-comments)</span><br><span class="line">    - [x] 改进 LaTex 功能</span><br><span class="line">        - [x] 修复 LaTex 公式渲染问题</span><br><span class="line">        - [x] 新增 LaTex 公式编号功能 [语法参考](http:&#x2F;&#x2F;docs.mathjax.org&#x2F;en&#x2F;latest&#x2F;tex.html#tex-eq-numbers)</span><br><span class="line">- [ ] **七月旅行准备**</span><br><span class="line">    - [ ] 准备邮轮上需要携带的物品</span><br><span class="line">    - [ ] 浏览日本免税店的物品</span><br><span class="line">    - [x] 购买蓝宝石公主号七月一日的船票</span><br></pre></td></tr></table></figure><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><p><strong>Cmd Markdown 开发</strong></p><ul><li><p>改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</p></li><li><p>支持以 PDF 格式导出文稿</p></li><li><p>新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></p></li><li><p>改进 LaTex 功能</p><ul><li>修复 LaTex 公式渲染问题</li><li>新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li><li><p><strong>七月旅行准备</strong></p><ul><li>准备邮轮上需要携带的物品</li><li>浏览日本免税店的物品</li><li>购买蓝宝石公主号七月一日的船票</li></ul></li></ul><hr><ol><li><p>参考链接： <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a> 。 <a href="http://www.imooc.com/article/280979?block_id=tuijian_wz#fnref1" target="_blank" rel="noopener">↩︎</a></p></li><li><p>这是另一个 <em>注脚</em> 的 <strong>文本</strong>。 <a href="http://www.imooc.com/article/280979?block_id=tuijian_wz#fnref2" target="_blank" rel="noopener">↩︎</a></p></li></ol><p>转载于<a href="http://www.imooc.com/article/280979?block_id=tuijian_wz" target="_blank" rel="noopener">慕课</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最全的Markdown语法汇总在这里&quot;&gt;&lt;a href=&quot;#最全的Markdown语法汇总在这里&quot; class=&quot;headerlink&quot; title=&quot;最全的Markdown语法汇总在这里&quot;&gt;&lt;/a&gt;最全的Markdown语法汇总在这里&lt;/h1&gt;&lt;p&gt;2019.0
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://salmooo.github.io/2020/04/14/hello-world/"/>
    <id>https://salmooo.github.io/2020/04/14/hello-world/</id>
    <published>2020-04-14T11:07:19.021Z</published>
    <updated>2020-04-14T11:07:19.021Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
